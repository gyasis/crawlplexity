
> crawlplexity@1.0.0 dev
> next dev --turbopack --port 18563

   ▲ Next.js 15.3.2 (Turbopack)
   - Local:        http://localhost:18563
   - Network:      http://192.168.0.112:18563
   - Environments: .env

 ✓ Starting...
 ✓ Ready in 1512ms
 ○ Compiling / ...
 ✓ Compiled / in 5.5s
Crawlplexity Chat State: {
  messagesCount: 0,
  sourcesCount: 0,
  isLoading: false,
  error: undefined
}
 GET / 200 in 6044ms
Crawlplexity Chat State: {
  messagesCount: 0,
  sourcesCount: 0,
  isLoading: false,
  error: undefined
}
 GET / 200 in 557ms
 ○ Compiling /api/models ...
 ✓ Compiled /api/models in 1227ms
 GET /api/models 200 in 1342ms
 ○ Compiling /api/crawlplexity/search ...
 ✓ Compiled /api/crawlplexity/search in 2.6s
[ivp996a] Crawlplexity Search API called
[ivp996a] 🔍 RAW REQUEST BODY: {
  "messages": [
    {
      "role": "user",
      "content": "test debug mode",
      "id": "riu0wt",
      "createdAt": "2025-08-01T11:53:12.442Z"
    }
  ],
  "query": "test debug mode",
  "research_type": "comprehensive",
  "model": "gpt-4o-mini",
  "parameters": {
    "temperature": 0.7,
    "max_tokens": 2000,
    "top_p": 1,
    "frequency_penalty": 0,
    "presence_penalty": 0
  },
  "debugMode": false
}
[ivp996a] Query received: test debug mode
[ivp996a] Selected model: gpt-4o-mini undefined
[ivp996a] User parameters: {
  temperature: 0.7,
  max_tokens: 2000,
  top_p: 1,
  frequency_penalty: 0,
  presence_penalty: 0
}
[ivp996a] Validated parameters: { temperature: 0.7, max_tokens: 2000, top_p: 1, frequency_penalty: 0 }
[ivp996a] 🐛 DEBUG MODE VALUE: false boolean
[ivp996a] 🐛 DEBUG MODE FROM BODY: false boolean
[VideoProcessingClient] Initialized with baseUrl: http://localhost:11236
[ivp996a] Creating debug callback, debugMode: false
[ivp996a] Debug mode disabled, returning undefined callback
[ivp996a] Debug callback created: false
✅ Redis cache connected
❌ Cache MISS for key: 9372755e...
🔍 VIDEO DEBUG: Classifying 6 URLs...
🔍 Classifying URL 1/6: https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022
[VideoProcessingClient] Classifying URL: https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022 using http://localhost:11236/classify
🔍 Classifying URL 2/6: https://playwright.dev/docs/debug
[VideoProcessingClient] Classifying URL: https://playwright.dev/docs/debug using http://localhost:11236/classify
🔍 Classifying URL 3/6: https://code.visualstudio.com/docs/debugtest/debugging
[VideoProcessingClient] Classifying URL: https://code.visualstudio.com/docs/debugtest/debugging using http://localhost:11236/classify
🔍 Classifying URL 4/6: https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests
[VideoProcessingClient] Classifying URL: https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests using http://localhost:11236/classify
🔍 Classifying URL 5/6: https://www.jetbrains.com/guide/java/tutorials/reading-code/test-debug/
[VideoProcessingClient] Classifying URL: https://www.jetbrains.com/guide/java/tutorials/reading-code/test-debug/ using http://localhost:11236/classify
🔍 Classifying URL 6/6: https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test
[VideoProcessingClient] Classifying URL: https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test using http://localhost:11236/classify
[VideoProcessingClient] Classification result for https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022: { type: 'webpage', platform: null, extension: null }
✅ Classification result for https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022: webpage
[VideoProcessingClient] Classification result for https://playwright.dev/docs/debug: { type: 'webpage', platform: null, extension: null }
✅ Classification result for https://playwright.dev/docs/debug: webpage
[VideoProcessingClient] Classification result for https://code.visualstudio.com/docs/debugtest/debugging: { type: 'webpage', platform: null, extension: null }
✅ Classification result for https://code.visualstudio.com/docs/debugtest/debugging: webpage
[VideoProcessingClient] Classification result for https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test: { type: 'webpage', platform: null, extension: null }
✅ Classification result for https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test: webpage
[VideoProcessingClient] Classification result for https://www.jetbrains.com/guide/java/tutorials/reading-code/test-debug/: { type: 'webpage', platform: null, extension: null }
✅ Classification result for https://www.jetbrains.com/guide/java/tutorials/reading-code/test-debug/: webpage
[VideoProcessingClient] Classification result for https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests: { type: 'webpage', platform: null, extension: null }
✅ Classification result for https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests: webpage
🌐 Adding to webpage URLs: https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022
🌐 Adding to webpage URLs: https://playwright.dev/docs/debug
🌐 Adding to webpage URLs: https://code.visualstudio.com/docs/debugtest/debugging
🌐 Adding to webpage URLs: https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests
🌐 Adding to webpage URLs: https://www.jetbrains.com/guide/java/tutorials/reading-code/test-debug/
🌐 Adding to webpage URLs: https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test
📊 URL Classification: 0 videos, 6 webpages
🎥 Video URLs: []
🌐 Webpage URLs: [
  'https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022',
  'https://playwright.dev/docs/debug',
  'https://code.visualstudio.com/docs/debugtest/debugging',
  'https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests',
  'https://www.jetbrains.com/guide/java/tutorials/reading-code/test-debug/',
  'https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test'
]
⏳ VIDEO DEBUG: Waiting for 6 crawl promises and 0 video promises...
🎬 VIDEO DEBUG: Video processing enabled: true
⏰ VIDEO DEBUG: Video timeout set to 5 minutes per video
✅ VIDEO DEBUG: All promises settled. Total results: 6
📊 Processing Summary:
   • Crawl results: 6 (6 successful)
   • Video results: 0 (0 successful)
   • Video processing was enabled: true
🔄 Combining search results...
🔗 Combining results:
   • Serper organic results: 6
   • Available crawl results: 6
   • Available video results: 0
🔗 Processing search result 1: https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022
   • Has crawl result: true
   • Has video result: false
🌐 Creating webpage result for: https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022
🔗 Processing search result 2: https://playwright.dev/docs/debug
   • Has crawl result: true
   • Has video result: false
🌐 Creating webpage result for: https://playwright.dev/docs/debug
🔗 Processing search result 3: https://code.visualstudio.com/docs/debugtest/debugging
   • Has crawl result: true
   • Has video result: false
🌐 Creating webpage result for: https://code.visualstudio.com/docs/debugtest/debugging
🔗 Processing search result 4: https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests
   • Has crawl result: true
   • Has video result: false
🌐 Creating webpage result for: https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests
🔗 Processing search result 5: https://www.jetbrains.com/guide/java/tutorials/reading-code/test-debug/
   • Has crawl result: true
   • Has video result: false
🌐 Creating webpage result for: https://www.jetbrains.com/guide/java/tutorials/reading-code/test-debug/
🔗 Processing search result 6: https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test
   • Has crawl result: true
   • Has video result: false
🌐 Creating webpage result for: https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test
✅ Final combined results: 6
📋 Combined results: 6 total
   • Video content results: 0
   • Webpage results: 6
💾 Cached data for key: 9372755e... (TTL: 3600s)
[ivp996a] Search completed: {
  totalResults: 6,
  searchTime: 1126,
  crawlTime: 9435,
  successfulCrawls: 6,
  videoResults: 0,
  successfulVideoResults: 0
}
[ivp996a] 🎬 Video results details:
[ivp996a] 🔄 Transforming 6 search results...
[ivp996a] Transforming result 1:
[ivp996a]   • URL: https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022
[ivp996a]   • Type: webpage
[ivp996a]   • Success: true
[ivp996a]   • Content length: 14777
[ivp996a]   • Markdown length: 14777
[ivp996a] Transforming result 2:
[ivp996a]   • URL: https://playwright.dev/docs/debug
[ivp996a]   • Type: webpage
[ivp996a]   • Success: true
[ivp996a]   • Content length: 23609
[ivp996a]   • Markdown length: 23609
[ivp996a] Transforming result 3:
[ivp996a]   • URL: https://code.visualstudio.com/docs/debugtest/debugging
[ivp996a]   • Type: webpage
[ivp996a]   • Success: true
[ivp996a]   • Content length: 53346
[ivp996a]   • Markdown length: 53346
[ivp996a] Transforming result 4:
[ivp996a]   • URL: https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests
[ivp996a]   • Type: webpage
[ivp996a]   • Success: true
[ivp996a]   • Content length: 43999
[ivp996a]   • Markdown length: 43999
[ivp996a] Transforming result 5:
[ivp996a]   • URL: https://www.jetbrains.com/guide/java/tutorials/reading-code/test-debug/
[ivp996a]   • Type: webpage
[ivp996a]   • Success: true
[ivp996a]   • Content length: 6187
[ivp996a]   • Markdown length: 6187
[ivp996a] Transforming result 6:
[ivp996a]   • URL: https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test
[ivp996a]   • Type: webpage
[ivp996a]   • Success: true
[ivp996a]   • Content length: 42474
[ivp996a]   • Markdown length: 42474
[ivp996a] Source 1 keep: [ Skip to main content ](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022#main) [ Skip to Ask Learn chat experience ](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022)
##  Microsoft Ignite
November 17–21, 2025
Join us to grow your skills, build connections, and explore new technologies. 
[ Register now ](https://aka.ms/msigniteFY26_MSLearn)
Dismiss alert
This browser is no longer supported.
Upgrade to Microsoft Edge to take advantage of the latest features, security updates, and technical support. 
[ Download Microsoft Edge ](https://go.microsoft.com/fwlink/p/?LinkID=2092881%20) [ More info about Internet Explorer and Microsoft Edge ](https://learn.microsoft.com/en-us/lifecycle/faq/internet-explorer-microsoft-edge)
Version Visual Studio 2022
  * [2022](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022)
  * [2019](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2019)
  * [Previous versions](https://learn.microsoft.com/previous-versions/visualstudio)


Search
Suggestions will filter as you type 
  * [Testing tools in Visual Studio](https://learn.microsoft.com/en-us/visualstudio/test/?view=vs-2022)
  *     * [Unit test basics](https://learn.microsoft.com/en-us/visualstudio/test/unit-test-basics?view=vs-2022)
    * [Create unit tests from code](https://learn.microsoft.com/en-us/visualstudio/test/create-unit-tests-menu?view=vs-2022)
    * [Install third-party unit test frameworks](https://learn.microsoft.com/en-us/visualstudio/test/install-third-party-unit-test-frameworks?view=vs-2022)
    *       * [Run unit tests with Test Explorer](https://learn.microsoft.com/en-us/visualstudio/test/run-unit-tests-with-test-explorer?view=vs-2022)
      * [Debug unit tests with Test Explorer](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022)
      * [Test Explorer FAQ](https://learn.microsoft.com/en-us/visualstudio/test/test-explorer-faq?view=vs-2022)
    * [Run tests from the command line](https://learn.microsoft.com/en-us/visualstudio/test/vstest-console-options?view=vs-2022)
    * [Run a unit test as a 64-bit process](https://learn.microsoft.com/en-us/visualstudio/test/run-a-unit-test-as-a-64-bit-process?view=vs-2022)
    * [Configure unit tests by using a .runsettings file](https://learn.microsoft.com/en-us/visualstudio/test/configure-unit-tests-by-using-a-dot-runsettings-file?view=vs-2022)
    * [Test Execution with Hot Reload](https://learn.microsoft.com/en-us/visualstudio/test/test-execution-with-hot-reload?view=vs-2022)
  * [Remote testing in Visual Studio](https://learn.microsoft.com/en-us/visualstudio/test/remote-testing?view=vs-2022)


Download PDF
Table of contents  Exit editor mode
  1. [ Learn ](https://learn.microsoft.com/en-us/?view=vs-2022)
  2. [ Visual Studio ](https://learn.microsoft.com/en-us/visualstudio/windows/?view=vs-2022)
  3. [ Testing ](https://learn.microsoft.com/en-us/visualstudio/test/?view=vs-2022)


  1. [Learn](https://learn.microsoft.com/en-us/?view=vs-2022)
  2. [Visual Studio](https://learn.microsoft.com/en-us/visualstudio/windows/?view=vs-2022)
  3. [Testing](https://learn.microsoft.com/en-us/visualstudio/test/?view=vs-2022)


Ask Learn Ask Learn Focus mode
Table of contents [ Read in English ](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022) Add to Collections Add to plan [ Edit ](https://github.com/MicrosoftDocs/visualstudio-docs/blob/main/docs/test/debug-unit-tests-with-test-explorer.md)
* * *
#### Share via
[ Facebook ](https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fvisualstudio%2Ftest%2Fdebug-unit-tests-with-test-explorer%3Fview%3Dvs-2022%26WT.mc_id%3Dfacebook) [ x.com ](https://twitter.com/intent/tweet?original_referer=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fvisualstudio%2Ftest%2Fdebug-unit-tests-with-test-explorer%3Fview%3Dvs-2022%26WT.mc_id%3Dtwitter&text=%0A%0D%0Ahttps%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fvisualstudio%2Ftest%2Fdebug-unit-tests-with-test-explorer%3Fview%3Dvs-2022%26WT.mc_id%3Dtwitter&tw_p=tweetbutton&url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fvisualstudio%2Ftest%2Fdebug-unit-tests-with-test-explorer%3Fview%3Dvs-2022%26WT.mc_id%3Dtwitter) [ LinkedIn ](https://www.linkedin.com/feed/?shareActive=true&text=%0A%0D%0Ahttps%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fvisualstudio%2Ftest%2Fdebug-unit-tests-with-test-explorer%3Fview%3Dvs-2022%26WT.mc_id%3Dlinkedin) Email
* * *
Print
* * *
Note
Access to this page requires authorization. You can try [signing in](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022) or changing directories. 
Access to this page requires authorization. You can try changing directories. 
# Debug and analyze unit tests by using Test Explorer
  * 03/31/2025


Feedback
##  In this article
  1. [Diagnose performance problems with a test method](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022#diagnose-performance-problems-with-a-test-method)
  2. [Get AI assistance to debug tests](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022#get-ai-assistance-to-debug-tests)
  3. [Related content](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022#related-content)


You can use Test Explorer to start a debugging session for your tests. Stepping through your code with the Visual Studio debugger seamlessly takes you back and forth between the unit tests and the project under test.
To start debugging:
  1. In the Visual Studio editor, set a breakpoint in one or more test methods that you want to debug.
Because test methods can run in any order, set breakpoints in all the test methods that you want to debug.
  2. In Test Explorer, select the test methods, right-click somewhere on the pane, and then select **Debug**.
![Screenshot that shows test execution details.](https://learn.microsoft.com/en-us/visualstudio/test/media/vs-2022/test-explorer-debug.png?view=vs-2022)
![Screenshot that shows test execution details.](https://learn.microsoft.com/en-us/visualstudio/test/media/vs-2019/test-explorer-debug.png?view=vs-2022)


For more information about the debugger, see [Debug in Visual Studio](https://learn.microsoft.com/en-us/visualstudio/debugger/debugger-feature-tour?view=vs-2022).
[](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022#diagnose-performance-problems-with-a-test-method)
## Diagnose performance problems with a test method
Starting in Visual Studio 2022 version 17.8, you can use any applicable tool in the Performance Profiler to help improve your code, and not just the Instrumentation tool. You can profile small units of work in isolation, make changes, and then remeasure and validate the impact of the changes.
To diagnose why a test method is taking more time than you'd like, or using more memory than you'd like:
  1. Right-click the method in Test Explorer, and then select **Profile**.
  2. In the Performance Profiler, select a profiling tool to test your code.


For more information, see [this blog post](https://devblogs.microsoft.com/visualstudio/a-unit-of-profiling-makes-the-allocations-go-away/) or see [Collect profiling data on release builds](https://learn.microsoft.com/en-us/visualstudio/profiling/running-profiling-tools-with-or-without-the-debugger?view=vs-2022#collect-profiling-data-on-release-builds).
To diagnose why a test method is taking too much time:
  * Right-click the method in Test Explorer, and then select **Profile**.


For more information, see [Instrumentation profiling report](https://learn.microsoft.com/en-us/visualstudio/profiling/understanding-instrumentation-data-values?view=vs-2017&preserve-view=true).
This feature is not currently supported for .NET Core.
[](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022#get-ai-assistance-to-debug-tests)
## Get AI assistance to debug tests
Starting in Visual Studio 2022 version 17.12 Preview 2, you can get quick assistance from GitHub Copilot to debug tests if you have an [active Copilot subscription](https://learn.microsoft.com/en-us/visualstudio/ide/visual-studio-github-copilot-chat?view=vs-2022#prerequisites). To get help, right-click a failed test in Test Explorer, and then select of the following commands:
  * **Explain failure with Copilot**
  * **Debug with Copilot**


![Screenshot of debugging tests with Copilot.](https://learn.microsoft.com/en-us/visualstudio/test/media/vs-2022/debug-tests-with-copilot.png?view=vs-2022)
If you debug with GitHub Copilot:
  1. It provides you with a debug plan.
  2. It sets appropriate breakpoints and watch variables.
  3. It starts the debug session.


When the debugger hits the breakpoint, it provides GitHub Copilot with values for the watched variables. Copilot then determines your next step: either continue debugging or fix the problem code. You can continue the Copilot Chat conversation until you have a passing test.
[](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022#related-content)
## Related content
  * [Unit test your code](https://learn.microsoft.com/en-us/visualstudio/test/unit-test-your-code?view=vs-2022)
  * [Run unit tests with Test Explorer](https://learn.microsoft.com/en-us/visualstudio/test/run-unit-tests-with-test-explorer?view=vs-2022)
  * [Test Explorer FAQ](https://learn.microsoft.com/en-us/visualstudio/test/test-explorer-faq?view=vs-2022)


* * *
## Feedback
Was this page helpful? 
Yes No
* * *
##  Additional resources 
  * [ Run Unit Tests with Test Explorer - Visual Studio (Windows) ](https://learn.microsoft.com/en-us/visualstudio/test/run-unit-tests-with-test-explorer?source=recommendations)
Run tests by using Test Explorer in Visual Studio, enable automatic tests after build, view results, group and filter the test list, create playlists, and use shortcuts. 
  * [ Review Test Explorer FAQ Issues and Answers - Visual Studio (Windows) ](https://learn.microsoft.com/en-us/visualstudio/test/test-explorer-faq?source=recommendations)
Review frequently asked questions (FAQs) about Visual Studio Test Explorer, which include some common troubleshooting scenarios. 
  * [ Configure process architecture for unit tests - Visual Studio (Windows) ](https://learn.microsoft.com/en-us/visualstudio/test/run-a-unit-test-as-a-64-bit-process?source=recommendations)
Configure process architecture for unit tests and run unit tests and capture code coverage information as a 64-bit process, and recompile code or tests compiled as 32-bit/x86 to run them as a 64-bit process. 
  * [ Create, run, and customize C# unit tests - Visual Studio (Windows) ](https://learn.microsoft.com/en-us/visualstudio/test/walkthrough-creating-and-running-unit-tests-for-managed-code?source=recommendations)
Learn how to create, run, and customize a series of unit tests using the Microsoft unit test framework for managed code and Visual Studio Test Explorer. 
  * [ Create a Unit Test Project - Visual Studio (Windows) ](https://learn.microsoft.com/en-us/visualstudio/test/create-a-unit-test-project?source=recommendations)
Learn how to create a unit test project. The test project can be in the same solution as the production code, or it can be in a separate solution. 
  * [ Configure and use Live Unit Testing - Visual Studio (Windows) ](https://learn.microsoft.com/en-us/visualstudio/test/live-unit-testing?source=recommendations)
Learn about Live Unit Testing during application development, including supported frameworks and how to configure Live Unit Testing. 
  * [ Determine code testing coverage - Visual Studio (Windows) ](https://learn.microsoft.com/en-us/visualstudio/test/using-code-coverage-to-determine-how-much-code-is-being-tested?source=recommendations)
Learn how to use the code coverage feature of Visual Studio to determine what proportion of your project code is being tested by coded tests. 


Show 4 more
Module 
[ Interactively debug .NET apps with the Visual Studio debugger - Training ](https://learn.microsoft.com/en-us/training/modules/dotnet-debug-visual-studio/?source=recommendations)
Learn how to efficiently debug your .NET app by using Visual Studio to fix your bugs quickly. Analyze and fix your C# applications by using the interactive debugger within Visual Studio. 
Certification 
[ GitHub Copilot - Certifications ](https://learn.microsoft.com/en-us/credentials/certifications/github-copilot/?source=recommendations)
The GitHub Copilot certification exam evaluates your skill in using the AI-driven code completion tool in various programming languages, certifying your capability to optimize software development workflows efficiently. 
##  In this article 
  1. [Diagnose performance problems with a test method](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022#diagnose-performance-problems-with-a-test-method)
  2. [Get AI assistance to debug tests](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022#get-ai-assistance-to-debug-tests)
  3. [Related content](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022#related-content)


Was this page helpful?
Yes No
## 
Ask Learn
Preview
Ask Learn is an AI assistant that can answer questions, clarify concepts, and define terms using trusted Microsoft documentation.
Please sign in to use Ask Learn.
[ Sign in ](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022)
[English (United States)](https://learn.microsoft.com/en-us/locale?target=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fvisualstudio%2Ftest%2Fdebug-unit-tests-with-test-explorer%3Fview%3Dvs-2022)
[ Your Privacy Choices](https://aka.ms/yourcaliforniaprivacychoices)
Theme
  * Light 
  * Dark 
  * High contrast 


  * [AI Disclaimer](https://learn.microsoft.com/en-us/principles-for-ai-generated-content)
  * [Previous Versions](https://learn.microsoft.com/en-us/previous-versions/)
  * [Blog](https://techcommunity.microsoft.com/t5/microsoft-learn-blog/bg-p/MicrosoftLearnBlog)
  * [Contribute](https://learn.microsoft.com/en-us/contribute)
  * [Privacy](https://go.microsoft.com/fwlink/?LinkId=521839)
  * [Terms of Use](https://learn.microsoft.com/en-us/legal/termsofuse)
  * [Trademarks](https://www.microsoft.com/legal/intellectualproperty/Trademarks/)
  * © Microsoft 2025


 (success: true, hasMarkdown: true, hasDescription: true)
[ivp996a] Source 2 keep: [Skip to main content](https://playwright.dev/docs/debug#__docusaurus_skipToContent_fallback)
[![Playwright logo](https://playwright.dev/img/playwright-logo.svg) **Playwright**](https://playwright.dev/)[Docs](https://playwright.dev/docs/intro)[API](https://playwright.dev/docs/api/class-playwright)
[Node.js](https://playwright.dev/docs/debug)
  * [Node.js](https://playwright.dev/docs/debug)
  * [Python](https://playwright.dev/python/docs/debug)
  * [Java](https://playwright.dev/java/docs/debug)
  * [.NET](https://playwright.dev/dotnet/docs/debug)


[Community](https://playwright.dev/community/welcome)
[](https://github.com/microsoft/playwright)[](https://aka.ms/playwright/discord)
Search`K`
  * [Getting Started](https://playwright.dev/docs/debug)
    * [Installation](https://playwright.dev/docs/intro)
    * [Writing tests](https://playwright.dev/docs/writing-tests)
    * [Generating tests](https://playwright.dev/docs/codegen-intro)
    * [Running and debugging tests](https://playwright.dev/docs/running-tests)
    * [Trace viewer](https://playwright.dev/docs/trace-viewer-intro)
    * [Setting up CI](https://playwright.dev/docs/ci-intro)
  * [Getting started - VS Code](https://playwright.dev/docs/getting-started-vscode)
  * [Release notes](https://playwright.dev/docs/release-notes)
  * [Canary releases](https://playwright.dev/docs/canary-releases)
  * [Playwright Test](https://playwright.dev/docs/debug)
    * [Test configuration](https://playwright.dev/docs/test-configuration)
    * [Test use options](https://playwright.dev/docs/test-use-options)
    * [Annotations](https://playwright.dev/docs/test-annotations)
    * [Command line](https://playwright.dev/docs/test-cli)
    * [Emulation](https://playwright.dev/docs/emulation)
    * [Fixtures](https://playwright.dev/docs/test-fixtures)
    * [Global setup and teardown](https://playwright.dev/docs/test-global-setup-teardown)
    * [Parallelism](https://playwright.dev/docs/test-parallel)
    * [Parameterize tests](https://playwright.dev/docs/test-parameterize)
    * [Projects](https://playwright.dev/docs/test-projects)
    * [Reporters](https://playwright.dev/docs/test-reporters)
    * [Retries](https://playwright.dev/docs/test-retries)
    * [Sharding](https://playwright.dev/docs/test-sharding)
    * [Timeouts](https://playwright.dev/docs/test-timeouts)
    * [TypeScript](https://playwright.dev/docs/test-typescript)
    * [UI Mode](https://playwright.dev/docs/test-ui-mode)
    * [Web server](https://playwright.dev/docs/test-webserver)
  * [Guides](https://playwright.dev/docs/debug)
    * [Library](https://playwright.dev/docs/library)
    * [Accessibility testing](https://playwright.dev/docs/accessibility-testing)
    * [Actions](https://playwright.dev/docs/input)
    * [Assertions](https://playwright.dev/docs/test-assertions)
    * [API testing](https://playwright.dev/docs/api-testing)
    * [Authentication](https://playwright.dev/docs/auth)
    * [Auto-waiting](https://playwright.dev/docs/actionability)
    * [Best Practices](https://playwright.dev/docs/best-practices)
    * [Browsers](https://playwright.dev/docs/browsers)
    * [Chrome extensions](https://playwright.dev/docs/chrome-extensions)
    * [Clock](https://playwright.dev/docs/clock)
    * [Components (experimental)](https://playwright.dev/docs/test-components)
    * [Debugging Tests](https://playwright.dev/docs/debug)
    * [Dialogs](https://playwright.dev/docs/dialogs)
    * [Downloads](https://playwright.dev/docs/downloads)
    * [Evaluating JavaScript](https://playwright.dev/docs/evaluating)
    * [Events](https://playwright.dev/docs/events)
    * [Extensibility](https://playwright.dev/docs/extensibility)
    * [Frames](https://playwright.dev/docs/frames)
    * [Handles](https://playwright.dev/docs/handles)
    * [Isolation](https://playwright.dev/docs/browser-contexts)
    * [Locators](https://playwright.dev/docs/locators)
    * [Mock APIs](https://playwright.dev/docs/mock)
    * [Mock browser APIs](https://playwright.dev/docs/mock-browser-apis)
    * [Navigations](https://playwright.dev/docs/navigations)
    * [Network](https://playwright.dev/docs/network)
    * [Other locators](https://playwright.dev/docs/other-locators)
    * [Pages](https://playwright.dev/docs/pages)
    * [Page object models](https://playwright.dev/docs/pom)
    * [Screenshots](https://playwright.dev/docs/screenshots)
    * [Snapshot testing](https://playwright.dev/docs/aria-snapshots)
    * [Test generator](https://playwright.dev/docs/codegen)
    * [Touch events (legacy)](https://playwright.dev/docs/touch-events)
    * [Trace viewer](https://playwright.dev/docs/trace-viewer)
    * [Videos](https://playwright.dev/docs/videos)
    * [Visual comparisons](https://playwright.dev/docs/test-snapshots)
    * [WebView2](https://playwright.dev/docs/webview2)
  * [Migration](https://playwright.dev/docs/debug)
  * [Integrations](https://playwright.dev/docs/debug)
  * [Supported languages](https://playwright.dev/docs/languages)


  * [](https://playwright.dev/)
  * Guides
  * Debugging Tests


On this page
# Debugging Tests
## VS Code debugger[​](https://playwright.dev/docs/debug#vs-code-debugger "Direct link to VS Code debugger")
We recommend using the [VS Code Extension](https://playwright.dev/docs/getting-started-vscode) for debugging for a better developer experience. With the VS Code extension you can debug your tests right in VS Code, see error messages, set breakpoints and step through your tests.
![running test in debug mode](https://user-images.githubusercontent.com/13063165/212740233-3f278825-13e7-4a88-a118-dd4478d43a16.png)
### Error Messages[​](https://playwright.dev/docs/debug#error-messages "Direct link to Error Messages")
If your test fails VS Code will show you error messages right in the editor showing what was expected, what was received as well as a complete call log.
![error messaging in vs code](https://user-images.githubusercontent.com/13063165/212738654-b573b7c9-05be-476f-ab4c-201bf4265bc0.png)
### Live Debugging[​](https://playwright.dev/docs/debug#live-debugging "Direct link to Live Debugging")
You can debug your test live in VS Code. After running a test with the `Show Browser` option checked, click on any of the locators in VS Code and it will be highlighted in the Browser window. Playwright will also show you if there are multiple matches.
![live debugging in VS Code](https://user-images.githubusercontent.com/13063165/212884329-0755b007-0d69-4987-b084-38fd5bfb577d.png)
You can also edit the locators in VS Code and Playwright will show you the changes live in the browser window.
![live debugging in VS Code](https://user-images.githubusercontent.com/13063165/212884772-5022d4b1-6fab-456f-88e3-506f2354e238.png)
### Picking a Locator[​](https://playwright.dev/docs/debug#picking-a-locator "Direct link to Picking a Locator")
Pick a [locator](https://playwright.dev/docs/locators) and copy it into your test file by clicking the **Pick locator** button form the testing sidebar. Then in the browser click the element you require and it will now show up in the **Pick locator** box in VS Code. Press 'enter' on your keyboard to copy the locator into the clipboard and then paste anywhere in your code. Or press 'escape' if you want to cancel.
![Pick locators](https://user-images.githubusercontent.com/13063165/212741666-6479a702-2517-44a3-9eca-e719e13b379c.png)
Playwright will look at your page and figure out the best locator, prioritizing [role, text and test id locators](https://playwright.dev/docs/locators). If Playwright finds multiple elements matching the locator, it will improve the locator to make it resilient and uniquely identify the target element, so you don't have to worry about failing tests due to locators.
### Run in Debug Mode[​](https://playwright.dev/docs/debug#run-in-debug-mode "Direct link to Run in Debug Mode")
To set a breakpoint click next to the line number where you want the breakpoint to be until a red dot appears. Run the tests in debug mode by right clicking on the line next to the test you want to run.
![setting debug test mode](https://user-images.githubusercontent.com/13063165/212739847-ecb7dcfe-8929-45f3-b24e-f9c4b592f430.png)
A browser window will open and the test will run and pause at where the breakpoint is set. You can step through the tests, pause the test and rerun the tests from the menu in VS Code.
![running test in debug mode](https://user-images.githubusercontent.com/13063165/212740233-3f278825-13e7-4a88-a118-dd4478d43a16.png)
### Debug Tests Using Chrome DevTools[​](https://playwright.dev/docs/debug#debug-tests-using-chrome-devtools "Direct link to Debug Tests Using Chrome DevTools")
Instead of using `Debug Test`, choose `Run Test` in VS Code. With `Show Browser` enabled, the browser session is reused, letting you open Chrome DevTools for continuous debugging of your tests and the web application.
### Debug in different Browsers[​](https://playwright.dev/docs/debug#debug-in-different-browsers "Direct link to Debug in different Browsers")
By default, debugging is done using the Chromium profile. You can debug your tests on different browsers by right clicking on the debug icon in the testing sidebar and clicking on the 'Select Default Profile' option from the dropdown.
![debugging on specific profile](https://user-images.githubusercontent.com/13063165/212879469-436f8130-c62a-49e1-9d67-c1903b478d5f.png)
Then choose the test profile you would like to use for debugging your tests. Each time you run your test in debug mode it will use the profile you selected. You can run tests in debug mode by right clicking the line number where your test is and selecting 'Debug Test' from the menu.
![choosing a profile for debugging](https://user-images.githubusercontent.com/13063165/212880198-eac22c3e-68ce-47da-9163-d6b376ae7575.png)
To learn more about debugging, see [Debugging in Visual Studio Code](https://code.visualstudio.com/docs/editor/debugging).
## Playwright Inspector[​](https://playwright.dev/docs/debug#playwright-inspector "Direct link to Playwright Inspector")
The Playwright Inspector is a GUI tool to help you debug your Playwright tests. It allows you to step through your tests, live edit locators, pick locators and see actionability logs.
![Playwright Inspector](https://user-images.githubusercontent.com/13063165/212924587-4b84e5f6-b147-40e9-8c75-d7b9ab6b7ca1.png)
### Run in debug mode[​](https://playwright.dev/docs/debug#run-in-debug-mode-1 "Direct link to Run in debug mode")
Run your tests with the `--debug` flag to open the inspector. This configures Playwright for debugging and opens the inspector. Additional useful defaults are configured when `--debug` is used:
  * Browsers launch in headed mode
  * Default timeout is set to 0 (= no timeout)


#### Debug all tests on all browsers[​](https://playwright.dev/docs/debug#debug-all-tests-on-all-browsers "Direct link to Debug all tests on all browsers")
To debug all tests run the test command with the `--debug` flag. This will run tests one by one, and open the inspector and a browser window for each test.
```
npx playwright test--debug  

```

#### Debug one test on all browsers[​](https://playwright.dev/docs/debug#debug-one-test-on-all-browsers "Direct link to Debug one test on all browsers")
To debug one test on a specific line, run the test command followed by the name of the test file and the line number of the test you want to debug, followed by the `--debug` flag. This will run a single test in each browser configured in your [`playwright.config`](https://playwright.dev/docs/test-projects#configure-projects-for-multiple-browsers) and open the inspector.
```
npx playwright test example.spec.ts:10 --debug  

```

#### Debug on a specific browser[​](https://playwright.dev/docs/debug#debug-on-a-specific-browser "Direct link to Debug on a specific browser")
In Playwright you can configure projects in your [`playwright.config`](https://playwright.dev/docs/test-projects#configure-projects-for-multiple-browsers). Once configured you can then debug your tests on a specific browser or mobile viewport using the `--project` flag followed by the name of the project configured in your `playwright.config`.
```
npx playwright test--project=chromium --debug  
npx playwright test--project="Mobile Safari"--debug  
npx playwright test--project="Microsoft Edge"--debug  

```

#### Debug one test on a specific browser[​](https://playwright.dev/docs/debug#debug-one-test-on-a-specific-browser "Direct link to Debug one test on a specific browser")
To run one test on a specific browser add the name of the test file and the line number of the test you want to debug as well as the `--project` flag followed by the name of the project.
```
npx playwright test example.spec.ts:10 --project=webkit --debug  

```

### Stepping through your tests[​](https://playwright.dev/docs/debug#stepping-through-your-tests "Direct link to Stepping through your tests")
You can play, pause or step through each action of your test using the toolbar at the top of the Inspector. You can see the current action highlighted in the test code, and matching elements highlighted in the browser window.
![Playwright Inspector and browser](https://user-images.githubusercontent.com/13063165/212936618-84b87acc-bc2e-46ed-994b-32b2ef742e60.png)
### Run a test from a specific breakpoint[​](https://playwright.dev/docs/debug#run-a-test-from-a-specific-breakpoint "Direct link to Run a test from a specific breakpoint")
To speed up the debugging process you can add a [page.pause()](https://playwright.dev/docs/api/class-page#page-pause) method to your test. This way you won't have to step through each action of your test to get to the point where you want to debug.
```
await page.pause();  

```

Once you add a `page.pause()` call, run your tests in debug mode. Clicking the "Resume" button in the Inspector will run the test and only stop on the `page.pause()`.
![test with page.pause](https://user-images.githubusercontent.com/13063165/219473050-122be4c2-31d0-4cbd-aa8b-8588e8b781a6.png)
### Live editing locators[​](https://playwright.dev/docs/debug#live-editing-locators "Direct link to Live editing locators")
While running in debug mode you can live edit the locators. Next to the 'Pick Locator' button there is a field showing the [locator](https://playwright.dev/docs/locators) that the test is paused on. You can edit this locator directly in the **Pick Locator** field, and matching elements will be highlighted in the browser window.
![live editing locators](https://user-images.githubusercontent.com/13063165/212980815-1cf6ef7b-e69a-496c-898a-ec603a3bc562.png)
### Picking locators[​](https://playwright.dev/docs/debug#picking-locators "Direct link to Picking locators")
While debugging, you might need to choose a more resilient locator. You can do this by clicking on the **Pick Locator** button and hovering over any element in the browser window. While hovering over an element you will see the code needed to locate this element highlighted below. Clicking an element in the browser will add the locator into the field where you can then either tweak it or copy it into your code.
![Picking locators](https://user-images.githubusercontent.com/13063165/212968640-ce82a027-9277-4bdf-b0a9-6282fb2becb7.png)
Playwright will look at your page and figure out the best locator, prioritizing [role, text and test id locators](https://playwright.dev/docs/locators). If Playwright finds multiple elements matching the locator, it will improve the locator to make it resilient and uniquely identify the target element, so you don't have to worry about failing tests due to locators.
### Actionability logs[​](https://playwright.dev/docs/debug#actionability-logs "Direct link to Actionability logs")
By the time Playwright has paused on a click action, it has already performed [actionability checks](https://playwright.dev/docs/actionability) that can be found in the log. This can help you understand what happened during your test and what Playwright did or tried to do. The log tells you if the element was visible, enabled and stable, if the locator resolved to an element, scrolled into view, and so much more. If actionability can't be reached, it will show the action as pending.
![Actionability Logs](https://user-images.githubusercontent.com/13063165/212968907-5dede739-e0e3-482a-91cd-726a0f5b0b6d.png)
## Trace Viewer[​](https://playwright.dev/docs/debug#trace-viewer "Direct link to Trace Viewer")
Playwright [Trace Viewer](https://playwright.dev/docs/trace-viewer) is a GUI tool that lets you explore recorded Playwright traces of your tests. You can go back and forward through each action on the left side, and visually see what was happening during the action. In the middle of the screen, you can see a DOM snapshot for the action. On the right side you can see action details, such as time, parameters, return value and log. You can also explore console messages, network requests and the source code.
To learn more about how to record traces and use the Trace Viewer, check out the [Trace Viewer](https://playwright.dev/docs/trace-viewer) guide.
## Browser Developer Tools[​](https://playwright.dev/docs/debug#browser-developer-tools "Direct link to Browser Developer Tools")
When running in Debug Mode with `PWDEBUG=console`, a `playwright` object is available in the Developer tools console. Developer tools can help you to:
  * Inspect the DOM tree and **find element selectors**
  * **See console logs** during execution (or learn how to [read logs via API](https://playwright.dev/docs/api/class-page#page-event-console))
  * Check **network activity** and other developer tools features


This will also set the default timeouts of Playwright to 0 (= no timeout).
![Browser Developer Tools with Playwright object](https://user-images.githubusercontent.com/13063165/219128002-898f604d-9697-4b7f-95b5-a6a8260b7282.png)
To debug your tests using the browser developer tools, start by setting a breakpoint in your test to pause the execution using the [page.pause()](https://playwright.dev/docs/api/class-page#page-pause) method.
```
await page.pause();  

```

Once you have set a breakpoint in your test, you can then run your test with `PWDEBUG=console`.
  * Bash
  * PowerShell
  * Batch


```
PWDEBUG=console npx playwright test  

```

```
$env:PWDEBUG="console"  
npx playwright test  

```

```
setPWDEBUG=console  
npx playwright test  

```

Once Playwright launches the browser window, you can open the developer tools. The `playwright` object will be available in the console panel.
#### playwright.$(selector)[​](https://playwright.dev/docs/debug#playwrightselector "Direct link to playwright.$\(selector\)")
Query the Playwright selector, using the actual Playwright query engine, for example:
```
playwright.$('.auth-form >>text=Log in');  
  
<button>Log in</button>  

```

#### playwright.$$(selector)[​](https://playwright.dev/docs/debug#playwrightselector-1 "Direct link to playwright.$$\(selector\)")
Same as `playwright.$`, but returns all matching elements.
```
playwright.$$('li >>text=John')  
  
[<li>, <li>, <li>, <li>]  

```

#### playwright.inspect(selector)[​](https://playwright.dev/docs/debug#playwrightinspectselector "Direct link to playwright.inspect\(selector\)")
Reveal element in the Elements panel.
```
playwright.inspect('text=Log in')  

```

#### playwright.locator(selector)[​](https://playwright.dev/docs/debug#playwrightlocatorselector "Direct link to playwright.locator\(selector\)")
Create a locator and query matching elements, for example:
```
playwright.locator('.auth-form', { hasText: 'Log in'});  
  
Locator ()  
  - element: button  
  - elements: [button]  

```

#### playwright.selector(element)[​](https://playwright.dev/docs/debug#playwrightselectorelement "Direct link to playwright.selector\(element\)")
Generates selector for the given element. For example, select an element in the Elements panel and pass `$0`:
```
playwright.selector($0)  
  
"div[id="glow-ingress-block"] >> text=/.*Hello.*/"  

```

## Verbose API logs[​](https://playwright.dev/docs/debug#verbose-api-logs "Direct link to Verbose API logs")
Playwright supports verbose logging with the `DEBUG` environment variable.
  * Bash
  * PowerShell
  * Batch


```
DEBUG=pw:api npx playwright test  

```

```
$env:DEBUG="pw:api"  
npx playwright test  

```

```
setDEBUG=pw:api  
npx playwright test  

```

**For WebKit** : launching WebKit Inspector during the execution will prevent the Playwright script from executing any further and will reset pre-configured user agent and device emulation.
## Headed mode[​](https://playwright.dev/docs/debug#headed-mode "Direct link to Headed mode")
Playwright runs browsers in headless mode by default. To change this behavior, use `headless: false` as a launch option.
You can also use the [slowMo](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-option-slow-mo) option to slow down execution (by N milliseconds per operation) and follow along while debugging.
```
// Chromium, Firefox, or WebKit  
await chromium.launch({headless:false,slowMo:100});  

```

[Previous Components (experimental)](https://playwright.dev/docs/test-components)[Next Dialogs](https://playwright.dev/docs/dialogs)
  * [VS Code debugger](https://playwright.dev/docs/debug#vs-code-debugger)
    * [Error Messages](https://playwright.dev/docs/debug#error-messages)
    * [Live Debugging](https://playwright.dev/docs/debug#live-debugging)
    * [Picking a Locator](https://playwright.dev/docs/debug#picking-a-locator)
    * [Run in Debug Mode](https://playwright.dev/docs/debug#run-in-debug-mode)
    * [Debug Tests Using Chrome DevTools](https://playwright.dev/docs/debug#debug-tests-using-chrome-devtools)
    * [Debug in different Browsers](https://playwright.dev/docs/debug#debug-in-different-browsers)
  * [Playwright Inspector](https://playwright.dev/docs/debug#playwright-inspector)
    * [Run in debug mode](https://playwright.dev/docs/debug#run-in-debug-mode-1)
    * [Stepping through your tests](https://playwright.dev/docs/debug#stepping-through-your-tests)
    * [Run a test from a specific breakpoint](https://playwright.dev/docs/debug#run-a-test-from-a-specific-breakpoint)
    * [Live editing locators](https://playwright.dev/docs/debug#live-editing-locators)
    * [Picking locators](https://playwright.dev/docs/debug#picking-locators)
    * [Actionability logs](https://playwright.dev/docs/debug#actionability-logs)
  * [Trace Viewer](https://playwright.dev/docs/debug#trace-viewer)
  * [Browser Developer Tools](https://playwright.dev/docs/debug#browser-developer-tools)
  * [Verbose API logs](https://playwright.dev/docs/debug#verbose-api-logs)
  * [Headed mode](https://playwright.dev/docs/debug#headed-mode)


Learn
  * [Getting started](https://playwright.dev/docs/intro)
  * [Playwright Training](https://learn.microsoft.com/en-us/training/modules/build-with-playwright/)
  * [Learn Videos](https://playwright.dev/community/learn-videos)
  * [Feature Videos](https://playwright.dev/community/feature-videos)


Community
  * [Stack Overflow](https://stackoverflow.com/questions/tagged/playwright)
  * [Discord](https://aka.ms/playwright/discord)
  * [Twitter](https://twitter.com/playwrightweb)
  * [LinkedIn](https://www.linkedin.com/company/playwrightweb)


More
  * [GitHub](https://github.com/microsoft/playwright)
  * [YouTube](https://www.youtube.com/channel/UC46Zj8pDH5tDosqm1gd7WTg)
  * [Blog](https://dev.to/playwright)
  * [Ambassadors](https://playwright.dev/community/ambassadors)


Copyright © 2025 Microsoft
 (success: true, hasMarkdown: true, hasDescription: true)
[ivp996a] Source 3 keep: [Visual Studio Code](https://code.visualstudio.com/)
  * [Docs](https://code.visualstudio.com/docs)
  * [Updates](https://code.visualstudio.com/updates)
  * [Blog](https://code.visualstudio.com/blogs)
  * [API](https://code.visualstudio.com/api)
  * [Extensions](https://marketplace.visualstudio.com/VSCode)
  * [FAQ](https://code.visualstudio.com/docs/supporting/faq)
  * [Search](https://code.visualstudio.com/Search)
  * [MCP](https://code.visualstudio.com/mcp)


  * ![Switch to the dark theme](https://code.visualstudio.com/assets/icons/theme-light.svg) ![Switch to the light theme](https://code.visualstudio.com/assets/icons/theme-dark.svg)
  * [ ![Search](https://code.visualstudio.com/assets/icons/search.svg) ![Search](https://code.visualstudio.com/assets/icons/search-dark.svg) ](https://code.visualstudio.com/Search "Search")
  * ![Search](https://code.visualstudio.com/assets/icons/search-dark.svg) ![Search](https://code.visualstudio.com/assets/icons/search.svg)
  * [ Download](https://code.visualstudio.com/Download)


Try [MCP servers](https://code.visualstudio.com/mcp) to extend agent mode in VS Code!
Dismiss this update
  * [Overview](https://code.visualstudio.com/docs)
  * [Setup](https://code.visualstudio.com/docs/debugtest/debugging#setup-articles)
    * [Overview](https://code.visualstudio.com/docs/setup/setup-overview)
    * [Linux](https://code.visualstudio.com/docs/setup/linux)
    * [macOS](https://code.visualstudio.com/docs/setup/mac)
    * [Windows](https://code.visualstudio.com/docs/setup/windows)
    * [VS Code for the Web](https://code.visualstudio.com/docs/setup/vscode-web)
    * [Raspberry Pi](https://code.visualstudio.com/docs/setup/raspberry-pi)
    * [Network](https://code.visualstudio.com/docs/setup/network)
    * [Additional Components](https://code.visualstudio.com/docs/setup/additional-components)
    * [Enterprise](https://code.visualstudio.com/docs/setup/enterprise)
    * [Uninstall](https://code.visualstudio.com/docs/setup/uninstall)
  * [Get Started](https://code.visualstudio.com/docs/debugtest/debugging#getstarted-articles)
    * [VS Code Tutorial](https://code.visualstudio.com/docs/getstarted/getting-started)
    * [Copilot Quickstart](https://code.visualstudio.com/docs/getstarted/copilot-quickstart)
    * [User Interface](https://code.visualstudio.com/docs/getstarted/userinterface)
    * [Personalize VS Code](https://code.visualstudio.com/docs/getstarted/personalize-vscode)
    * [Install Extensions](https://code.visualstudio.com/docs/getstarted/extensions)
    * [Tips and Tricks](https://code.visualstudio.com/docs/getstarted/tips-and-tricks)
    * [Intro Videos](https://code.visualstudio.com/docs/getstarted/introvideos)
  * [Configure](https://code.visualstudio.com/docs/debugtest/debugging#configure-articles)
    * [Display Language](https://code.visualstudio.com/docs/configure/locales)
    * [Layout](https://code.visualstudio.com/docs/configure/custom-layout)
    * [Keyboard Shortcuts](https://code.visualstudio.com/docs/configure/keybindings)
    * [Settings](https://code.visualstudio.com/docs/configure/settings)
    * [Settings Sync](https://code.visualstudio.com/docs/configure/settings-sync)
    * Extensions
      * [Extension Marketplace](https://code.visualstudio.com/docs/configure/extensions/extension-marketplace)
      * [Extension Runtime Security](https://code.visualstudio.com/docs/configure/extensions/extension-runtime-security)
    * [Themes](https://code.visualstudio.com/docs/configure/themes)
    * [Profiles](https://code.visualstudio.com/docs/configure/profiles)
    * [Accessibility](https://code.visualstudio.com/docs/debugtest/debugging#configure-accessibility-articles)
      * [Overview](https://code.visualstudio.com/docs/configure/accessibility/accessibility)
      * [Voice Interactions](https://code.visualstudio.com/docs/configure/accessibility/voice)
    * [Command Line Interface](https://code.visualstudio.com/docs/configure/command-line)
    * [Telemetry](https://code.visualstudio.com/docs/configure/telemetry)
  * [Edit code](https://code.visualstudio.com/docs/debugtest/debugging#editing-articles)
    * [Basic Editing](https://code.visualstudio.com/docs/editing/codebasics)
    * [IntelliSense](https://code.visualstudio.com/docs/editing/intellisense)
    * [Code Navigation](https://code.visualstudio.com/docs/editing/editingevolved)
    * [Refactoring](https://code.visualstudio.com/docs/editing/refactoring)
    * [Snippets](https://code.visualstudio.com/docs/editing/userdefinedsnippets)
    * [Workspaces](https://code.visualstudio.com/docs/debugtest/debugging#editing-workspaces-articles)
      * [Overview](https://code.visualstudio.com/docs/editing/workspaces/workspaces)
      * [Multi-root Workspaces](https://code.visualstudio.com/docs/editing/workspaces/multi-root-workspaces)
      * [Workspace Trust](https://code.visualstudio.com/docs/editing/workspaces/workspace-trust)
  * [Build, Debug, Test](https://code.visualstudio.com/docs/debugtest/debugging#debugtest-articles)
    * [Tasks](https://code.visualstudio.com/docs/debugtest/tasks)
    * [Debugging](https://code.visualstudio.com/docs/debugtest/debugging)
    * [Debug Configuration](https://code.visualstudio.com/docs/debugtest/debugging-configuration)
    * [Testing](https://code.visualstudio.com/docs/debugtest/testing)
    * [Port Forwarding](https://code.visualstudio.com/docs/debugtest/port-forwarding)
  * [GitHub Copilot](https://code.visualstudio.com/docs/debugtest/debugging#copilot-articles)
    * [Overview](https://code.visualstudio.com/docs/copilot/overview)
    * [Setup](https://code.visualstudio.com/docs/copilot/setup)
    * [Quickstart](https://code.visualstudio.com/docs/copilot/getting-started)
    * Chat
      * [Chat Overview](https://code.visualstudio.com/docs/copilot/chat/copilot-chat)
      * [Chat Tutorial](https://code.visualstudio.com/docs/copilot/chat/getting-started-chat)
      * [Manage Context](https://code.visualstudio.com/docs/copilot/chat/copilot-chat-context)
      * [Chat Modes](https://code.visualstudio.com/docs/copilot/chat/chat-modes)
      * [Ask Mode](https://code.visualstudio.com/docs/copilot/chat/chat-ask-mode)
      * [Edit Mode](https://code.visualstudio.com/docs/copilot/chat/copilot-edits)
      * [Agent Mode](https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode)
      * [MCP Servers](https://code.visualstudio.com/docs/copilot/chat/mcp-servers)
      * [Inline Chat](https://code.visualstudio.com/docs/copilot/chat/inline-chat)
      * [Prompt Engineering](https://code.visualstudio.com/docs/copilot/chat/prompt-crafting)
    * [Code Completions](https://code.visualstudio.com/docs/copilot/ai-powered-suggestions)
    * [Copilot Coding Agent](https://code.visualstudio.com/docs/copilot/copilot-coding-agent)
    * [Smart Actions](https://code.visualstudio.com/docs/copilot/copilot-smart-actions)
    * [Customize Copilot](https://code.visualstudio.com/docs/copilot/copilot-customization)
    * [Language Models](https://code.visualstudio.com/docs/copilot/language-models)
    * Guides
      * [Edit Notebooks with AI](https://code.visualstudio.com/docs/copilot/guides/notebooks-with-ai)
      * [Test with AI](https://code.visualstudio.com/docs/copilot/guides/test-with-copilot)
      * [Debug with AI](https://code.visualstudio.com/docs/copilot/guides/debug-with-copilot)
      * [MCP Dev Guide](https://code.visualstudio.com/docs/copilot/guides/mcp-developer-guide)
    * [Tips and Tricks](https://code.visualstudio.com/docs/copilot/copilot-tips-and-tricks)
    * [FAQ](https://code.visualstudio.com/docs/copilot/faq)
    * [Reference](https://code.visualstudio.com/docs/debugtest/debugging#copilot-reference-articles)
      * [Cheat Sheet](https://code.visualstudio.com/docs/copilot/reference/copilot-vscode-features)
      * [Settings Reference](https://code.visualstudio.com/docs/copilot/reference/copilot-settings)
      * [Workspace Context](https://code.visualstudio.com/docs/copilot/reference/workspace-context)
  * [Source Control](https://code.visualstudio.com/docs/debugtest/debugging#sourcecontrol-articles)
    * [Overview](https://code.visualstudio.com/docs/sourcecontrol/overview)
    * [Introduction to Git](https://code.visualstudio.com/docs/sourcecontrol/intro-to-git)
    * [Collaborate on GitHub](https://code.visualstudio.com/docs/sourcecontrol/github)
    * [FAQ](https://code.visualstudio.com/docs/sourcecontrol/faq)
  * [Terminal](https://code.visualstudio.com/docs/debugtest/debugging#terminal-articles)
    * [Getting Started Tutorial](https://code.visualstudio.com/docs/terminal/getting-started)
    * [Terminal Basics](https://code.visualstudio.com/docs/terminal/basics)
    * [Terminal Profiles](https://code.visualstudio.com/docs/terminal/profiles)
    * [Shell Integration](https://code.visualstudio.com/docs/terminal/shell-integration)
    * [Appearance](https://code.visualstudio.com/docs/terminal/appearance)
    * [Advanced](https://code.visualstudio.com/docs/terminal/advanced)
  * [Languages](https://code.visualstudio.com/docs/debugtest/debugging#languages-articles)
    * [Overview](https://code.visualstudio.com/docs/languages/overview)
    * [JavaScript](https://code.visualstudio.com/docs/languages/javascript)
    * [JSON](https://code.visualstudio.com/docs/languages/json)
    * [HTML](https://code.visualstudio.com/docs/languages/html)
    * [Emmet](https://code.visualstudio.com/docs/languages/emmet)
    * [CSS, SCSS and Less](https://code.visualstudio.com/docs/languages/css)
    * [TypeScript](https://code.visualstudio.com/docs/languages/typescript)
    * [Markdown](https://code.visualstudio.com/docs/languages/markdown)
    * [PowerShell](https://code.visualstudio.com/docs/languages/powershell)
    * [C++](https://code.visualstudio.com/docs/languages/cpp)
    * [Java](https://code.visualstudio.com/docs/languages/java)
    * [PHP](https://code.visualstudio.com/docs/languages/php)
    * [Python](https://code.visualstudio.com/docs/languages/python)
    * [Julia](https://code.visualstudio.com/docs/languages/julia)
    * [R](https://code.visualstudio.com/docs/languages/r)
    * [Ruby](https://code.visualstudio.com/docs/languages/ruby)
    * [Rust](https://code.visualstudio.com/docs/languages/rust)
    * [Go](https://code.visualstudio.com/docs/languages/go)
    * [T-SQL](https://code.visualstudio.com/docs/languages/tsql)
    * [C#](https://code.visualstudio.com/docs/languages/csharp)
    * [.NET](https://code.visualstudio.com/docs/languages/dotnet)
    * [Polyglot](https://code.visualstudio.com/docs/languages/polyglot)
    * [Swift](https://code.visualstudio.com/docs/languages/swift)
  * [Node.js / JavaScript](https://code.visualstudio.com/docs/debugtest/debugging#nodejs-articles)
    * [Working with JavaScript](https://code.visualstudio.com/docs/nodejs/working-with-javascript)
    * [Node.js Tutorial](https://code.visualstudio.com/docs/nodejs/nodejs-tutorial)
    * [Node.js Debugging](https://code.visualstudio.com/docs/nodejs/nodejs-debugging)
    * [Deploy Node.js Apps](https://code.visualstudio.com/docs/nodejs/nodejs-deployment)
    * [Browser Debugging](https://code.visualstudio.com/docs/nodejs/browser-debugging)
    * [Angular Tutorial](https://code.visualstudio.com/docs/nodejs/angular-tutorial)
    * [React Tutorial](https://code.visualstudio.com/docs/nodejs/reactjs-tutorial)
    * [Vue Tutorial](https://code.visualstudio.com/docs/nodejs/vuejs-tutorial)
    * [Debugging Recipes](https://code.visualstudio.com/docs/nodejs/debugging-recipes)
    * [Performance Profiling](https://code.visualstudio.com/docs/nodejs/profiling)
    * [Extensions](https://code.visualstudio.com/docs/nodejs/extensions)
  * [TypeScript](https://code.visualstudio.com/docs/debugtest/debugging#typescript-articles)
    * [Tutorial](https://code.visualstudio.com/docs/typescript/typescript-tutorial)
    * [Compiling](https://code.visualstudio.com/docs/typescript/typescript-compiling)
    * [Editing](https://code.visualstudio.com/docs/typescript/typescript-editing)
    * [Refactoring](https://code.visualstudio.com/docs/typescript/typescript-refactoring)
    * [Debugging](https://code.visualstudio.com/docs/typescript/typescript-debugging)
  * [Python](https://code.visualstudio.com/docs/debugtest/debugging#python-articles)
    * [Quick Start](https://code.visualstudio.com/docs/python/python-quick-start)
    * [Tutorial](https://code.visualstudio.com/docs/python/python-tutorial)
    * [Run Python Code](https://code.visualstudio.com/docs/python/run)
    * [Editing](https://code.visualstudio.com/docs/python/editing)
    * [Linting](https://code.visualstudio.com/docs/python/linting)
    * [Formatting](https://code.visualstudio.com/docs/python/formatting)
    * [Debugging](https://code.visualstudio.com/docs/python/debugging)
    * [Environments](https://code.visualstudio.com/docs/python/environments)
    * [Testing](https://code.visualstudio.com/docs/python/testing)
    * [Python Interactive](https://code.visualstudio.com/docs/python/jupyter-support-py)
    * [Django Tutorial](https://code.visualstudio.com/docs/python/tutorial-django)
    * [FastAPI Tutorial](https://code.visualstudio.com/docs/python/tutorial-fastapi)
    * [Flask Tutorial](https://code.visualstudio.com/docs/python/tutorial-flask)
    * [Create Containers](https://code.visualstudio.com/docs/python/tutorial-create-containers)
    * [Deploy Python Apps](https://code.visualstudio.com/docs/python/python-on-azure)
    * [Python in the Web](https://code.visualstudio.com/docs/python/python-web)
    * [Settings Reference](https://code.visualstudio.com/docs/python/settings-reference)
  * [Java](https://code.visualstudio.com/docs/debugtest/debugging#java-articles)
    * [Getting Started](https://code.visualstudio.com/docs/java/java-tutorial)
    * [Navigate and Edit](https://code.visualstudio.com/docs/java/java-editing)
    * [Refactoring](https://code.visualstudio.com/docs/java/java-refactoring)
    * [Formatting and Linting](https://code.visualstudio.com/docs/java/java-linting)
    * [Project Management](https://code.visualstudio.com/docs/java/java-project)
    * [Build Tools](https://code.visualstudio.com/docs/java/java-build)
    * [Run and Debug](https://code.visualstudio.com/docs/java/java-debugging)
    * [Testing](https://code.visualstudio.com/docs/java/java-testing)
    * [Spring Boot](https://code.visualstudio.com/docs/java/java-spring-boot)
    * [Application Servers](https://code.visualstudio.com/docs/java/java-tomcat-jetty)
    * [Deploy Java Apps](https://code.visualstudio.com/docs/java/java-on-azure)
    * [GUI Applications](https://code.visualstudio.com/docs/java/java-gui)
    * [Extensions](https://code.visualstudio.com/docs/java/extensions)
    * [FAQ](https://code.visualstudio.com/docs/java/java-faq)
  * [C++](https://code.visualstudio.com/docs/debugtest/debugging#cpp-articles)
    * [Intro Videos](https://code.visualstudio.com/docs/cpp/introvideos-cpp)
    * [GCC on Linux](https://code.visualstudio.com/docs/cpp/config-linux)
    * [GCC on Windows](https://code.visualstudio.com/docs/cpp/config-mingw)
    * [GCC on Windows Subsystem for Linux](https://code.visualstudio.com/docs/cpp/config-wsl)
    * [Clang on macOS](https://code.visualstudio.com/docs/cpp/config-clang-mac)
    * [Microsoft C++ on Windows](https://code.visualstudio.com/docs/cpp/config-msvc)
    * [Build with CMake](https://code.visualstudio.com/docs/cpp/build-with-cmake)
    * [CMake Tools on Linux](https://code.visualstudio.com/docs/cpp/cmake-linux)
    * [CMake Quick Start](https://code.visualstudio.com/docs/cpp/cmake-quickstart)
    * [Editing and Navigating](https://code.visualstudio.com/docs/cpp/cpp-ide)
    * [Debugging](https://code.visualstudio.com/docs/cpp/cpp-debug)
    * [Configure Debugging](https://code.visualstudio.com/docs/cpp/launch-json-reference)
    * [Refactoring](https://code.visualstudio.com/docs/cpp/cpp-refactoring)
    * [Settings Reference](https://code.visualstudio.com/docs/cpp/customize-cpp-settings)
    * [Configure IntelliSense](https://code.visualstudio.com/docs/cpp/configure-intellisense)
    * [Configure IntelliSense for Cross-Compiling](https://code.visualstudio.com/docs/cpp/configure-intellisense-crosscompilation)
    * [FAQ](https://code.visualstudio.com/docs/cpp/faq-cpp)
  * [C#](https://code.visualstudio.com/docs/debugtest/debugging#csharp-articles)
    * [Intro Videos](https://code.visualstudio.com/docs/csharp/introvideos-csharp)
    * [Get Started](https://code.visualstudio.com/docs/csharp/get-started)
    * [Navigate and Edit](https://code.visualstudio.com/docs/csharp/navigate-edit)
    * [IntelliCode](https://code.visualstudio.com/docs/csharp/intellicode)
    * [Refactoring](https://code.visualstudio.com/docs/csharp/refactoring)
    * [Formatting and Linting](https://code.visualstudio.com/docs/csharp/formatting-linting)
    * [Project Management](https://code.visualstudio.com/docs/csharp/project-management)
    * [Build Tools](https://code.visualstudio.com/docs/csharp/build-tools)
    * [Package Management](https://code.visualstudio.com/docs/csharp/package-management)
    * [Run and Debug](https://code.visualstudio.com/docs/csharp/debugging)
    * [Testing](https://code.visualstudio.com/docs/csharp/testing)
    * [FAQ](https://code.visualstudio.com/docs/csharp/cs-dev-kit-faq)
  * [Container Tools](https://code.visualstudio.com/docs/debugtest/debugging#containers-articles)
    * [Overview](https://code.visualstudio.com/docs/containers/overview)
    * [Node.js](https://code.visualstudio.com/docs/containers/quickstart-node)
    * [Python](https://code.visualstudio.com/docs/containers/quickstart-python)
    * [ASP.NET Core](https://code.visualstudio.com/docs/containers/quickstart-aspnet-core)
    * [Debug](https://code.visualstudio.com/docs/containers/debug-common)
    * [Docker Compose](https://code.visualstudio.com/docs/containers/docker-compose)
    * [Registries](https://code.visualstudio.com/docs/containers/quickstart-container-registries)
    * [Deploy to Azure](https://code.visualstudio.com/docs/containers/app-service)
    * [Choose a Dev Environment](https://code.visualstudio.com/docs/containers/choosing-dev-environment)
    * [Customize](https://code.visualstudio.com/docs/containers/reference)
    * [Develop with Kubernetes](https://code.visualstudio.com/docs/containers/bridge-to-kubernetes)
    * [Tips and Tricks](https://code.visualstudio.com/docs/containers/troubleshooting)
  * [Data Science](https://code.visualstudio.com/docs/debugtest/debugging#datascience-articles)
    * [Overview](https://code.visualstudio.com/docs/datascience/overview)
    * [Jupyter Notebooks](https://code.visualstudio.com/docs/datascience/jupyter-notebooks)
    * [Data Science Tutorial](https://code.visualstudio.com/docs/datascience/data-science-tutorial)
    * [Python Interactive](https://code.visualstudio.com/docs/datascience/python-interactive)
    * [Data Wrangler Quick Start](https://code.visualstudio.com/docs/datascience/data-wrangler-quick-start)
    * [Data Wrangler](https://code.visualstudio.com/docs/datascience/data-wrangler)
    * [PyTorch Support](https://code.visualstudio.com/docs/datascience/pytorch-support)
    * [Azure Machine Learning](https://code.visualstudio.com/docs/datascience/azure-machine-learning)
    * [Manage Jupyter Kernels](https://code.visualstudio.com/docs/datascience/jupyter-kernel-management)
    * [Jupyter Notebooks on the Web](https://code.visualstudio.com/docs/datascience/notebooks-web)
  * [Intelligent Apps](https://code.visualstudio.com/docs/debugtest/debugging#intelligentapps-articles)
    * [AI Toolkit Overview](https://code.visualstudio.com/docs/intelligentapps/overview)
    * [Models](https://code.visualstudio.com/docs/intelligentapps/models)
    * [Playground](https://code.visualstudio.com/docs/intelligentapps/playground)
    * [Agent Builder](https://code.visualstudio.com/docs/intelligentapps/agentbuilder)
    * [Bulk Run](https://code.visualstudio.com/docs/intelligentapps/bulkrun)
    * [Evaluation](https://code.visualstudio.com/docs/intelligentapps/evaluation)
    * [Fine-tune](https://code.visualstudio.com/docs/intelligentapps/finetune)
    * [Model Conversion](https://code.visualstudio.com/docs/intelligentapps/modelconversion)
    * [Tracing](https://code.visualstudio.com/docs/intelligentapps/tracing)
    * [FAQ](https://code.visualstudio.com/docs/intelligentapps/faq)
    * [Reference](https://code.visualstudio.com/docs/debugtest/debugging#intelligentapps-reference-articles)
      * [File Structure](https://code.visualstudio.com/docs/intelligentapps/reference/FileStructure)
      * [Manual Model Conversion](https://code.visualstudio.com/docs/intelligentapps/reference/ManualModelConversion)
      * [Manual Model Conversion On GPU](https://code.visualstudio.com/docs/intelligentapps/reference/ManualConversionOnGPU)
      * [Setup Environment Without AI Toolkit](https://code.visualstudio.com/docs/intelligentapps/reference/SetupWithoutAITK)
      * [Template Project](https://code.visualstudio.com/docs/intelligentapps/reference/TemplateProject)
  * [Azure](https://code.visualstudio.com/docs/debugtest/debugging#azure-articles)
    * [Overview](https://code.visualstudio.com/docs/azure/overview)
    * [Getting Started](https://code.visualstudio.com/docs/azure/gettingstarted)
    * [Resources View](https://code.visualstudio.com/docs/azure/resourcesextension)
    * [Deployment](https://code.visualstudio.com/docs/azure/deployment)
    * [VS Code for the Web - Azure](https://code.visualstudio.com/docs/azure/vscodeforweb)
    * [Containers](https://code.visualstudio.com/docs/azure/containers)
    * [Azure Kubernetes Service](https://code.visualstudio.com/docs/azure/aksextensions)
    * [Kubernetes](https://code.visualstudio.com/docs/azure/kubernetes)
    * [MongoDB](https://code.visualstudio.com/docs/azure/mongodb)
    * [Remote Debugging for Node.js](https://code.visualstudio.com/docs/azure/remote-debugging)
  * [Remote](https://code.visualstudio.com/docs/debugtest/debugging#remote-articles)
    * [Overview](https://code.visualstudio.com/docs/remote/remote-overview)
    * [SSH](https://code.visualstudio.com/docs/remote/ssh)
    * [Dev Containers](https://code.visualstudio.com/docs/remote/dev-containers)
    * [Windows Subsystem for Linux](https://code.visualstudio.com/docs/remote/wsl)
    * [GitHub Codespaces](https://code.visualstudio.com/docs/remote/codespaces)
    * [VS Code Server](https://code.visualstudio.com/docs/remote/vscode-server)
    * [Tunnels](https://code.visualstudio.com/docs/remote/tunnels)
    * [SSH Tutorial](https://code.visualstudio.com/docs/remote/ssh-tutorial)
    * [WSL Tutorial](https://code.visualstudio.com/docs/remote/wsl-tutorial)
    * [Tips and Tricks](https://code.visualstudio.com/docs/remote/troubleshooting)
    * [FAQ](https://code.visualstudio.com/docs/remote/faq)
  * [Dev Containers](https://code.visualstudio.com/docs/debugtest/debugging#devcontainers-articles)
    * [Overview](https://code.visualstudio.com/docs/devcontainers/containers)
    * [Tutorial](https://code.visualstudio.com/docs/devcontainers/tutorial)
    * [Attach to Container](https://code.visualstudio.com/docs/devcontainers/attach-container)
    * [Create Dev Container](https://code.visualstudio.com/docs/devcontainers/create-dev-container)
    * [Advanced Containers](https://code.visualstudio.com/docs/devcontainers/containers-advanced)
    * [devcontainer.json](https://code.visualstudio.com/docs/devcontainers/devcontainerjson-reference)
    * [Dev Container CLI](https://code.visualstudio.com/docs/devcontainers/devcontainer-cli)
    * [Tips and Tricks](https://code.visualstudio.com/docs/devcontainers/tips-and-tricks)
    * [FAQ](https://code.visualstudio.com/docs/devcontainers/faq)
  * [Reference](https://code.visualstudio.com/docs/debugtest/debugging#reference-articles)
    * [Default Keyboard Shortcuts](https://code.visualstudio.com/docs/reference/default-keybindings)
    * [Default Settings](https://code.visualstudio.com/docs/reference/default-settings)
    * [Substitution Variables](https://code.visualstudio.com/docs/reference/variables-reference)
    * [Tasks Schema](https://code.visualstudio.com/docs/reference/tasks-appendix)

Topics Overview Overview Linux macOS Windows VS Code for the Web Raspberry Pi Network Additional Components Enterprise Uninstall VS Code Tutorial Copilot Quickstart User Interface Personalize VS Code Install Extensions Tips and Tricks Intro Videos Display Language Layout Keyboard Shortcuts Settings Settings Sync Extension Marketplace Extension Runtime Security Themes Profiles Overview Voice Interactions Command Line Interface Telemetry Basic Editing IntelliSense Code Navigation Refactoring Snippets Overview Multi-root Workspaces Workspace Trust Tasks Debugging Debug Configuration Testing Port Forwarding Overview Setup Quickstart Chat Overview Chat Tutorial Manage Context Chat Modes Ask Mode Edit Mode Agent Mode MCP Servers Inline Chat Prompt Engineering Code Completions Copilot Coding Agent Smart Actions Customize Copilot Language Models Edit Notebooks with AI Test with AI Debug with AI MCP Dev Guide Tips and Tricks FAQ Cheat Sheet Settings Reference Workspace Context Overview Introduction to Git Collaborate on GitHub FAQ Getting Started Tutorial Terminal Basics Terminal Profiles Shell Integration Appearance Advanced Overview JavaScript JSON HTML Emmet CSS, SCSS and Less TypeScript Markdown PowerShell C++ Java PHP Python Julia R Ruby Rust Go T-SQL C# .NET Polyglot Swift Working with JavaScript Node.js Tutorial Node.js Debugging Deploy Node.js Apps Browser Debugging Angular Tutorial React Tutorial Vue Tutorial Debugging Recipes Performance Profiling Extensions Tutorial Compiling Editing Refactoring Debugging Quick Start Tutorial Run Python Code Editing Linting Formatting Debugging Environments Testing Python Interactive Django Tutorial FastAPI Tutorial Flask Tutorial Create Containers Deploy Python Apps Python in the Web Settings Reference Getting Started Navigate and Edit Refactoring Formatting and Linting Project Management Build Tools Run and Debug Testing Spring Boot Application Servers Deploy Java Apps GUI Applications Extensions FAQ Intro Videos GCC on Linux GCC on Windows GCC on Windows Subsystem for Linux Clang on macOS Microsoft C++ on Windows Build with CMake CMake Tools on Linux CMake Quick Start Editing and Navigating Debugging Configure Debugging Refactoring Settings Reference Configure IntelliSense Configure IntelliSense for Cross-Compiling FAQ Intro Videos Get Started Navigate and Edit IntelliCode Refactoring Formatting and Linting Project Management Build Tools Package Management Run and Debug Testing FAQ Overview Node.js Python ASP.NET Core Debug Docker Compose Registries Deploy to Azure Choose a Dev Environment Customize Develop with Kubernetes Tips and Tricks Overview Jupyter Notebooks Data Science Tutorial Python Interactive Data Wrangler Quick Start Data Wrangler PyTorch Support Azure Machine Learning Manage Jupyter Kernels Jupyter Notebooks on the Web AI Toolkit Overview Models Playground Agent Builder Bulk Run Evaluation Fine-tune Model Conversion Tracing FAQ File Structure Manual Model Conversion Manual Model Conversion On GPU Setup Environment Without AI Toolkit Template Project Overview Getting Started Resources View Deployment VS Code for the Web - Azure Containers Azure Kubernetes Service Kubernetes MongoDB Remote Debugging for Node.js Overview SSH Dev Containers Windows Subsystem for Linux GitHub Codespaces VS Code Server Tunnels SSH Tutorial WSL Tutorial Tips and Tricks FAQ Overview Tutorial Attach to Container Create Dev Container Advanced Containers devcontainer.json Dev Container CLI Tips and Tricks FAQ Default Keyboard Shortcuts Default Settings Substitution Variables Tasks Schema
[ Edit ](https://vscode.dev/github/microsoft/vscode-docs/blob/main/docs/debugtest/debugging.md "Edit this document in vscode.dev")
# Debug code with Visual Studio Code
Visual Studio Code has rich support for debugging various types of applications. VS Code has built-in support for JavaScript, TypeScript, and Node.js debugging. The [Visual Studio Marketplace](https://marketplace.visualstudio.com/vscode/Debuggers) has a wide variety of debugging extensions to add debugging support for other languages and runtimes to VS Code.
This article describes the debugging features of VS Code and how to get started with debugging in VS Code. You also learn how you can use Copilot in VS Code to accelerate setting up your debugging configuration and starting a debugging session.
The following video shows how to get started with debugging in VS Code.
## [Debugger user interface](https://code.visualstudio.com/docs/debugtest/debugging#_debugger-user-interface)
The following diagram shows the main components of the debugger user interface:
![Debugging diagram](https://code.visualstudio.com/assets/docs/debugtest/debugging/debugging_hero.png)
  1. **Run and Debug view** : displays all information related to running, debugging, and managing debug configuration settings.
  2. **Debug toolbar** : has buttons for the most common debugging actions.
  3. **Debug console** : enables viewing and interacting with the output of your code running in the debugger.
  4. **Debug sidebar** : during a debug session, lets you interact with the call stack, breakpoints, variables, and watch variables.
  5. **Run** menu: has the most common run and debug commands.


## [Before you start debugging](https://code.visualstudio.com/docs/debugtest/debugging#_before-you-start-debugging)
  1. Install a debugging extension from the [Visual Studio Marketplace](https://marketplace.visualstudio.com/vscode/Debuggers) for your language or runtime.
VS Code has built-in support for JavaScript, TypeScript, and Node.js debugging.
  2. Define a debugging configuration for your project.
For simple applications, VS Code tries to run and debug the currently active file. For more complex applications or debugging scenarios, you need to create a `launch.json` file to specify the debugger configuration. Get more information about creating a [debug configuration](https://code.visualstudio.com/docs/debugtest/debugging-configuration).
Copilot in VS Code can help generate the `launch.json` file for you. For more information, see [Use Copilot to generate debugging configurations](https://code.visualstudio.com/docs/debugtest/debugging-configuration#_generate-a-launch-configuration-with-ai).
  3. Set breakpoints in your code.
A breakpoint is a marker that you can set on a line of code to tell the debugger to pause execution when it reaches that line. You can set breakpoints by clicking in the gutter next to the line number in the editor.
For more information about breakpoints, see [Working with Breakpoints](https://code.visualstudio.com/docs/debugtest/debugging#_breakpoints).


## [Start a debugging session](https://code.visualstudio.com/docs/debugtest/debugging#_start-a-debugging-session)
To start a debugging session in VS Code, perform the following steps:
  1. Open the file that contains the code you want to debug.
  2. Start a debugging session with the F5 key or select **Run and Debug** in the **Run and Debug** view (`workbench.view.debug`).
![Simplified initial Run and Debug view](https://code.visualstudio.com/assets/docs/debugtest/debugging/debug-start.png)
For more complex debugging scenarios like attaching to a running process, you need to create a `launch.json` file to specify the debugger configuration. Get more information about [debug configurations](https://code.visualstudio.com/docs/debugtest/debugging-configuration).
  3. Choose the debugger you want to use from the list of available debuggers.
VS Code tries to run and debug the currently active file. For Node.js, VS Code checks for a `start` script in the `package.json` file to determine the entry point of the application.
  4. When a debugging session starts, the **DEBUG CONSOLE** panel is displayed and shows debugging output, and the Status Bar changes color (orange for default color themes).
![debug session](https://code.visualstudio.com/assets/docs/debugtest/debugging/debug-session.png)
  5. The debug status in the Status Bar shows the active debug configuration. Select the debug status to change the active launch configuration and start debugging without needing to open the **Run and Debug** view.
![Debug status](https://code.visualstudio.com/assets/docs/debugtest/debugging/debug-status.png)


## [Debug actions](https://code.visualstudio.com/docs/debugtest/debugging#_debug-actions)
Once a debug session starts, the Debug toolbar appears at the top of the window. The toolbar contains actions to control the flow of the debug session, such as stepping through code, pausing execution, and stopping the debug session.
![Screenshot that shows the Debug toolbar, with icons to control the flow of the debug session.](https://code.visualstudio.com/assets/docs/debugtest/debugging/toolbar.png)
The following table describes the actions available in the debug toolbar:
Expand table 
Action | Description  
---|---  
Continue / Pause   
F5 |  **Continue** : Resume normal program/script execution (up to the next breakpoint).   
**Pause** : Inspect code executing at the current line and debug line-by-line.  
Step Over   
F10 | Execute the next method as a single command without inspecting or following its component steps.  
Step Into   
F11 | Enter the next method to follow its execution line-by-line.  
Step Out   
⇧F11 | When inside a method or subroutine, return to the earlier execution context by completing remaining lines of the current method as though it were a single command.  
Restart   
⇧⌘F5 | Terminate the current program execution and start debugging again using the current run configuration.  
Stop   
⇧F5 | Terminate the current program execution.  
If your debugging sessions involve multiple targets (for example, a client and a server), the debug toolbar shows the list of sessions and lets you switch between them.
Use the [](vscode://settings/debug.toolBarLocation) setting to control the location of the Debug toolbar. It can be the default `floating`, `docked` to the **Run and Debug** view, or `hidden`. A floating debug toolbar can be dragged horizontally and also down to the editor area (up to a certain distance from the top edge).
## [Breakpoints](https://code.visualstudio.com/docs/debugtest/debugging#_breakpoints)
A breakpoint is a special marker that pauses the execution of your code at a specific point, so you can inspect the state of your application at that point. VS Code supports several types of breakpoints.
### [Setting breakpoints](https://code.visualstudio.com/docs/debugtest/debugging#_setting-breakpoints)
To set or unset a breakpoint, click on the **editor margin** or use F9 on the current line.
  * Breakpoints in the editor margin are normally shown as red filled circles.
  * Disabled breakpoints have a filled gray circle.
  * When a debugging session starts, breakpoints that can't be registered with the debugger change to a gray hollow circle. The same might happen if the source is edited while a debug session without live-edit support is running.


Optionally, breakpoints can be shown in the editor's overview ruler by enabling the setting [](vscode://settings/debug.showBreakpointsInOverviewRuler):
![breakpoints in overview ruler](https://code.visualstudio.com/assets/docs/debugtest/debugging/bpts-in-overview.png)
For more control of your breakpoints, use the **Run and Debug** view's **BREAKPOINTS** section. This section lists all breakpoints in your code and provides extra actions to manage them.
![Breakpoints](https://code.visualstudio.com/assets/docs/debugtest/debugging/breakpoints.png)
### [Breakpoint types](https://code.visualstudio.com/docs/debugtest/debugging#_breakpoint-types)
#### [Conditional breakpoints](https://code.visualstudio.com/docs/debugtest/debugging#_conditional-breakpoints)
A powerful VS Code debugging feature is the ability to set conditions based on expressions, hit counts, or a combination of both.
  * **Expression condition** : The breakpoint is hit whenever the expression evaluates to `true`.
  * **Hit count** : The _hit count_ controls how many times a breakpoint needs to be hit before it interrupts execution. Whether a hit count is respected, and the exact syntax of the expression, can vary among debugger extensions.
  * **Wait for breakpoint** : The breakpoint is activated when another breakpoint is hit ([triggered breakpoint](https://code.visualstudio.com/docs/debugtest/debugging#_triggered-breakpoints)).


To add a conditional breakpoint:
  1. Create a conditional breakpoint
     * Right-click in the editor margin and select **Add Conditional Breakpoint**.
     * Use the **Add Conditional Breakpoint** command in the Command Palette (⇧⌘P).
  2. Choose the type of condition you want to set (expression, hit count, or wait for breakpoint).
![HitCount](https://code.visualstudio.com/assets/docs/debugtest/debugging/hitCount.gif)


To add a condition to an existing breakpoint:
  1. Edit an existing breakpoint
     * Right-click on the breakpoint in the editor margin and select **Edit Breakpoint**.
     * Select the pencil icon next for an existing breakpoint in the **BREAKPOINTS** section of the **Run and Debug** view.
  2. Edit the condition (expression, hit count, or wait for breakpoint).


If a debugger does not support conditional breakpoints, the **Add Conditional Breakpoint** and **Edit Condition** actions are not available.
#### [Triggered breakpoints](https://code.visualstudio.com/docs/debugtest/debugging#_triggered-breakpoints)
A triggered breakpoint is type of conditional breakpoint that is enabled once another breakpoint is hit. They can be useful when diagnosing failure cases in code that happen only after a certain precondition.
Triggered breakpoints can be set by right-clicking on the glyph margin, selecting **Add Triggered Breakpoint** , and then choosing which other breakpoint enables the breakpoint.
#### [Inline breakpoints](https://code.visualstudio.com/docs/debugtest/debugging#_inline-breakpoints)
Inline breakpoints are only hit when the execution reaches the column associated with the inline breakpoint. This is useful when debugging minified code, which contains multiple statements in a single line.
An inline breakpoint can be set using ⇧F9 or through the context menu during a debug session. Inline breakpoints are shown inline in the editor.
Inline breakpoints can also have conditions. Editing multiple breakpoints on a line is possible through the context menu in the editor's left margin.
#### [Function breakpoints](https://code.visualstudio.com/docs/debugtest/debugging#_function-breakpoints)
Instead of placing breakpoints directly in source code, a debugger can support creating breakpoints by specifying a function name. This is useful in situations where source is not available but a function name is known.
To create a function breakpoint, select the **+** button in the **BREAKPOINTS** section header and enter the function name. Function breakpoints are shown with a red triangle in the **BREAKPOINTS** section.
#### [Data breakpoints](https://code.visualstudio.com/docs/debugtest/debugging#_data-breakpoints)
If a debugger supports data breakpoints, they can be set from the context menu in the **VARIABLES** view. The **Break on Value Change/Read/Access** commands add a data breakpoint that is hit when the value of the underlying variable changes/is read/is accessed. Data breakpoints are shown with a red hexagon in the **BREAKPOINTS** section.
#### [Logpoints](https://code.visualstudio.com/docs/debugtest/debugging#_logpoints)
A logpoint is a variant of a breakpoint that does not interrupt into the debugger, but instead logs a message to the debug console. Logpoints can help you save time by not having to add or remove logging statements in your code.
A logpoint is represented by a diamond-shaped icon. Log messages are plain text but can also include expressions to be evaluated within curly braces ('{}').
To add a logpoint, right-click in the editor left margin and select **Add Logpoint** , or use the **Debug: Add Logpoint...** command in the Command Palette (⇧⌘P). You can also configure the setting [](vscode://settings/debug.gutterMiddleClickAction) to toggle a logpoint when pressing the middle mouse button in the editor gutter.
![Logpoints](https://code.visualstudio.com/assets/docs/debugtest/debugging/log-points.gif)
Just like regular breakpoints, logpoints can be enabled or disabled and can also be controlled by a condition and/or hit count.
Debugger extensions can choose to implement logpoints or not.
## [Data inspection](https://code.visualstudio.com/docs/debugtest/debugging#_data-inspection)
### [Run and Debug view](https://code.visualstudio.com/docs/debugtest/debugging#_run-and-debug-view)
During a debugging session, you can inspect variables and expressions in the **VARIABLES** section of the **Run and Debug** view or by hovering over their source in the editor. Variable values and expression evaluation are relative to the selected stack frame in the **CALL STACK** section.
![Screenshot of the Variables section in the Run and Debug view.](https://code.visualstudio.com/assets/docs/debugtest/debugging/variables.png)
To change the value of a variable during the debugging session, right-click on the variable in the **VARIABLES** section and select **Set Value** (Enter).
Additionally, you can use the **Copy Value** action to copy the variable's value, or the **Copy as Expression** action to copy an expression to access the variable. You can then use this expression in the **WATCH** section.
Variables and expressions can also be evaluated and watched in the **Run and Debug** view's **WATCH** section.
![Screenshot of the Watch section in the Run and Debug view.](https://code.visualstudio.com/assets/docs/debugtest/debugging/watch.png)
To filter variables by their name or value, use the ⌥⌘F keyboard shortcut while the focus is on the **VARIABLES** section, and type a search term.
![Screenshot of the filter control in the Variables section.](https://code.visualstudio.com/assets/docs/debugtest/debugging/filtering-variables.png)
### [Debug console REPL](https://code.visualstudio.com/docs/debugtest/debugging#_debug-console-repl)
Expressions can be evaluated with the **Debug Console** REPL ([Read-Eval-Print Loop](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop)) feature. To open the Debug Console, use the **Debug Console** action at the top of the Debug pane or use the **View: Debug Console** command (⇧⌘Y).
Expressions are evaluated after you press Enter and the Debug Console REPL shows suggestions as you type. If you need to enter multiple lines, use Shift+Enter between the lines and then send all lines for evaluation with Enter.
Debug Console input uses the mode of the active editor, which means that the Debug Console input supports syntax coloring, indentation, auto closing of quotes, and other language features.
![Screenshot of the Debug Console.](https://code.visualstudio.com/assets/docs/debugtest/debugging/debugconsole.png)
You must be in an active debugging session to use the Debug Console REPL.
## [Multi-target debugging](https://code.visualstudio.com/docs/debugtest/debugging#_multitarget-debugging)
For complex scenarios that involve more than one process (for example, a client and a server), VS Code supports multi-target debugging. After you've started a first debug session, you can launch another debug session. As soon as a second session is up and running, the VS Code UI switches to _multi-target mode_ :
  * The individual sessions now show up as top-level elements in the **CALL STACK** view.
![Callstack View](https://code.visualstudio.com/assets/docs/debugtest/debugging/debug-callstack.png)
  * The debug toolbar shows the currently **active session** (and all other sessions are available in a dropdown menu).
![Debug Actions Widget](https://code.visualstudio.com/assets/docs/debugtest/debugging/debug-actions-widget.png)
  * Debug actions (for example, all actions in the debug toolbar) are performed on the active session. The active session can be changed either by using the dropdown menu in the debug toolbar or by selecting a different element in the **CALL STACK** view.


## [Remote debugging](https://code.visualstudio.com/docs/debugtest/debugging#_remote-debugging)
VS Code does not support built-in remote debugging across all languages. Remote debugging is a feature of the debug extension you are using, and you should consult the extension's page in the [Marketplace](https://marketplace.visualstudio.com/search?target=VSCode&category=Debuggers&sortBy=Installs) for support and details.
There is, however, one exception: the Node.js debugger included in VS Code supports remote debugging. For more information, see [Node.js Debugging](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_remote-debugging).
## [Debugger extensions](https://code.visualstudio.com/docs/debugtest/debugging#_debugger-extensions)
VS Code has built-in debugging support for the [Node.js](https://nodejs.org/) runtime and can debug JavaScript, TypeScript, or any other language that gets transpiled to JavaScript.
For debugging other languages and runtimes (including [PHP](https://marketplace.visualstudio.com/items?itemName=xdebug.php-debug), [Ruby](https://marketplace.visualstudio.com/items?itemName=rebornix.Ruby), [Go](https://marketplace.visualstudio.com/items?itemName=golang.go), [C#](https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp), [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python), [C++](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools), [PowerShell](https://marketplace.visualstudio.com/items?itemName=ms-vscode.PowerShell) and [many others](https://marketplace.visualstudio.com/search?term=debug&target=VSCode&category=Debuggers&sortBy=Relevance)), look for `Debuggers` extensions in the [Visual Studio Marketplace](https://marketplace.visualstudio.com/vscode/Debuggers), or select **Install Additional Debuggers** in the top-level Run menu.
These are several popular extensions that include debugging support:
[ ![Python](https://ms-python.gallerycdn.vsassets.io/extensions/ms-python/python/2025.11.2025072901/1753785626579/Microsoft.VisualStudio.Services.Icons.Default) Python 177.7Mms-python ](https://marketplace.visualstudio.com/items?itemName=ms-python.python)[ ![C/C++](https://ms-vscode.gallerycdn.vsassets.io/extensions/ms-vscode/cpptools/1.26.3/1750877541184/Microsoft.VisualStudio.Services.Icons.Default) C/C++ 85.4Mms-vscode ](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools)[ ![Python Debugger](https://ms-python.gallerycdn.vsassets.io/extensions/ms-python/debugpy/2025.11.2025072901/1753785186664/Microsoft.VisualStudio.Services.Icons.Default) Python Debugger 84.0Mms-python ](https://marketplace.visualstudio.com/items?itemName=ms-python.debugpy)[ ![CMake Tools](https://ms-vscode.gallerycdn.vsassets.io/extensions/ms-vscode/cmake-tools/1.22.3/1754022372984/Microsoft.VisualStudio.Services.Icons.Default) CMake Tools 48.4Mms-vscode ](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools)
## [Next steps](https://code.visualstudio.com/docs/debugtest/debugging#_next-steps)
To learn about VS Code's Node.js debugging support, take a look at:
  * [Node.js](https://code.visualstudio.com/docs/nodejs/nodejs-debugging) - Describes the Node.js debugger, which is included in VS Code.
  * [TypeScript](https://code.visualstudio.com/docs/typescript/typescript-debugging) - The Node.js debugger also supports TypeScript debugging.


To see a tutorial on the basics of debugging, check out this video:
  * [Getting started with debugging in VS Code](https://www.youtube.com/watch?v=3HiLLByBWkg) - Learn about debugging in VS Code.


To learn more about Copilot and AI-assisted debugging in VS Code:
  * [Debugging and fixing issues with Copilot](https://code.visualstudio.com/docs/copilot/overview#_fix-issues)
  * [Copilot cheat sheet for debugging and fixing issues](https://code.visualstudio.com/docs/copilot/reference/copilot-vscode-features#_debug-and-fix-problems)


To learn about debugging support for other programming languages via VS Code extensions:
  * [C++](https://code.visualstudio.com/docs/cpp/cpp-debug)
  * [Python](https://code.visualstudio.com/docs/python/debugging)
  * [Java](https://code.visualstudio.com/docs/java/java-debugging)


To learn about VS Code's task running support, go to:
  * [Tasks](https://code.visualstudio.com/docs/debugtest/tasks) - Describes how to run tasks with Gulp, Grunt, and Jake and how to show errors and warnings.


To write your own debugger extension, visit:
  * [Debugger Extension](https://code.visualstudio.com/api/extension-guides/debugger-extension) - Uses a mock sample to illustrate the steps required to create a VS Code debug extension.


## [Common questions](https://code.visualstudio.com/docs/debugtest/debugging#_common-questions)
### [What are the supported debugging scenarios?](https://code.visualstudio.com/docs/debugtest/debugging#_what-are-the-supported-debugging-scenarios)
Debugging of Node.js-based applications is supported on Linux, macOS, and Windows out of the box with VS Code. Many other scenarios are supported by [VS Code extensions](https://marketplace.visualstudio.com/vscode/Debuggers?sortBy=Installs) available in the Marketplace.
### Was this documentation helpful?
  
Yes , this page was helpfulNo , this page was not helpful
07/09/2025
####  On this page there are 11 sectionsOn this page
  * [Debugger user interface](https://code.visualstudio.com/docs/debugtest/debugging#_debugger-user-interface)
  * [Before you start debugging](https://code.visualstudio.com/docs/debugtest/debugging#_before-you-start-debugging)
  * [Start a debugging session](https://code.visualstudio.com/docs/debugtest/debugging#_start-a-debugging-session)
  * [Debug actions](https://code.visualstudio.com/docs/debugtest/debugging#_debug-actions)
  * [Breakpoints](https://code.visualstudio.com/docs/debugtest/debugging#_breakpoints)
  * [Data inspection](https://code.visualstudio.com/docs/debugtest/debugging#_data-inspection)
  * [Multi-target debugging](https://code.visualstudio.com/docs/debugtest/debugging#_multitarget-debugging)
  * [Remote debugging](https://code.visualstudio.com/docs/debugtest/debugging#_remote-debugging)
  * [Debugger extensions](https://code.visualstudio.com/docs/debugtest/debugging#_debugger-extensions)
  * [Next steps](https://code.visualstudio.com/docs/debugtest/debugging#_next-steps)
  * [Common questions](https://code.visualstudio.com/docs/debugtest/debugging#_common-questions)


  * [![RSS](https://code.visualstudio.com/assets/community/sidebar/rss.svg)RSS Feed](https://code.visualstudio.com/feed.xml)
  * [![Stackoverflow](https://code.visualstudio.com/assets/community/sidebar/stackoverflow.svg)Ask questions](https://stackoverflow.com/questions/tagged/vscode)
  * [![Twitter](https://code.visualstudio.com/assets/community/sidebar/twitter.svg)Follow @code](https://go.microsoft.com/fwlink/?LinkID=533687)
  * [![GitHub](https://code.visualstudio.com/assets/community/sidebar/github.svg)Request features](https://go.microsoft.com/fwlink/?LinkID=533482)
  * [![Issues](https://code.visualstudio.com/assets/community/sidebar/issue.svg)Report issues](https://www.github.com/Microsoft/vscode/issues)
  * [![YouTube](https://code.visualstudio.com/assets/community/sidebar/youtube.svg)Watch videos](https://www.youtube.com/channel/UCs5Y5_7XK8HLDX0SLNwkd3w)


  * [![RSS](https://code.visualstudio.com/assets/community/sidebar/rss.svg)RSS Feed](https://code.visualstudio.com/feed.xml)
  * [![Stackoverflow](https://code.visualstudio.com/assets/community/sidebar/stackoverflow.svg)Ask questions](https://stackoverflow.com/questions/tagged/vscode)
  * [![Twitter](https://code.visualstudio.com/assets/community/sidebar/twitter.svg)Follow @code](https://go.microsoft.com/fwlink/?LinkID=533687)
  * [![GitHub](https://code.visualstudio.com/assets/community/sidebar/github.svg)Request features](https://go.microsoft.com/fwlink/?LinkID=533482)
  * [![Issues](https://code.visualstudio.com/assets/community/sidebar/issue.svg)Report issues](https://www.github.com/Microsoft/vscode/issues)
  * [![YouTube](https://code.visualstudio.com/assets/community/sidebar/youtube.svg)Watch videos](https://www.youtube.com/channel/UCs5Y5_7XK8HLDX0SLNwkd3w)


  * [![Follow us on X](https://code.visualstudio.com/assets/icons/x-icon.svg)](https://go.microsoft.com/fwlink/?LinkID=533687)
  * [![VS Code on Github](https://code.visualstudio.com/assets/icons/github-icon.svg)](https://github.com/microsoft/vscode)
  * [![VS Code on YouTube](https://code.visualstudio.com/assets/icons/youtube-icon.svg)](https://www.youtube.com/@code)

[ ![Microsoft homepage](https://code.visualstudio.com/assets/icons/microsoft.svg) ](https://www.microsoft.com)
  * [Support](https://support.serviceshub.microsoft.com/supportforbusiness/create?sapId=d66407ed-3967-b000-4cfb-2c318cad363d)
  * [Privacy](https://go.microsoft.com/fwlink/?LinkId=521839)
  * Manage Cookies
  * [Terms of Use](https://www.microsoft.com/legal/terms-of-use)
  * [License](https://code.visualstudio.com/License)


 (success: true, hasMarkdown: true, hasDescription: true)
[ivp996a] Source 4 keep: [](https://testcafe.io/)[](https://testcafe.io/)
  * [Studio](https://www.devexpress.com/products/testcafestudio/)


  * [Guides](https://testcafe.io/documentation/402635/guides/overview/getting-started)
  * [API](https://testcafe.io/documentation/402632/api)
  * [Recipes](https://testcafe.io/documentation/402633/recipes)
  * [Examples](https://testcafe.io/documentation/402637/examples)
  * [FAQ](https://testcafe.io/documentation/402636/faq/general-info)
  * [What's New2](https://testcafe.io/release-notes)
  * [Support](https://testcafe.io/support)


Search`K`
[](https://github.com/DevExpress/testcafe)
[Star](https://github.com/DevExpress/testcafe)[9,866](https://github.com/DevExpress/testcafe/stargazers)
Guides
  * Overview
    * [Getting Started](https://testcafe.io/documentation/402635/guides/overview/getting-started)
    * [Why TestCafe?](https://testcafe.io/documentation/402631/guides/overview/why-testcafe)
  * Basic Guides
    * [Install TestCafe](https://testcafe.io/documentation/402834/guides/basic-guides/install-testcafe)
    * [Test Structure](https://testcafe.io/documentation/402831/guides/basic-guides/test-structure)
    * [Element Selectors](https://testcafe.io/documentation/402829/guides/basic-guides/element-selectors)
    * [Test Actions](https://testcafe.io/documentation/402833/guides/basic-guides/test-actions)
    * [Assertions](https://testcafe.io/documentation/402837/guides/basic-guides/assertions)
    * [Client Functions](https://testcafe.io/documentation/402832/guides/basic-guides/client-functions)
    * [Run Tests](https://testcafe.io/documentation/402830/guides/basic-guides/run-tests)
    * [Debug Tests](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests)
  * Best Practices
    * [Best Practices](https://testcafe.io/documentation/402836/guides/best-practices/best-practices)
    * [Speed Up Test Execution](https://testcafe.io/documentation/402963/guides/best-practices/speed-up-test-execution)
    * [Page Model](https://testcafe.io/documentation/402826/guides/best-practices/page-model)
    * [Bootstrap your TestCafe project with create-testcafe](https://testcafe.io/documentation/404259/guides/best-practices/create-testcafe)
  * Intermediate Guides
    * [Native Automation FAQ](https://testcafe.io/documentation/404237/guides/intermediate-guides/native-automation-mode)
    * [Browsers](https://testcafe.io/documentation/402828/guides/intermediate-guides/browsers)
    * [Mobile Devices, Cloud Browsers and Emulation](https://testcafe.io/documentation/403584/guides/intermediate-guides/mobile-devices-cloud-browsers-and-emulation)
    * [Visual Selector Debugger](https://testcafe.io/documentation/404288/guides/intermediate-guides/visual-selector-debugger)
    * [Run Tests Concurrently](https://testcafe.io/documentation/403626/guides/intermediate-guides/run-tests-concurrently)
    * [Reporters](https://testcafe.io/documentation/402825/guides/intermediate-guides/reporters)
    * [TypeScript and CoffeeScript](https://testcafe.io/documentation/402824/guides/intermediate-guides/typescript-and-coffeescript)
    * [Authentication and Roles](https://testcafe.io/documentation/402845/guides/intermediate-guides/authentication)
    * [Screenshots and Videos](https://testcafe.io/documentation/402840/guides/intermediate-guides/screenshots-and-videos)
    * [API Testing](https://testcafe.io/documentation/403971/guides/intermediate-guides/api-testing)
    * [Hooks](https://testcafe.io/documentation/403435/guides/intermediate-guides/hooks)
    * [Quarantine Mode](https://testcafe.io/documentation/403841/guides/intermediate-guides/quarantine-mode)
    * [Live Mode](https://testcafe.io/documentation/403842/guides/intermediate-guides/live-mode)
    * [Intercept HTTP Requests](https://testcafe.io/documentation/402842/guides/intermediate-guides/intercept-http-requests)
    * [Metadata and Filtering](https://testcafe.io/documentation/403436/guides/intermediate-guides/metadata-and-filtering)
    * [Multiple Browser Windows](https://testcafe.io/documentation/402841/guides/intermediate-guides/multiple-browser-windows)
  * Advanced Guides
    * [Advanced Selector Techniques](https://testcafe.io/documentation/403655/guides/advanced-guides/advanced-selector-techniques)
    * [Inject Client Scripts](https://testcafe.io/documentation/402843/guides/advanced-guides/inject-client-scripts)
    * [ESM Module Support](https://testcafe.io/documentation/404258/guides/advanced-guides/esm-module-support)
    * [Create Custom Test Actions](https://testcafe.io/documentation/404150/guides/advanced-guides/custom-test-actions)
    * [Fire DOM Events](https://testcafe.io/documentation/403219/guides/advanced-guides/fire-dom-events)
    * [Execute Shell Commands on Startup](https://testcafe.io/documentation/403849/guides/advanced-guides/execute-shell-commands-on-startup)
    * [Test HTTPS Features and HTTP/2 Websites](https://testcafe.io/documentation/402839/guides/advanced-guides/test-https-features-and-http2-websites)
    * [Modify Reporter Output](https://testcafe.io/documentation/404388/guides/advanced-guides/modify-reporter-output)
    * [Detect the Client Browser and Platform](https://testcafe.io/documentation/402844/guides/advanced-guides/detect-the-client-browser-and-platform)
    * [Use the TestCafe Docker Image](https://testcafe.io/documentation/402838/guides/advanced-guides/use-testcafe-docker-image)
    * [Built-In Wait Mechanisms](https://testcafe.io/documentation/402827/guides/advanced-guides/built-in-wait-mechanisms)
    * [Replay Chrome User Flow Recordings](https://testcafe.io/documentation/403998/guides/advanced-guides/chrome-replay-support)
  * Continuous Integration
    * [Integrate TestCafe with AppVeyor](https://testcafe.io/documentation/402823/guides/continuous-integration/appveyor)
    * [Integrate TestCafe with Azure DevOps](https://testcafe.io/documentation/402822/guides/continuous-integration/azure-devops)
    * [Run Tests in Bitbucket Pipelines](https://testcafe.io/documentation/402821/guides/continuous-integration/bitbucket-pipelines)
    * [Integrate TestCafe With CircleCI](https://testcafe.io/documentation/402819/guides/continuous-integration/circleci)
    * [Run Tests on LambdaTest with CircleCI](https://testcafe.io/documentation/402820/guides/continuous-integration/circleci-and-lambdatest)
    * [Integrate TestCafe with GitHub Actions](https://testcafe.io/documentation/402817/guides/continuous-integration/github-actions)
    * [Run Tests on BrowserStack with GitHub Actions](https://testcafe.io/documentation/402818/guides/continuous-integration/github-actions-and-browserstack)
    * [Integrate TestCafe with GitLab](https://testcafe.io/documentation/402816/guides/continuous-integration/gitlab)
    * [Integrate TestCafe with Jenkins](https://testcafe.io/documentation/402815/guides/continuous-integration/jenkins)
    * [Integrate TestCafe with TeamCity](https://testcafe.io/documentation/402847/guides/continuous-integration/teamcity)
    * [Run Tests in Travis CI](https://testcafe.io/documentation/402813/guides/continuous-integration/travis)
    * [Run Tests on Sauce Labs with Travis CI](https://testcafe.io/documentation/402814/guides/continuous-integration/travis-and-sauce-labs)
  * Extend TestCafe
    * [Install Plugins](https://testcafe.io/documentation/402811/guides/extend-testcafe/install-plugins)
    * [Reporter Plugin](https://testcafe.io/documentation/402810/guides/extend-testcafe/reporter-plugin)
    * [Browser Provider Plugin](https://testcafe.io/documentation/402812/guides/extend-testcafe/browser-provider-plugin)


[Guides](https://testcafe.io/documentation/402634/guides)→Debug Tests
# Debug Tests
Some tests fail even when your website works as intended. This guide describes tools and strategies that you can use to fix failing TestCafe tests.
##  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#table-of-contents)Table of contents[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#table-of-contents)
  * [Common reasons for test failure](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#common-reasons-for-test-failure)
    * [Element Selector issues](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#element-selector-issues)
    * [Network issues](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#network-issues)
    * [Browser issues](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#browser-issues)
    * [Application errors](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#application-errors)
  * [Debug mode](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#debug-mode)
  * [Visual Selector debugger](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#visual-selector-debugger)
  * [Quarantine mode](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#quarantine-mode)
  * [Node.js debugger](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#nodejs-debugger)
  * [Adjust timeouts](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#adjust-timeouts)
  * [Adjust test speed](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#adjust-test-speed)
  * [Take screenshots on test failure](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#take-screenshots-on-test-failure)
  * [Skip JavaScript errors](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#skip-javascript-errors)


##  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#common-reasons-for-test-failure)Common reasons for test failure[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#common-reasons-for-test-failure)
Most tests fail for one of the following reasons:
  1. [Element Selector issues](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#element-selector-issues)
  2. [Network issues](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#network-issues)
  3. [Browser issues](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#browser-issues)
  4. [Application errors](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#application-errors)


If you don’t understand what causes a test to fail, try one of the following strategies:
  * Enter debug mode and [inspect the page](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#debug-mode).
  * Take [screenshots and videos](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#take-screenshots-on-test-failure) of the test to capture the moment of failure.
  * Decrease [test execution speed](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#adjust-test-speed) to pinpoint the cause of failure.


If a test yields inconclusive results, determine the reason for its irregular behavior. If you can’t resolve the issue, [quarantine the test](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#quarantine-mode) to rule out false negatives.
###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#element-selector-issues)Element Selector issues[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#element-selector-issues)
Actions and assertions use [Element Selector queries](https://testcafe.io/documentation/402829/guides/basic-guides/element-selectors) to interact with the DOM. Imprecise and poorly written Element Selector queries may cause actions and assertions to fail or yield unexpected results.
  * Make sure that your Selectors adhere to [the recommended guidelines](https://testcafe.io/documentation/402836/guides/best-practices/best-practices#selector-strategy).
  * Use the [Visual Selector debugger](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#visual-selector-debugger) to troubleshoot Element Selector queries.
  * If your Selector query is correct, but TestCafe cannot find the page element in time, adjust the [Element Selector timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#selector-timeout). 
  * If an assertion fails before your application updates page content, adjust the [Assertion timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#assertion-timeout).


See also: [My tests fail because TestCafe cannot locate a page element. Why does this happen?](https://testcafe.io/documentation/403937/faq/working-with-testcafe#my-tests-fail-because-testcafe-cannot-locate-a-page-element-why-does-this-happen)
###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#network-issues)Network issues[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#network-issues)
TestCafe tests fail when the browser fails to load a web page.
  * If your server is slow to respond, increase the [Page request timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#page-request-timeout) or the [AJAX request timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#ajax-request-timeout).
  * Enable the [Retry Test Pages](https://testcafe.io/documentation/402638/reference/configuration-file#retrytestpages) option to retry unsuccessful page requests.
  * If TestCafe routes your request through a low bandwidth [proxy](https://testcafe.io/documentation/402830/guides/basic-guides/run-tests#use-a-proxy), turn the proxy off, or [bypass](https://testcafe.io/documentation/402639/reference/command-line-interface#--proxy-bypass-rules) the proxy when you access a particular resource.
  * TestCafe uses [two network ports](https://testcafe.io/documentation/402639/reference/command-line-interface#--ports-port1port2) in the [0 - 65535] range to automate browsers. TestCafe cannot run if your firewall blocks network activity on these ports.


###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#browser-issues)Browser issues[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#browser-issues)
TestCafe tests fail when browsers disconnect or malfunction.
  * If you run multiple browsers concurrently, you may exhaust your system resources. Poor browser performance can negatively impact test performance. Decrease [the concurrency factor](https://testcafe.io/documentation/403626/guides/intermediate-guides/run-tests-concurrently) or run your browsers in [headless mode](https://testcafe.io/documentation/402828/guides/intermediate-guides/browsers#test-in-headless-mode).
  * TestCafe fails when a browser does not initialize within the [browser initialization timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#browser-initialization-timeout). Increase the timeout to account for slow browser performance.
  * TestCafe may experience performance issues if you minimize the browser window, or run the test in a background tab. The operating system detects that the browser runs in the background, and does not allocate the necessary amount of system resources to the test run.
  * TestCafe automatically restarts browsers that appear unresponsive. If TestCafe restarts your browser by mistake, enable [development mode](https://testcafe.io/documentation/402638/reference/configuration-file#developmentmode) to prevent this behavior.


###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#application-errors)Application errors[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#application-errors)
  * If your application yields a JavaScript error, TestCafe fails the test. If you cannot fix the JavaScript error in question, enable the [skipJsErrors](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#skip-javascript-errors) option to let tests proceed.
  * If your application is slow to load, adjust the [page request timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#page-request-timeout).


##  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#debug-mode)Debug mode[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#debug-mode)
![Debug mode footer](https://testcafe.io/images/debug-mode.png)
If you launch TestCafe in [debug mode](https://testcafe.io/documentation/402639/reference/command-line-interface#-d---debug-mode), TestCafe pauses the test before the first action. You can then advance the test step by step, inspect the page, and use the [Visual Selector debugger](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#visual-selector-debugger).
TestCafe displays information about breakpoints in the test log:
![Logging Debugger Breakpoints](https://testcafe.io/images/debugging/log-debugger.png)
Enable the `debugMode` setting to enter debug mode:
  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#-d---debug-mode)```
testcafe chrome test.js --debug-mode

```

  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#debugmode)```
{
    "debugMode": true
}

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ debugMode: true});

```



To enter debug mode on test failure, enable the `debugOnFail` option:
  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#--debug-on-fail)```
testcafe chrome tests/sample-fixture.js --debug-on-fail

```

  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#debugonfail)```
{
    "debugOnFail": true
}

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ debugOnFail: true});

```



Use the [t.debug](https://testcafe.io/documentation/402707/reference/test-api/testcontroller/debug) action to manually add a breakpoint. If you include a Selector query as the argument, TestCafe automatically passes the query to the [Visual Selector Debugger](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#visual-selector-debugger).
```
fixture `Debugger example`
    .page `http://devexpress.github.io/testcafe/example/`;

test('Debugger', async t => {
    await t
        .debug()
        .setNativeDialogHandler(() => true)
        .click('#populate')
        .click('#submit-button');
});

```

Important
When you enter [debug mode](https://testcafe.io/documentation/402707/reference/test-api/testcontroller/debug) with [native automation](https://testcafe.io/documentation/404237/guides/intermediate-guides/native-automation-mode) enabled, the web page **does not** freeze. The application reacts to clicks, hovers, and other interactions.
##  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#visual-selector-debugger)Visual Selector debugger[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#visual-selector-debugger)
Use the [Visual Selector debugger](https://testcafe.io/documentation/404288/guides/intermediate-guides/visual-selector-debugger) to interactively debug and generate Selector queries.
  * Enter a Selector query to see page elements that match it.
  * Click a page element to generate a Selector query.
  * Click the “Hide Picker” button to disable the debugger and hide the Selector input field.


![Enter a Selector query](https://testcafe.io/images/inspector/enter-query.gif)
If you pass a Selector query to the [t.debug()](https://testcafe.io/documentation/402707/reference/test-api/testcontroller/debug) method, TestCafe automatically inserts the query into the input field of the Visual Selector Debugger, and highlights page elements that match the query. 
##  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#quarantine-mode)Quarantine mode[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#quarantine-mode)
Enable quarantine mode to eliminate false negatives and detect unstable tests. When a test fails, TestCafe quarantines it, and repeats it until the test yields conclusive results.
Enable quarantine mode with the `-q (--quarantine-mode)` command line flag, the `quarantineMode` configuration file setting, or the `quarantineMode` [Test Runner](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run) option:
  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#-q-attemptlimitvalue-successthresholdvalue2---quarantine-mode-attemptlimitvalue-successthresholdvalue2)```
testcafe chrome ./tests/ -q

```

  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#quarantinemode)```
{
    "quarantineMode": true
}

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ quarantineMode: true });

```



##  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#nodejs-debugger)Node.js debugger[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#nodejs-debugger)
You can debug server-side code in Chrome Developer Tools and popular IDEs.
Important
Use the [Visual Selector debugger](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#visual-selector-debugger) to debug Element Selector queries.
Specify the [--inspect-brk](https://testcafe.io/documentation/402639/reference/command-line-interface#--inspect-brk) CLI flag to launch a Node.js debugger and use the [Google Chrome Developer Tools panel](https://testcafe.io/documentation/402801/recipes/debugging/chrome-dev-tools):
```
testcafe --inspect-brk chrome ./tests

```

![Node.js debugger link](https://testcafe.io/images/node-debugger.png)
For more information on debugging Node.js code in your text editor, read the following tutorials:
  * [Visual Studio Code](https://testcafe.io/documentation/402800/recipes/debugging/visual-studio-code)
  * [WebStorm](https://testcafe.io/documentation/402799/recipes/debugging/webstorm)


##  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#adjust-timeouts)Adjust timeouts[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#adjust-timeouts)
Note
High timeout values may increase the total runtime of your test suite.
  * [Selector timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#selector-timeout)
  * [Assertion timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#assertion-timeout)
  * [Page load timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#page-load-timeout)
  * [Page request timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#page-request-timeout)
  * [AJAX request timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#ajax-request-timeout)
  * [Browser initialization timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#browser-initialization-timeout)
  * [Test execution timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#test-execution-timeout)
  * [Run execution timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#run-execution-timeout)


###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#selector-timeout)Selector timeout[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#selector-timeout)
If the action target is slow to appear, investigate the root cause of the issue. If you cannot improve the performance of your network or application, increase the **Selector timeout**.
If TestCafe fails to resolve an [element selector](https://testcafe.io/documentation/402829/guides/basic-guides/element-selectors) query within the Selector timeout period, the test fails.
Default value: **10000 ms**
Specify the [timeout](https://testcafe.io/documentation/402756/reference/test-api/selector/constructor#optionstimeout) option to change the Selector timeout for an individual Selector query:
```
const footerSelector = Selector('#footer', { timeout: 20000 });

```

Use one of the following options to change the Selector timeout for the entire test run:
  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#selectortimeout)```
{
    "selectorTimeout": 3000
}

```

  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#--selector-timeout-ms)```
testcafe chrome my-tests --selector-timeout 500000

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ selectorTimeout: 50000 });

```



###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#assertion-timeout)Assertion timeout[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#assertion-timeout)
If an assertion fails because your application is slow to update its content, investigate the root cause of the issue. If you cannot improve the performance of your application, increase the **Assertion timeout**.
TestCafe executes [compatible assertions](https://testcafe.io/documentation/402837/guides/basic-guides/assertions#smart-assertion-query-mechanism) multiple times within the **Assertion timeout** period, repeating measurements and calculations with each attempt. If an assertion does not succeed, the test fails.
Default value: **3000 ms**
Specify the [timeout](https://testcafe.io/documentation/402837/guides/basic-guides/assertions#assertion-timeout) option to change the timeout for an individual assertion: 
```
await t.expect(Selector('h1').innerText).eql('Hello World!', { timeout: 20000 });

```

Use one of the following options to change the assertion timeout for the entire test run:
  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#assertiontimeout)```
{
    "assertionTimeout": 1000
}

```

  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#--assertion-timeout-ms)```
testcafe chrome my-tests --assertion-timeout 10000

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ assertionTimeout: 50000 });

```



###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#page-load-timeout)Page Load timeout[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#page-load-timeout)
The **Page Load timeout** defines the maximum amount of time between the `DOMContentLoaded` event and the `window.load` event. TestCafe applies the timeout when the user delays test execution until the `window.loadEventRaised` event.
Default value: **3000 ms**
Use the [test.timeouts](https://testcafe.io/documentation/403062/reference/test-api/test/timeouts) method to change the page load timeout for an individual test:
```
test('My test', async () => {
    /* test code goes here */
}).timeouts({ pageLoadTimeout:    5000 });

```

Use one of the following options to change the page load timeout for the entire test run:
  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#pageloadtimeout)```
{
    "pageLoadTimeout": 5000
}

```

  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#--page-load-timeout-ms)```
testcafe chrome my-tests --page-load-timeout 5000

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ assertionTimeout: 50000 });

```



###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#ajax-request-timeout)AJAX request timeout[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#ajax-request-timeout)
Note
[Disable native automation](https://testcafe.io/documentation/404237/guides/intermediate-guides/native-automation-mode) to adjust the **AJAX request timeout**.
If your application is slow to respond to AJAX requests, investigate the root cause of the issue. If you cannot improve the performance of your application, increase the **AJAX request timeout**.
If TestCafe does not resolve an XHR/Fetch request within the AJAX request timeout period, the test fails.
Default value: **120000 ms**
Use the [test.timeouts](https://testcafe.io/documentation/403062/reference/test-api/test/timeouts) method to change the AJAX request timeout for an individual test:
```
test('My test', async () => {
    /* test code goes here */
}).timeouts({ ajaxRequestTimeout:    5000 });

```

Use one of the following options to change the AJAX request timeout for the entire test run:
  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#ajaxrequesttimeout)```
{
    "ajaxRequestTimeout": 40000
}

```

  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#--ajax-request-timeout-ms)```
testcafe chrome my-tests --ajax-request-timeout 40000

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ ajaxRequestTimeout: 50000 });

```



###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#page-request-timeout)Page request timeout[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#page-request-timeout)
Note
[Disable native automation](https://testcafe.io/documentation/404237/guides/intermediate-guides/native-automation-mode) to adjust the **Page request timeout**.
If your application is slow to respond to HTTP requests, investigate the root cause of the issue. If you cannot improve the performance of your application, increase the **Page request timeout**.
If the server does not fulfill a page request within the Page request timeout period, the test fails.
Default value: **25000 ms**
Use the [test.timeouts](https://testcafe.io/documentation/403062/reference/test-api/test/timeouts) method to change the page request timeout for an individual test:
```
test('My test', async () => {
    /* test code goes here */
}).timeouts({ pageRequestTimeout:    5000 });

```

Use one of the following options to change the page request timeout for the entire test run:
  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#pagerequesttimeout)```
{
    "pageRequestTimeout": 8000
}

```

  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#--page-request-timeout-ms)```
testcafe chrome my-tests --page-request-timeout 8000

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ pageRequestTimeout: 8000 });

```



###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#browser-initialization-timeout)Browser initialization timeout[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#browser-initialization-timeout)
If your browser is slow to launch, investigate the root cause of the issue. If you cannot improve the performance of your testing environment, increase the **Browser initialization timeout**.
If one or more browsers fail to connect to TestCafe within the Browser initialization timeout period, the test run fails.
![Browser init error](https://testcafe.io/images/browser-disconnection.png)
**Default value** : `120000` for [local browsers](https://testcafe.io/documentation/402639/reference/command-line-interface#local-browsers), `360000` for [remote browsers](https://testcafe.io/documentation/402639/reference/command-line-interface#cloud-browsers-custom-browsers-remote-browsers).
  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#browserinittimeout)```
{
    "browserInitTimeout": 180000
}

```

  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#--browser-init-timeout-ms)```
testcafe chrome my-tests --browser-init-timeout 180000

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ browserInitTimeout: 8000 });

```



###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#test-execution-timeout)Test Execution timeout[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#test-execution-timeout)
When the total execution time of a test exceeds the **Test Execution timeout** , TestCafe terminates the test, even if the browser is responsive.
Default value: **none (timeout disabled)**
Note
Continuous Integration systems offer built-in task runtime management capabilities. Use the Test Execution timeout when other options are not available.
  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#testexecutiontimeout)```
{
    "testExecutionTimeout": 180000
}

```

  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#--test-execution-timeout-ms)```
testcafe chrome my-tests --test-execution-timeout 180000

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ testExecutionTimeout: 8000 });

```



###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#run-execution-timeout)Run Execution timeout[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#run-execution-timeout)
When the total execution time of a run exceeds the **Run Execution timeout** , TestCafe terminates the test run, even if the browsers are responsive.
Default value: **none (timeout disabled)**
Note
Continuous Integration systems offer built-in task runtime management capabilities. Use the Run Execution timeout when other options are not available.
  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#runexecutiontimeout)```
{
    "runExecutionTimeout": 180000
}

```

  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#--run-execution-timeout-ms)```
testcafe chrome my-tests --run-execution-timeout 180000

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ runExecutionTimeout: 8000 });

```



##  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#adjust-test-speed)Adjust test speed[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#adjust-test-speed)
Use the `speed` parameter to limit test execution speed. The parameter accepts values between `1` (the fastest speed, **default value**) and `0.01` (the slowest speed).
If you limit test execution speed, it is easier to notice differences in test behavior.
  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#--speed-factor)```
testcafe chrome ./my-tests --speed 0.1

```

  * [Configuration file](https://testcafe.io/documentation/402638/reference/configuration-file#speed)```
{
    "speed": 0.1
}

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ speed: 0.1 });

```



##  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#take-screenshots-on-test-failure)Take screenshots on test failure[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#take-screenshots-on-test-failure)
Enable the `takeOnFails` option to take screenshots on test failure. Use the screenshots to determine the cause of the failure.
Additionally, you can record [test videos](https://testcafe.io/documentation/402840/guides/intermediate-guides/screenshots-and-videos) to review video footage of your tests.
Important
Video recording incurs a heavy system resource overhead. If you record too many videos simultaneously, test performance may suffer.
  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#screenshotstakeonfails)```
{
    "screenshots": {
        "takeOnFails": true
    }
}

```

  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#takeonfails)```
testcafe all tests/sample-fixture.js -s takeOnFails=true

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402654/reference/testcafe-api/runner/screenshots)```
runner.screenshots({
    takeOnFails: true
});

```



##  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#skip-javascript-errors)Skip JavaScript errors[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#skip-javascript-errors)
> Main article: [Skip JavaScript Errors](https://testcafe.io/documentation/404038/recipes/debugging/skip-javascript-errors)
TestCafe tests fail when a page yields a JavaScript error. Usually, errors are signs of malfunction that warrant action. However, in some cases third-party modules yield errors that the user cannot fix.
If you enable the `skipJsErrors` option, TestCafe deliberately **ignores** JavaScript errors and lets tests proceed.
  * Use the [CLI flag](https://testcafe.io/documentation/402639/reference/command-line-interface#-e-messagevalue-stackvalue2-pageurlvalue3---skip-js-errors-messagevalue-stackvalue2-pageurlvalue3), the [configuration file property](https://testcafe.io/documentation/402638/reference/configuration-file#skipjserrors), or the [Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run#skipjserrors) to ignore JavaScript errors throughout your entire test suite.


  * Use the [fixture.skipJsErrors](https://testcafe.io/documentation/404025/reference/test-api/fixture/skipjserrors) method to ignore JavaScript errors for individual fixtures. 


  * Use the [test.skipJsErrors](https://testcafe.io/documentation/404026/reference/test-api/test/skipjserrors) method to ignore JavaScript errors in individual tests.


  * Use the [t.skipJsErrors](https://testcafe.io/documentation/404027/reference/test-api/testcontroller/skipjserrors) action to ignore JavaScript errors at specific points in the test.


For each of the methods above, you can define the following options:
  * The `pageUrl` option filters errors by page URL.
  * The `message` option filters errors by message.
  * The `stack` option filters errors by call stack.


On this page
  * [Table of contents](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#table-of-contents)
  * [Common reasons for test failure](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#common-reasons-for-test-failure)
  * [Debug mode](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#debug-mode)
  * [Visual Selector debugger](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#visual-selector-debugger)
  * [Quarantine mode](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#quarantine-mode)
  * [Node.js debugger](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#nodejs-debugger)
  * [Adjust timeouts](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#adjust-timeouts)
  * [Adjust test speed](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#adjust-test-speed)
  * [Take screenshots on test failure](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#take-screenshots-on-test-failure)
  * [Skip JavaScript errors](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#skip-javascript-errors)


![TestCafe](https://testcafe.io/img/testcafe-logo.svg)
TestCafe is a user-friendly end-to-end testing framework. Free and open source test runner. Powerful desktop app. Enterprise-quality web services.
[Facebook](https://www.facebook.com/dxtestcafe/)[Twitter](https://twitter.com/DXTestCafe)[GitHub](https://github.com/DevExpress/testcafe)Email[Youtube](https://www.youtube.com/playlist?list=PL8h4jt35t1wirqPiT68hV0cpX1ppQMVtF)
## Footer navigation
### Product
  * [Why TestCafe](https://testcafe.io/documentation/402631/guides/overview/why-testcafe)
  * [Getting Started](https://testcafe.io/documentation/402635/guides/overview/getting-started)
  * [TestCafe Studio](https://www.devexpress.com/products/testcafestudio/)
  * [Integrations](https://testcafe.io/documentation/402809/guides/continuous-integration)
  * [What's New](https://testcafe.io/release-notes)
  * [Roadmap](https://testcafe.io/402949/roadmap)


### Features
  * [Cross-browser tests](https://testcafe.io/documentation/402828/guides/concepts/browsers)
  * [API tests](https://testcafe.io/documentation/403971/guides/intermediate-guides/api-testing)
  * [Multi-window tests](https://testcafe.io/documentation/402841/guides/intermediate-guides/multiple-browser-windows)
  * [Iframe tests](https://testcafe.io/documentation/402833/guides/basic-guides/test-actions#work-with-iframes)
  * [Live Mode](https://testcafe.io/documentation/402830/guides/basic-guides/run-tests#live-mode)
  * [Unstable test detection](https://testcafe.io/documentation/402830/guides/basic-guides/run-tests#quarantine-mode)
  * [Screenshots and Videos](https://testcafe.io/documentation/402840/guides/intermediate-guides/screenshots-and-videos)
  * [Concurrent test runs](https://testcafe.io/documentation/403626/guides/intermediate-guides/run-tests-concurrently)
  * [TypeScript tests](https://testcafe.io/documentation/402824/guides/concepts/typescript-and-coffeescript)


### Resources
  * [Blog](https://testcafe.io/resources/team-blog)
  * [Community Blogs](https://testcafe.io/resources/community-blogs)
  * [Courses](https://testcafe.io/resources/courses)
  * [Books](https://testcafe.io/resources/books)
  * [Case studies](https://testcafe.io/case-studies)


### Learn
  * [Docs](https://testcafe.io/documentation/402635/guides/overview/getting-started)
  * [FAQ](https://testcafe.io/documentation/402636/faq/general-info)
  * [Guides](https://testcafe.io/documentation/402634/guides)
  * [Best Practices](https://testcafe.io/documentation/402836/guides/basic-guides/best-practices)
  * [Examples](https://testcafe.io/documentation/402637/examples)


### Support
  * [Report an Issue](https://github.com/DevExpress/testcafe/issues/new?assignees=&labels=TYPE%3A+bug&template=bug_report.yaml)
  * [Suggest a Feature](https://github.com/DevExpress/testcafe/issues/new?assignees=&labels=TYPE%3A+enhancement&template=feature_request.yaml)
  * [Ask on StackOverflow](https://stackoverflow.com/questions/ask?tags=testcafe)


© 2012–2023 Developer Express Inc. Use of this site constitutes acceptance of our [Privacy Policy.](https://www.devexpress.com/aboutus/privacy-policy.xml)
All trademarks or registered trademarks are property of their respective owners.
Why We Use Cookies
This site uses cookies to make your browsing experience more convenient and personal. Cookies store useful information on your computer to help us improve the efficiency and relevance of our site for you. In some cases, they are essential to making the site work properly. By accessing this site, you consent to the use of cookies. For more information, refer to DevExpress [privacy policy](https://www.devexpress.com/aboutus/privacy-policy.xml) and[ cookie policy](https://www.devexpress.com/AboutUs/cookie-policy.xml).
I understand
 (success: true, hasMarkdown: true, hasDescription: true)
[ivp996a] Source 5 keep: [![JetBrains](https://www.jetbrains.com/guide/assets/jetbrains-white.svg)](https://www.jetbrains.com/guide/)[Guide](https://www.jetbrains.com/guide/)
[Topics](https://www.jetbrains.com/guide/channels/)
[![Remote Development](https://www.jetbrains.com/guide/assets/thumbnail-7ae7d6dc.png)](https://www.jetbrains.com/guide/remote/)
[Remote Development](https://www.jetbrains.com/guide/remote/)
Technologies[JavaScript and TypeScript](https://www.jetbrains.com/guide/javascript/)[Python](https://www.jetbrains.com/guide/python/)[Java](https://www.jetbrains.com/guide/java/)[Go](https://www.jetbrains.com/guide/go/)[.NET](https://www.jetbrains.com/guide/dotnet/)[Kotlin](https://www.jetbrains.com/guide/kotlin/)
Solutions[Game Development](https://www.jetbrains.com/guide/gamedev/)[JetBrains AI Guide: How to Use AI in Your IDE](https://www.jetbrains.com/guide/ai/)[Remote Development](https://www.jetbrains.com/guide/remote/)[Databases](https://www.jetbrains.com/guide/databases/)[Django](https://www.jetbrains.com/guide/django/)
Hot tags[Amazon AWS](https://www.jetbrains.com/guide/tags/aws/)[Debugging](https://www.jetbrains.com/guide/tags/debugging/)[Git](https://www.jetbrains.com/guide/tags/git/)[Google Cloud](https://www.jetbrains.com/guide/tags/gcp/)[Gradle](https://www.jetbrains.com/guide/tags/gradle/)[Refactoring](https://www.jetbrains.com/guide/tags/refactoring/)
[Browse more content...](https://www.jetbrains.com/guide/explore/)
[Explore](https://www.jetbrains.com/guide/explore/)
[Java](https://www.jetbrains.com/guide/java/)[Java](https://www.jetbrains.com/guide/java/)
[Download](https://www.jetbrains.com/idea/)[Blog](https://blog.jetbrains.com/idea/)[Docs](https://www.jetbrains.com/help/)
Tutorial
  * [Introduction](https://www.jetbrains.com/guide/java/tutorials/reading-code/introduction/)
  * [Formatting](https://www.jetbrains.com/guide/java/tutorials/reading-code/formatting/)
  * [Structure](https://www.jetbrains.com/guide/java/tutorials/reading-code/structure/)
  * [Searching](https://www.jetbrains.com/guide/java/tutorials/reading-code/searching/)
  * [Additional hints](https://www.jetbrains.com/guide/java/tutorials/reading-code/hints/)
  * [Reader mode](https://www.jetbrains.com/guide/java/tutorials/reading-code/reader-mode/)
  * [Testing and debugging](https://www.jetbrains.com/guide/java/tutorials/reading-code/test-debug/)
  * [Refactoring](https://www.jetbrains.com/guide/java/tutorials/reading-code/refactor/)
  * [Version control (Git) history](https://www.jetbrains.com/guide/java/tutorials/reading-code/vcs/)
  * [JetBrains AI Assistant](https://www.jetbrains.com/guide/java/tutorials/reading-code/ai-assistant/)
  * [Summary and Shortcuts](https://www.jetbrains.com/guide/java/tutorials/reading-code/summary/)


  * [Tips for Reading Code](https://www.jetbrains.com/guide/java/tutorials/reading-code/)
  * [Testing and debugging](https://www.jetbrains.com/guide/java/tutorials/reading-code/test-debug/)


## Testing and debugging
### Testing and debugging in IntelliJ IDEA.
[![Marit van Dijk](https://www.jetbrains.com/guide/assets/md-9ed30a06.png)](https://www.jetbrains.com/guide/authors/md/)
[Marit van Dijk ](https://www.jetbrains.com/guide/authors/md/)
2024-03-01
[Edit this page](https://github.com/JetBrains/guide/edit/main/site/java/tutorials/reading-code/test-debug/index.md)
[tricks](https://www.jetbrains.com/guide/tags/tricks/)[testing](https://www.jetbrains.com/guide/tags/testing/)[debugging](https://www.jetbrains.com/guide/tags/debugging/)
To understand intended behavior, we can look at the tests. Use `⌘⇧T` (macOS) / `Ctrl+Shift+T` (Windows/Linux) to **Navigate to Tests**. To look at the code and its tests side by side, right-click the tab for the test file and select **Split and Move Right** from the context menu.
We can run a test through the debugger to actually see how the code is executed. First, we need to place a breakpoint at the location in the code we’re interested in. Use `⌘F8` (macOS) / `Ctrl+F8` (Windows/Linux) to toggle the breakpoint.
Next, we run our test using the debug option. We can do so by clicking the green run button in the gutter next to our test.
Execution will stop at the breakpoint, so we can investigate the state of our application. We can see current values of variables and objects. We can evaluate an expression, using the shortcut `⌥F8` (macOS) / `Alt+F8` (Windows/Linux), to see its current value and look at more details. In the **Evaluate** popup, we can even change the expressions to evaluate different results.
We can continue execution by either stepping into a method, using `F7` (macOS) / `F7` (Windows/Linux), to see what happens inside a called method or stepping over a line, using `F8` (macOS) / `F8` (Windows/Linux), to go to the next line even if a method is called, depending on what we’re interested in. Finally, we can resume the program, using `⌥⌘R` (macOS) / `F9` (Windows/Linux), to finish the execution of the test.
If there is no test that exercises the piece of code you are interested in, you might want to add one. This can also help you verify any assumptions you might have about the code.
* * *
[Reader mode](https://www.jetbrains.com/guide/java/tutorials/reading-code/reader-mode/)
[Refactoring](https://www.jetbrains.com/guide/java/tutorials/reading-code/refactor/)
* * *
  * [Privacy & Security](https://www.jetbrains.com/legal/docs/privacy/privacy/)
  * [Terms of Use](https://www.jetbrains.com/legal/docs/company/useterms.html)
  * [Trademarks](https://www.jetbrains.com/legal/trademarks/)
  * [Legal](https://www.jetbrains.com/legal/)
  * [Genuine tools](https://www.jetbrains.com/genuine-tools/)


[](https://www.facebook.com/JetBrains "JetBrains on Facebook")[](https://www.twitter.com/JetBrains "JetBrains on X")[](https://www.linkedin.com/company/jetbrains/ "JetBrains on LinkedIn")[](https://www.youtube.com/JetBrainsTV "JetBrains on YouTube")[](https://www.instagram.com/jetbrains/ "JetBrains on Instagram")[](https://www.tiktok.com/@jetbrains "JetBrains on TikTok")[](https://blog.jetbrains.com/ "JetBrains blog")[](https://blog.jetbrains.com/feed/ "JetBrains RSS feed")
Copyright © 2000–2025 [JetBrains](https://www.jetbrains.com/) s.r.o.
 (success: true, hasMarkdown: true, hasDescription: true)
[ivp996a] Source 6 keep: # 
![site logo](https://cdn.sstatic.net/Sites/stackoverflow/Img/icon-48.png?v=b7e36f88ff92) **Join Stack Overflow**
By clicking “Sign up”, you agree to our [terms of service](https://stackoverflow.com/legal/terms-of-service/public) and acknowledge you have read our [privacy policy](https://stackoverflow.com/legal/privacy-policy).
Sign up with Google
Sign up with GitHub
# OR
Email
Password
Sign up
Already have an account? [Log in](https://stackoverflow.com/users/login)
[Skip to main content](https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test#content)
[](https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test) [ Stack Overflow ](https://stackoverflow.com)
  1. [ About ](https://stackoverflow.co/)
  2. Products
  3. [ For Teams ](https://stackoverflow.co/teams/)


  1. [ Stack Overflow for Teams Where developers & technologists share private knowledge with coworkers ](https://stackoverflow.co/teams/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=top-nav&utm_content=stack-overflow-for-teams)
  2. [ Advertising Reach devs & technologists worldwide about your product, service or employer brand ](https://stackoverflow.co/advertising/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=top-nav&utm_content=stack-overflow-advertising)
  3. [ Knowledge Solutions Data licensing offering for businesses to build and improve AI tools and models ](https://stackoverflow.co/api-solutions/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=top-nav&utm_content=overflow-api)
  4. [ Labs The future of collective knowledge sharing ](https://stackoverflow.co/labs/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=top-nav&utm_content=labs)
  5. [About the company](https://stackoverflow.co/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=top-nav&utm_content=about-the-company) [Visit the blog](https://stackoverflow.blog/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=top-nav&utm_content=blog)


Loading…
  1. ###  [current community](https://stackoverflow.com)
     * [ Stack Overflow  ](https://stackoverflow.com)
[help](https://stackoverflow.com/help) [chat](https://chat.stackoverflow.com/?tab=explore)
     * [ Meta Stack Overflow  ](https://meta.stackoverflow.com)
###  your communities 
[Sign up](https://stackoverflow.com/users/signup?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f5200758%2fcan-i-debug-while-running-a-vs-unit-test) or [log in](https://stackoverflow.com/users/login?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f5200758%2fcan-i-debug-while-running-a-vs-unit-test) to customize your list. 
###  [more stack exchange communities](https://stackexchange.com/sites)
[company blog](https://stackoverflow.blog)
  2. [Log in](https://stackoverflow.com/users/login?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f5200758%2fcan-i-debug-while-running-a-vs-unit-test)
  3. [Sign up](https://stackoverflow.com/users/signup?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f5200758%2fcan-i-debug-while-running-a-vs-unit-test)


The 2025 Developer Survey results are in. Explore insights into technology and tools, careers, community and more.  [View results](https://survey.stackoverflow.co/2025?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=dev-survey-2025&utm_content=results-announcement-banner). 
[](https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test "dismiss")
# 
Let's set up your homepage Select a few topics you're interested in:
pythonjavascriptc#reactjsjavaandroidhtmlflutterc++node.jstypescriptcssrphpangularnext.jsspring-bootmachine-learningsqlexceliosazuredocker
Or search from our full list:
  * javascript
  * python
  * java
  * c#
  * php
  * android
  * html
  * jquery
  * c++
  * css
  * ios
  * sql
  * mysql
  * r
  * reactjs
  * node.js
  * arrays
  * c
  * asp.net
  * json
  * python-3.x
  * .net
  * ruby-on-rails
  * sql-server
  * swift
  * django
  * angular
  * objective-c
  * excel
  * pandas
  * angularjs
  * regex
  * typescript
  * ruby
  * linux
  * ajax
  * iphone
  * vba
  * xml
  * laravel
  * spring
  * asp.net-mvc
  * database
  * wordpress
  * string
  * flutter
  * postgresql
  * mongodb
  * wpf
  * windows
  * amazon-web-services
  * xcode
  * bash
  * git
  * oracle-database
  * spring-boot
  * dataframe
  * azure
  * firebase
  * list
  * multithreading
  * docker
  * vb.net
  * react-native
  * eclipse
  * algorithm
  * powershell
  * macos
  * visual-studio
  * numpy
  * image
  * forms
  * scala
  * function
  * vue.js
  * performance
  * twitter-bootstrap
  * selenium
  * winforms
  * kotlin
  * loops
  * express
  * dart
  * hibernate
  * sqlite
  * matlab
  * python-2.7
  * shell
  * rest
  * apache
  * entity-framework
  * android-studio
  * csv
  * maven
  * linq
  * qt
  * dictionary
  * unit-testing
  * asp.net-core
  * facebook
  * apache-spark
  * tensorflow
  * file
  * swing
  * class
  * unity-game-engine
  * sorting
  * date
  * authentication
  * go
  * symfony
  * t-sql
  * opencv
  * matplotlib
  * .htaccess
  * google-chrome
  * for-loop
  * datetime
  * codeigniter
  * perl
  * http
  * validation
  * sockets
  * google-maps
  * object
  * uitableview
  * xaml
  * oop
  * if-statement
  * visual-studio-code
  * cordova
  * ubuntu
  * web-services
  * email
  * android-layout
  * github
  * spring-mvc
  * elasticsearch
  * kubernetes
  * selenium-webdriver
  * ms-access
  * ggplot2
  * user-interface
  * parsing
  * pointers
  * google-sheets
  * c++11
  * security
  * machine-learning
  * google-apps-script
  * ruby-on-rails-3
  * templates
  * flask
  * nginx
  * variables
  * exception
  * sql-server-2008
  * gradle
  * debugging
  * tkinter
  * listview
  * delphi
  * jpa
  * asynchronous
  * web-scraping
  * haskell
  * pdf
  * jsp
  * ssl
  * amazon-s3
  * google-cloud-platform
  * jenkins
  * testing
  * xamarin
  * wcf
  * batch-file
  * npm
  * generics
  * ionic-framework
  * network-programming
  * unix
  * recursion
  * google-app-engine
  * mongoose
  * visual-studio-2010
  * .net-core
  * android-fragments
  * assembly
  * animation
  * math
  * svg
  * session
  * hadoop
  * intellij-idea
  * next.js
  * rust
  * curl
  * join
  * django-models
  * winapi
  * laravel-5
  * url
  * heroku
  * http-redirect
  * tomcat
  * google-cloud-firestore
  * inheritance
  * webpack
  * image-processing
  * keras
  * gcc
  * asp.net-mvc-4
  * swiftui
  * logging
  * dom
  * matrix
  * pyspark
  * actionscript-3
  * button
  * post
  * web
  * optimization
  * firebase-realtime-database
  * jquery-ui
  * cocoa
  * iis
  * xpath
  * d3.js
  * javafx
  * firefox
  * xslt
  * internet-explorer
  * caching
  * select
  * asp.net-mvc-3
  * opengl
  * events
  * asp.net-web-api
  * plot
  * dplyr
  * encryption
  * magento
  * search
  * stored-procedures
  * amazon-ec2
  * ruby-on-rails-4
  * memory
  * canvas
  * audio
  * multidimensional-array
  * jsf
  * random
  * vector
  * redux
  * cookies
  * input
  * facebook-graph-api
  * flash
  * indexing
  * xamarin.forms
  * arraylist
  * ipad
  * cocoa-touch
  * data-structures
  * video
  * model-view-controller
  * apache-kafka
  * azure-devops
  * serialization
  * jdbc
  * woocommerce
  * razor
  * routes
  * awk
  * servlets
  * mod-rewrite
  * excel-formula
  * beautifulsoup
  * filter
  * docker-compose
  * iframe
  * aws-lambda
  * design-patterns
  * text
  * django-rest-framework
  * visual-c++
  * cakephp
  * mobile
  * android-intent
  * struct
  * react-hooks
  * methods
  * groovy
  * mvvm
  * ssh
  * lambda
  * checkbox
  * ecmascript-6
  * time
  * google-chrome-extension
  * grails
  * installation
  * sharepoint
  * cmake
  * shiny
  * spring-security
  * jakarta-ee
  * plsql
  * android-recyclerview
  * core-data
  * types
  * meteor
  * sed
  * android-activity
  * activerecord
  * bootstrap-4
  * websocket
  * graph
  * replace
  * scikit-learn
  * group-by
  * vim
  * file-upload
  * junit
  * boost
  * sass
  * memory-management
  * deep-learning
  * import
  * async-await
  * error-handling
  * eloquent
  * dynamic
  * soap
  * dependency-injection
  * silverlight
  * layout
  * charts
  * apache-spark-sql
  * deployment
  * browser
  * gridview
  * svn
  * while-loop
  * google-bigquery
  * vuejs2
  * ffmpeg
  * dll
  * highcharts
  * view
  * foreach
  * makefile
  * plugins
  * c#-4.0
  * redis
  * reporting-services
  * jupyter-notebook
  * merge
  * unicode
  * reflection
  * https
  * server
  * google-maps-api-3
  * twitter
  * oauth-2.0
  * extjs
  * terminal
  * axios
  * pip
  * pytorch
  * split
  * cmd
  * encoding
  * django-views
  * collections
  * database-design
  * hash
  * netbeans
  * automation
  * data-binding
  * ember.js
  * build
  * tcp
  * mysqli
  * pdo
  * sqlalchemy
  * apache-flex
  * entity-framework-core
  * concurrency
  * command-line
  * spring-data-jpa
  * printing
  * react-redux
  * java-8
  * html-table
  * lua
  * jestjs
  * ansible
  * service
  * neo4j
  * material-ui
  * parameters
  * enums
  * flexbox
  * module
  * promise
  * visual-studio-2012
  * outlook
  * firebase-authentication
  * webview
  * web-applications
  * uwp
  * jquery-mobile
  * utf-8
  * datatable
  * python-requests
  * parallel-processing
  * drop-down-menu
  * colors
  * scipy
  * scroll
  * tfs
  * hive
  * count
  * syntax
  * ms-word
  * twitter-bootstrap-3
  * ssis
  * google-analytics
  * fonts
  * rxjs
  * constructor
  * file-io
  * three.js
  * powerbi
  * paypal
  * graphql
  * cassandra
  * discord
  * graphics
  * compiler-errors
  * gwt
  * socket.io
  * react-router
  * solr
  * backbone.js
  * url-rewriting
  * memory-leaks
  * datatables
  * nlp
  * terraform
  * oauth
  * datagridview
  * drupal
  * oracle11g
  * zend-framework
  * knockout.js
  * triggers
  * neural-network
  * interface
  * django-forms
  * angular-material
  * jmeter
  * casting
  * google-api
  * linked-list
  * path
  * timer
  * proxy
  * django-templates
  * arduino
  * orm
  * directory
  * windows-phone-7
  * parse-platform
  * visual-studio-2015
  * cron
  * conditional-statements
  * push-notification
  * functional-programming
  * primefaces
  * pagination
  * model
  * jar
  * xamarin.android
  * hyperlink
  * uiview
  * google-cloud-functions
  * visual-studio-2013
  * vbscript
  * gitlab
  * azure-active-directory
  * jwt
  * download
  * swift3
  * sql-server-2005
  * configuration
  * process
  * rspec
  * pygame
  * properties
  * combobox
  * callback
  * windows-phone-8
  * linux-kernel
  * safari
  * scrapy
  * permissions
  * emacs
  * scripting
  * raspberry-pi
  * clojure
  * x86
  * scope
  * io
  * azure-functions
  * expo
  * compilation
  * responsive-design
  * nhibernate
  * mongodb-query
  * angularjs-directive
  * request
  * bluetooth
  * reference
  * binding
  * dns
  * 3d
  * architecture
  * playframework
  * pyqt
  * discord.js
  * version-control
  * doctrine-orm
  * package
  * get
  * rubygems
  * f#
  * sql-server-2012
  * autocomplete
  * openssl
  * tree
  * datepicker
  * kendo-ui
  * jackson
  * yii
  * controller
  * grep
  * nested
  * xamarin.ios
  * static
  * dockerfile
  * statistics
  * null
  * transactions
  * active-directory
  * datagrid
  * uiviewcontroller
  * webforms
  * discord.py
  * phpmyadmin
  * sas
  * computer-vision
  * notifications
  * duplicates
  * mocking
  * youtube
  * pycharm
  * nullpointerexception
  * yaml
  * menu
  * sum
  * blazor
  * plotly
  * bitmap
  * asp.net-mvc-5
  * visual-studio-2008
  * electron
  * yii2
  * floating-point
  * css-selectors
  * stl
  * jsf-2
  * android-listview
  * time-series
  * cryptography
  * ant
  * hashmap
  * character-encoding
  * stream
  * msbuild
  * asp.net-core-mvc
  * sdk
  * google-drive-api
  * selenium-chromedriver
  * jboss
  * joomla
  * cors
  * devise
  * navigation
  * anaconda
  * background
  * cuda
  * multiprocessing
  * binary
  * camera
  * frontend
  * pyqt5
  * iterator
  * linq-to-sql
  * mariadb
  * onclick
  * ios7
  * android-jetpack-compose
  * microsoft-graph-api
  * rabbitmq
  * android-asynctask
  * tabs
  * laravel-4
  * amazon-dynamodb
  * environment-variables
  * insert
  * uicollectionview
  * linker
  * xsd
  * coldfusion
  * console
  * continuous-integration
  * upload
  * ftp
  * textview
  * opengl-es
  * operating-system
  * macros
  * mockito
  * vuejs3
  * formatting
  * localization
  * xml-parsing
  * json.net
  * type-conversion
  * data.table
  * kivy
  * timestamp
  * integer
  * calendar
  * segmentation-fault
  * android-ndk
  * prolog
  * drag-and-drop
  * char
  * crash
  * jasmine
  * automated-tests
  * dependencies
  * geometry
  * itext
  * azure-pipelines
  * android-gradle-plugin
  * fortran
  * firebase-cloud-messaging
  * sprite-kit
  * header
  * mfc
  * attributes
  * nuxt.js
  * nosql
  * format
  * odoo
  * db2
  * jquery-plugins
  * event-handling
  * jenkins-pipeline
  * nestjs
  * leaflet
  * julia
  * annotations
  * flutter-layout
  * keyboard
  * postman
  * textbox
  * arm
  * visual-studio-2017
  * gulp
  * stripe-payments
  * libgdx
  * synchronization
  * timezone
  * uikit
  * azure-web-app-service
  * xampp
  * dom-events
  * crystal-reports
  * wso2
  * android-emulator
  * swagger
  * namespaces
  * google-sheets-formula
  * uiscrollview
  * aggregation-framework
  * sequelize.js
  * jvm
  * chart.js
  * com
  * snowflake-cloud-data-platform
  * subprocess
  * geolocation
  * webdriver
  * centos
  * html5-canvas
  * garbage-collection
  * dialog
  * widget
  * numbers
  * concatenation
  * sql-update
  * qml
  * set
  * tuples
  * java-stream
  * smtp
  * mapreduce
  * ionic2
  * windows-10
  * rotation
  * android-edittext
  * modal-dialog
  * spring-data
  * nuget
  * doctrine
  * radio-button
  * http-headers
  * grid
  * sonarqube
  * lucene
  * xmlhttprequest
  * listbox
  * switch-statement
  * initialization
  * internationalization
  * components
  * apache-camel
  * boolean
  * google-play
  * serial-port
  * gdb
  * ldap
  * ios5
  * youtube-api
  * return
  * latex
  * pivot
  * eclipse-plugin
  * frameworks
  * tags
  * containers
  * github-actions
  * subquery
  * c++17
  * dataset
  * asp-classic
  * foreign-keys
  * label
  * uinavigationcontroller
  * copy
  * delegates
  * google-cloud-storage
  * embedded
  * struts2
  * migration
  * protractor
  * base64
  * queue
  * find
  * uibutton
  * sql-server-2008-r2
  * arguments
  * composer-php
  * append
  * jaxb
  * zip
  * stack
  * tailwind-css
  * cucumber
  * autolayout
  * ide
  * entity-framework-6
  * popup
  * iteration
  * r-markdown
  * windows-7
  * airflow
  * vb6
  * ssl-certificate
  * gmail
  * g++
  * hover
  * jqgrid
  * clang
  * range


Next You’ll be prompted to create an account to view your personalized homepage.
  1.     1. [ Home ](https://stackoverflow.com/)
    2. [ Questions ](https://stackoverflow.com/questions)
    3. [ AI Assist Labs ](https://stackoverflow.ai)
    4. [ Tags ](https://stackoverflow.com/tags)
    5. [ Challenges ](https://stackoverflow.com/beta/challenges)
    6. [ Chat ](https://chat.stackoverflow.com/rooms/259507/stack-overflow-lobby)
    7. [ Articles ](https://stackoverflow.blog/contributed?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=so-blog&utm_content=experiment-articles)
    8. [ Users ](https://stackoverflow.com/users)
    9. [ Jobs ](https://stackoverflow.com/jobs?source=so-left-nav)
    10. [ Companies ](https://stackoverflow.com/jobs/companies?so_medium=stackoverflow&so_source=SiteNav)
    11. [ Collectives ](javascript:void\(0\))
    12. Communities for your favorite technologies. [Explore all Collectives](https://stackoverflow.com/collectives-all)
  2. Teams
![](https://cdn.sstatic.net/Img/teams/teams-promo.svg?v=e507948b81bf)
Ask questions, find answers and collaborate at work with Stack Overflow for Teams. 
[Try Teams for free](https://stackoverflowteams.com/teams/create/free/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=side-bar&utm_content=explore-teams) [Explore Teams](https://stackoverflow.co/teams/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=side-bar&utm_content=explore-teams)
  3. [ Teams ](javascript:void\(0\))
  4. Ask questions, find answers and collaborate at work with Stack Overflow for Teams. [Explore Teams](https://stackoverflow.co/teams/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=side-bar&utm_content=explore-teams-compact)


##### Collectives™ on Stack Overflow
Find centralized, trusted content and collaborate around the technologies you use most.
[ Learn more about Collectives ](https://stackoverflow.com/collectives)
**Teams**
Q&A for work
Connect and share knowledge within a single location that is structured and easy to search.
[ Learn more about Teams ](https://stackoverflow.co/teams/)
# 
![Illustration of upvote icon after it is clicked](https://cdn.sstatic.net/Img/modal/img-upvote.png?v=fce73bd9724d)
# Hang on, you can't upvote just yet.
You'll need to complete a few actions and gain 15 reputation points before being able to upvote. **Upvoting** indicates when questions and answers are useful. [What's reputation and how do I get it?](https://stackoverflow.com/help/whats-reputation)
Instead, you can save this post to reference later.
Save this post for later Not now
# [Can I debug while running a VS Unit Test?](https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test)
[ Ask Question ](https://stackoverflow.com/questions/ask)
Asked 14 years, 5 months ago
Modified [6 years, 5 months ago](https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test?lastactivity "2019-02-13 21:46:01Z")
Viewed 28k times 
This question shows research effort; it is useful and clear
33 
Save this question.
[](https://stackoverflow.com/posts/5200758/timeline)
Show activity on this post.
I want to unit test a user component which use custom events. when doing this without using VS Unit test Framework debug.assert succeed, when doing the same thing with VS Unit Test Framework, assert fails this is illogical so I want to debug while doing Unit test with VS framework. But It seems I can't because code never pause at debug point that I set. 
So is there a way to force it to pause at debug point in that case ?
Update: I mean not in the Test Project itself but in the Targeted Project while running the Test Project.
  * [c#](https://stackoverflow.com/questions/tagged/c%23 "show questions tagged 'c#'")
  * [.net](https://stackoverflow.com/questions/tagged/.net "show questions tagged '.net'")
  * [visual-studio](https://stackoverflow.com/questions/tagged/visual-studio "show questions tagged 'visual-studio'")
  * [unit-testing](https://stackoverflow.com/questions/tagged/unit-testing "show questions tagged 'unit-testing'")


[Share](https://stackoverflow.com/q/5200758 "Short permalink to this question")
[Improve this question](https://stackoverflow.com/posts/5200758/edit)
Follow 
Follow this question to receive notifications
[edited Mar 5, 2011 at 0:39](https://stackoverflow.com/posts/5200758/revisions "show all edits to this post")
user310291
asked Mar 5, 2011 at 0:32
[![user310291's user avatar](https://www.gravatar.com/avatar/22184b90539c866099c39872b3c12a0e?s=64&d=identicon&r=PG)](https://stackoverflow.com/users/310291/user310291)
[user310291](https://stackoverflow.com/users/310291/user310291)user310291
38.5k9090 gold badges299299 silver badges520520 bronze badges
[ Add a comment ](https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test "Use comments to ask for more information or suggest improvements. Avoid answering questions in comments.") |  [ ](https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test "Expand to show all comments on this post")
##  4 Answers 4
Sorted by:  [ Reset to default ](https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test?answertab=scoredesc#tab-top)
Highest score (default)  Trending (recent votes count more)  Date modified (newest first)  Date created (oldest first) 
This answer is useful
58 
Save this answer.
[](https://stackoverflow.com/posts/5200774/timeline)
Show activity on this post.
**Yes** , with the Visual Studio Test project, you can set breakpoints and step through your code.
Be sure to run your tests with the Debug menu -- Tests -> Debug -> Tests in Current Context. For any given test class or test method, use the keyboard shortcut `Ctrl-R` `Ctrl-T`. 
When your cursor is in a method (_either a test method, or the code covered by the test_), it'll break on any breakpoints in that method, or any breakpoints anywhere in the code execution path. If your cursor is on the class, or in between test methods, it'll run all tests in the class. Breakpoints will be hit here as above.
[Share](https://stackoverflow.com/a/5200774 "Short permalink to this answer")
[Improve this answer](https://stackoverflow.com/posts/5200774/edit)
Follow 
Follow this answer to receive notifications
[edited Mar 5, 2011 at 0:42](https://stackoverflow.com/posts/5200774/revisions "show all edits to this post")
answered Mar 5, 2011 at 0:34
[![p.campbell's user avatar](https://i.sstatic.net/WVaPd.jpg?s=64)](https://stackoverflow.com/users/23199/p-campbell)
[p.campbell](https://stackoverflow.com/users/23199/p-campbell)p.campbell
101k7070 gold badges262262 silver badges326326 bronze badges
5
  * I forgot I mean not in the Test Project but in the Targeted Project
– [user310291](https://stackoverflow.com/users/310291/user310291 "38,508 reputation")
Commented Mar 5, 2011 at 0:38
  * @user: yep, any breakpoint will be hit, whether in the test method, or the code being tested downstream.
– [p.campbell](https://stackoverflow.com/users/23199/p-campbell "100,795 reputation")
Commented Mar 5, 2011 at 0:40
  * just to add to @user 's remark, if you debug the unit tests you will be able to stop and debug any code, the tests or the tested code AS LONG as you have the tested code source or debugger info, so you wouldnt be able to jump into a referenced dll with no symbols file
– [Francisco Noriega](https://stackoverflow.com/users/193282/francisco-noriega "14,724 reputation")
Commented Mar 5, 2011 at 5:32
  * There are no specific settings because on my setup through execute but the breakdowns are never hit?
– [Stainedart](https://stackoverflow.com/users/1041842/stainedart "1,989 reputation")
Commented Jun 7, 2012 at 12:10
  * Make sure you're not in a Release build.
– [kettlecrab](https://stackoverflow.com/users/7197632/kettlecrab "65 reputation")
Commented Dec 2, 2017 at 17:50


[ Add a comment ](https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test "Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”.") |  [ ](https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test "Expand to show all comments on this post")
This answer is useful
36 
Save this answer.
[](https://stackoverflow.com/posts/15443817/timeline)
Show activity on this post.
The answer by P. Campbell is not exactly right. If you start debugging a project (such as a WCF services site), it is impossible to start any unit tests, debug mode or not. The options to do so are simply grayed out in Visual Studio 2012.
This means you simply cannot debug out-of-process code from a unit test. You can only debug code that was directly called in process by the unit test. 
This is a major problem in VS2012 that they need to fix now.
[Share](https://stackoverflow.com/a/15443817 "Short permalink to this answer")
[Improve this answer](https://stackoverflow.com/posts/15443817/edit)
Follow 
Follow this answer to receive notifications
answered Mar 15, 2013 at 23:41
[![Chris Bordeman's user avatar](https://www.gravatar.com/avatar/d894a427bea90911ed86252888c579dd?s=64&d=identicon&r=PG)](https://stackoverflow.com/users/325641/chris-bordeman)
[Chris Bordeman](https://stackoverflow.com/users/325641/chris-bordeman)Chris Bordeman
23688 silver badges2020 bronze badges
4
  * 1
It occurred to me you can use another instance of Visual Studio to debug your out of process code.
– [Chris Bordeman](https://stackoverflow.com/users/325641/chris-bordeman "236 reputation")
Commented Jan 23, 2015 at 17:06
  * 4
@ChrisBordeman that is the only way. Open another instance, execute your tests from there and set your break point during debugging the other project. Come on VS, you are better than that!
– [hylander0](https://stackoverflow.com/users/2554459/hylander0 "1,100 reputation")
Commented Mar 11, 2015 at 19:01
  * 2
Using two instances of VS is a PITA, but works. Alternative: put a break point in UT, run to it, then do Debug->Attach to process. It works just fine. Have no idea why it is restricted through the UI.
– [Borv](https://stackoverflow.com/users/317615/borv "643 reputation")
Commented Jun 16, 2015 at 3:13
  * In my case, I wanted to start a web api project in debug mode while running a test. Using the method @Borv suggested by putting a breakpoint in the test but instead of running Debug -> Attach, I right clicked on the web api project and ran Debug -> Start new instance. This worked for me in VS 2015.
– [Sudsy](https://stackoverflow.com/users/1751892/sudsy "971 reputation")
Commented Nov 18, 2015 at 21:50


[ Add a comment ](https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test "Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”.") |  [ ](https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test "Expand to show all comments on this post")
This answer is useful
7 
Save this answer.
[](https://stackoverflow.com/posts/42400141/timeline)
Show activity on this post.
In VS2015, select:
> Test->Debug->All Tests
Or you can highlight a specific test in the editor and select
> Test->Debug->Selected Tests
[Share](https://stackoverflow.com/a/42400141 "Short permalink to this answer")
[Improve this answer](https://stackoverflow.com/posts/42400141/edit)
Follow 
Follow this answer to receive notifications
answered Feb 22, 2017 at 19:04
[![House's user avatar](https://i.sstatic.net/677eb.png?s=64)](https://stackoverflow.com/users/737147/house)
[House](https://stackoverflow.com/users/737147/house)House
3,51422 gold badges2929 silver badges2929 bronze badges
1
  * This also goes for VS2017.
– [Omar and Lorraine](https://stackoverflow.com/users/5394409/omar-and-lorraine "1,266 reputation")
Commented Aug 10, 2018 at 9:36


[ Add a comment ](https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test "Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”.") |  [ ](https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test "Expand to show all comments on this post")
This answer is useful
1 
Save this answer.
[](https://stackoverflow.com/posts/54679947/timeline)
Show activity on this post.
Under the Test Explorer -> Right click on the specific test case you want to debug -> From the Context Menu click Debug the selected test case option.
[Share](https://stackoverflow.com/a/54679947 "Short permalink to this answer")
[Improve this answer](https://stackoverflow.com/posts/54679947/edit)
Follow 
Follow this answer to receive notifications
answered Feb 13, 2019 at 21:46
[![Hedego's user avatar](https://www.gravatar.com/avatar/acab3c8940c17bbc8847b9f0710388f6?s=64&d=identicon&r=PG)](https://stackoverflow.com/users/1744906/hedego)
[Hedego](https://stackoverflow.com/users/1744906/hedego)Hedego
30433 silver badges1212 bronze badges
[ Add a comment ](https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test "Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”.") |  [ ](https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test "Expand to show all comments on this post")
##  Your Answer 
[ ](https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test)
Thanks for contributing an answer to Stack Overflow!
  * Please be sure to _answer the question_. Provide details and share your research!


But _avoid_ …
  * Asking for help, clarification, or responding to other answers.
  * Making statements based on opinion; back them up with references or personal experience.


To learn more, see our [tips on writing great answers](https://stackoverflow.com/help/how-to-answer).
Draft saved
Draft discarded
### Sign up or [log in](https://stackoverflow.com/users/login?ssrc=question_page&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f5200758%2fcan-i-debug-while-running-a-vs-unit-test%23new-answer)
Submit
### Post as a guest
Name
Email
Required, but never shown
Post Your Answer  Discard 
By clicking “Post Your Answer”, you agree to our [terms of service](https://stackoverflow.com/legal/terms-of-service/public) and acknowledge you have read our [privacy policy](https://stackoverflow.com/legal/privacy-policy).
Start asking to get answers
Find the answer to your question by asking.
[Ask question](https://stackoverflow.com/questions/ask)
Explore related questions
  * [c#](https://stackoverflow.com/questions/tagged/c%23 "show questions tagged 'c#'")
  * [.net](https://stackoverflow.com/questions/tagged/.net "show questions tagged '.net'")
  * [visual-studio](https://stackoverflow.com/questions/tagged/visual-studio "show questions tagged 'visual-studio'")
  * [unit-testing](https://stackoverflow.com/questions/tagged/unit-testing "show questions tagged 'unit-testing'")


See similar questions with these tags.
  * The Overflow Blog 
  * [Do AI coding tools help with imposter syndrome or make it worse?](https://stackoverflow.blog/2025/07/31/do-ai-coding-tools-help-with-imposter-syndrome-or-make-it-worse/)
  * [Diving into the results of the 2025 Developer Survey](https://stackoverflow.blog/2025/08/01/diving-into-the-results-of-the-2025-developer-survey/)
  * Featured on Meta 
  * [Will you help build our new visual identity?](https://meta.stackexchange.com/questions/411312/will-you-help-build-our-new-visual-identity)
  * [Upcoming initiatives on Stack Overflow and across the Stack Exchange network...](https://meta.stackexchange.com/questions/411578/upcoming-initiatives-on-stack-overflow-and-across-the-stack-exchange-network-j "Upcoming initiatives on Stack Overflow and across the Stack Exchange network - July 2025")
  * [Policy: Generative AI (e.g., ChatGPT) is banned](https://meta.stackoverflow.com/questions/421831/policy-generative-ai-e-g-chatgpt-is-banned)
  * [Stack Overflow Experiment: Safely expanding voting access](https://meta.stackoverflow.com/questions/434568/stack-overflow-experiment-safely-expanding-voting-access)
  * [Updated design for the new live activity panel experiment](https://meta.stackoverflow.com/questions/434644/updated-design-for-the-new-live-activity-panel-experiment)
  * [Further Experimentation with Comment Reputation Requirements](https://meta.stackoverflow.com/questions/434624/further-experimentation-with-comment-reputation-requirements)


#### Linked
[ 0 ](https://stackoverflow.com/questions/13179621/is-it-possible-to-interactively-debug-a-web-service-while-its-being-executed-in "Question score \(upvotes - downvotes\)") [Is it possible to interactively debug a web service while it's being executed in a Unit Test in VS2010?](https://stackoverflow.com/questions/13179621/is-it-possible-to-interactively-debug-a-web-service-while-its-being-executed-in?noredirect=1)
#### Related
[ 30 ](https://stackoverflow.com/questions/266716/execute-only-one-unit-test-while-debugging-in-visual-studio-2008 "Question score \(upvotes - downvotes\)") [Execute only one unit test while debugging in Visual Studio 2008](https://stackoverflow.com/questions/266716/execute-only-one-unit-test-while-debugging-in-visual-studio-2008)
[ 17 ](https://stackoverflow.com/questions/1649249/how-can-i-make-a-unit-test-run-in-debug-mode-only "Question score \(upvotes - downvotes\)") [How can I make a unit test run in DEBUG mode only?](https://stackoverflow.com/questions/1649249/how-can-i-make-a-unit-test-run-in-debug-mode-only)
[ 1 ](https://stackoverflow.com/questions/3077768/is-it-possible-to-debug-code-that-is-being-unit-tested-in-visual-studio-2010 "Question score \(upvotes - downvotes\)") [Is it possible to debug code that is being unit tested in Visual Studio 2010?](https://stackoverflow.com/questions/3077768/is-it-possible-to-debug-code-that-is-being-unit-tested-in-visual-studio-2010)
[ 0 ](https://stackoverflow.com/questions/23229422/is-it-possible-to-run-a-unit-test-in-debug-mode "Question score \(upvotes - downvotes\)") [Is it possible to run a unit test in debug mode?](https://stackoverflow.com/questions/23229422/is-it-possible-to-run-a-unit-test-in-debug-mode)
[ 9 ](https://stackoverflow.com/questions/43210794/debugging-mstest-unittests-in-visual-studio-code "Question score \(upvotes - downvotes\)") [Debugging MSTest Unittests in Visual Studio Code](https://stackoverflow.com/questions/43210794/debugging-mstest-unittests-in-visual-studio-code)
[ 10 ](https://stackoverflow.com/questions/47066356/how-does-one-debug-an-mstest-in-vscode "Question score \(upvotes - downvotes\)") [How does one debug an MSTest in VSCode?](https://stackoverflow.com/questions/47066356/how-does-one-debug-an-mstest-in-vscode)
[ 2 ](https://stackoverflow.com/questions/48816030/debug-one-unit-test-in-vscode "Question score \(upvotes - downvotes\)") [Debug one unit test in VSCode](https://stackoverflow.com/questions/48816030/debug-one-unit-test-in-vscode)
[ 1 ](https://stackoverflow.com/questions/49153303/use-a-console-window-when-debugging-unit-tests-in-visual-studio "Question score \(upvotes - downvotes\)") [Use a console window when debugging unit-tests in Visual Studio](https://stackoverflow.com/questions/49153303/use-a-console-window-when-debugging-unit-tests-in-visual-studio)
[ 29 ](https://stackoverflow.com/questions/56290166/how-to-debug-dotnet-test-in-vs-code "Question score \(upvotes - downvotes\)") [How to debug dotnet test in VS Code?](https://stackoverflow.com/questions/56290166/how-to-debug-dotnet-test-in-vs-code)
[ 1 ](https://stackoverflow.com/questions/71062979/debug-your-functions-while-running-unit-tests "Question score \(upvotes - downvotes\)") [Debug your functions while running unit tests?](https://stackoverflow.com/questions/71062979/debug-your-functions-while-running-unit-tests)
####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)
  * [ Hello World C program compiled with vbcc runs in Vamos but not on Amiga 500 (Workbench 1.3) via FS-UAE ](https://retrocomputing.stackexchange.com/questions/31943/hello-world-c-program-compiled-with-vbcc-runs-in-vamos-but-not-on-amiga-500-wor)
  * [ YA Novel from the 40s-50s About a Generation Ship and teen relationships ](https://scifi.stackexchange.com/questions/298415/ya-novel-from-the-40s-50s-about-a-generation-ship-and-teen-relationships)
  * [ It’s all greek to me! ](https://puzzling.stackexchange.com/questions/132776/it-s-all-greek-to-me)
  * [ When CAN'T I use "put out" to replace "produce" when it comes to making things for sale? ](https://ell.stackexchange.com/questions/367590/when-cant-i-use-put-out-to-replace-produce-when-it-comes-to-making-things-f)
  * [ lrcorner with a letter ](https://tex.stackexchange.com/questions/749008/lrcorner-with-a-letter)
  * [ How to Make Lifelong Rulers Responsive to Popular Demand? ](https://worldbuilding.stackexchange.com/questions/268501/how-to-make-lifelong-rulers-responsive-to-popular-demand)
  * [ How to use \unexpanded in context? ](https://tex.stackexchange.com/questions/749018/how-to-use-unexpanded-in-context)
  * [ Should I use lme4::lmer or nlme::lme for a repeated measures frog phonotaxis experiment with low between-subject variance? ](https://stats.stackexchange.com/questions/669180/should-i-use-lme4lmer-or-nlmelme-for-a-repeated-measures-frog-phonotaxis-exp)
  * [ Dold-Kan correspondence for stable infinity categories ](https://mathoverflow.net/questions/498517/dold-kan-correspondence-for-stable-infinity-categories)
  * [ How do I attach non-edible flowers to cake? ](https://cooking.stackexchange.com/questions/132915/how-do-i-attach-non-edible-flowers-to-cake)
  * [ Puzzlin’ Nonogram ](https://puzzling.stackexchange.com/questions/132770/puzzlin-nonogram)
  * [ Where does "kinda" ("kind of") come from? ](https://english.stackexchange.com/questions/632536/where-does-kinda-kind-of-come-from)
  * [ Can a body part of a defeated monster act as an associated object for the Teleport spell to find a creature's lair? ](https://rpg.stackexchange.com/questions/216159/can-a-body-part-of-a-defeated-monster-act-as-an-associated-object-for-the-telepo)
  * [ Is there a reason "replace conditional with table" isn't a standard refactoring? ](https://softwareengineering.stackexchange.com/questions/458882/is-there-a-reason-replace-conditional-with-table-isnt-a-standard-refactoring)
  * [ How to upgrade Ubuntu's minor version? ](https://askubuntu.com/questions/1553830/how-to-upgrade-ubuntus-minor-version)
  * [ Golden-section optimization with complication ](https://codereview.stackexchange.com/questions/297757/golden-section-optimization-with-complication)
  * [ What is the difference between Render Distance and Simulation Distance? ](https://gaming.stackexchange.com/questions/412987/what-is-the-difference-between-render-distance-and-simulation-distance)
  * [ My lab is not equipped for me to do my postdoc work. Should I quit? ](https://academia.stackexchange.com/questions/220650/my-lab-is-not-equipped-for-me-to-do-my-postdoc-work-should-i-quit)
  * [ Derivatives of a function without an expression? Needed for calculating the force from a machine-learned potential ](https://mattermodeling.stackexchange.com/questions/14391/derivatives-of-a-function-without-an-expression-needed-for-calculating-the-forc)
  * [ Why is it dangerous to connect non-isolated device to USB ](https://electronics.stackexchange.com/questions/752917/why-is-it-dangerous-to-connect-non-isolated-device-to-usb)
  * [ How should I talk about definitional uncertainty in seemingly well-defined measurands, arising at high resolutions? ](https://philosophy.stackexchange.com/questions/129179/how-should-i-talk-about-definitional-uncertainty-in-seemingly-well-defined-measu)
  * [ How do capacitors withstand internal electrostatic pressure? ](https://electronics.stackexchange.com/questions/752961/how-do-capacitors-withstand-internal-electrostatic-pressure)
  * [ How did Gauss study mathematics? ](https://hsm.stackexchange.com/questions/18741/how-did-gauss-study-mathematics)
  * [ Identify Last-Layer Perm of a Rubik's Cube ](https://codegolf.stackexchange.com/questions/282873/identify-last-layer-perm-of-a-rubiks-cube)

[ more hot questions ](https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test)
[ ](https://stackoverflow.com/feeds/question/5200758 "Feed of this question and its answers")
#  Subscribe to RSS 
Question feed 
To subscribe to this RSS feed, copy and paste this URL into your RSS reader.
[ ](https://stackoverflow.com/questions/5200758/can-i-debug-while-running-a-vs-unit-test)
lang-cs
#  Why are you flagging this comment?
It contains harassment, bigotry or abuse. 
This comment attacks a person or group. Learn more in our [Code of Conduct](https://stackoverflow.com/conduct/abusive-behavior).
It's unfriendly or unkind. 
This comment is rude or condescending. Learn more in our [Code of Conduct](https://stackoverflow.com/conduct/abusive-behavior).
Not needed. 
This comment is not relevant to the post.
```
  

```

Enter at least 6 characters
Something else. 
A problem not listed above. Try to be as specific as possible.
```
  

```

Enter at least 6 characters
Flag comment Cancel
You have 0 flags left today
[](https://stackoverflow.com)
##### [Stack Overflow](https://stackoverflow.com)
  * [Questions](https://stackoverflow.com/questions)
  * [Help](https://stackoverflow.com/help)
  * [Chat](https://chat.stackoverflow.com/?tab=explore)


##### [Products](https://stackoverflow.co/)
  * [Teams](https://stackoverflow.co/teams/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=footer&utm_content=teams)
  * [Advertising](https://stackoverflow.co/advertising/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=footer&utm_content=advertising)
  * [Talent](https://stackoverflow.co/advertising/employer-branding/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=footer&utm_content=talent)


##### [Company](https://stackoverflow.co/)
  * [About](https://stackoverflow.co/)
  * [Press](https://stackoverflow.co/company/press/)
  * [Work Here](https://stackoverflow.co/company/work-here/)
  * [Legal](https://stackoverflow.com/legal)
  * [Privacy Policy](https://stackoverflow.com/legal/privacy-policy)
  * [Terms of Service](https://stackoverflow.com/legal/terms-of-service/public)
  * [Contact Us](https://stackoverflow.com/contact)
  * Your Privacy Choices 
  * [Cookie Policy](https://policies.stackoverflow.co/stack-overflow/cookie-policy)


##### [Stack Exchange Network](https://stackexchange.com)
  * [ Technology ](https://stackexchange.com/sites#technology)
  * [ Culture & recreation ](https://stackexchange.com/sites#culturerecreation)
  * [ Life & arts ](https://stackexchange.com/sites#lifearts)
  * [ Science ](https://stackexchange.com/sites#science)
  * [ Professional ](https://stackexchange.com/sites#professional)
  * [ Business ](https://stackexchange.com/sites#business)
  * [ API ](https://api.stackexchange.com/)
  * [ Data ](https://data.stackexchange.com/)


  * [Blog](https://stackoverflow.blog?blb=1)
  * [Facebook](https://www.facebook.com/officialstackoverflow/)
  * [Twitter](https://twitter.com/stackoverflow)
  * [LinkedIn](https://linkedin.com/company/stack-overflow)
  * [Instagram](https://www.instagram.com/thestackoverflow)


Site design / logo © 2025 Stack Exchange Inc;  user contributions licensed under  [CC BY-SA](https://stackoverflow.com/help/licensing) .  rev 2025.8.1.32392
 (success: true, hasMarkdown: true, hasDescription: true)
[ivp996a] ✅ Filtered to 6 sources
[ivp996a] Query: "test debug mode" -> Detected ticker: null
[ivp996a] 📝 Preparing context from 6 sources...
[ivp996a] Source 1 context:
[ivp996a]   • Original content length: 14777
[ivp996a]   • Relevant content length: 2000
[ivp996a]   • Success indicator: ""
[ivp996a] Source 2 context:
[ivp996a]   • Original content length: 23609
[ivp996a]   • Relevant content length: 2000
[ivp996a]   • Success indicator: ""
[ivp996a] Source 3 context:
[ivp996a]   • Original content length: 53346
[ivp996a]   • Relevant content length: 2000
[ivp996a]   • Success indicator: ""
[ivp996a] Source 4 context:
[ivp996a]   • Original content length: 43999
[ivp996a]   • Relevant content length: 2000
[ivp996a]   • Success indicator: ""
[ivp996a] Source 5 context:
[ivp996a]   • Original content length: 6187
[ivp996a]   • Relevant content length: 2000
[ivp996a]   • Success indicator: ""
[ivp996a] Source 6 context:
[ivp996a]   • Original content length: 42474
[ivp996a]   • Relevant content length: 2000
[ivp996a]   • Success indicator: ""
[ivp996a] ✅ Final context length: 12793
[ivp996a] 💬 Creating text stream for query: test debug mode
[ivp996a] 📝 Context length: 12793
[ivp996a] ✅ Successful crawls: 6/6
[ivp996a] 🎬 Video sources in final context: 0
[ivp996a] 👁️ Context preview: [1] Debug Unit Tests with Test Explorer - Visual Studio (Windows) | Microsoft Learn
URL: https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022
[ Skip to main content ](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022#main) [ Skip to Ask Learn chat experience ](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022)
##  Microsoft Ignite
November 17–21, 2...
❌ Cache MISS for key: 217c7a9d...
[ivp996a] Generating new LLM response
💾 Cached data for key: 217c7a9d... (TTL: 1800s)
 POST /api/crawlplexity/search 200 in 24325ms
 ✓ Compiled in 498ms
 ✓ Compiled in 554ms
 ✓ Compiled in 375ms
Crawlplexity Chat State: {
  messagesCount: 0,
  sourcesCount: 0,
  isLoading: false,
  error: undefined
}
 GET / 200 in 756ms
 GET /api/models 200 in 262ms
[zym4yk] Crawlplexity Search API called
[zym4yk] 🔍 RAW REQUEST BODY: {
  "messages": [
    {
      "role": "user",
      "content": "debug test working",
      "id": "ilhlce",
      "createdAt": "2025-08-01T11:57:21.640Z"
    }
  ],
  "query": "debug test working",
  "research_type": "comprehensive",
  "model": "gpt-4o-mini",
  "parameters": {
    "temperature": 0.7,
    "max_tokens": 2000,
    "top_p": 1,
    "frequency_penalty": 0,
    "presence_penalty": 0
  },
  "debugMode": false
}
[zym4yk] Query received: debug test working
[zym4yk] Selected model: gpt-4o-mini undefined
[zym4yk] User parameters: {
  temperature: 0.7,
  max_tokens: 2000,
  top_p: 1,
  frequency_penalty: 0,
  presence_penalty: 0
}
[zym4yk] Validated parameters: { temperature: 0.7, max_tokens: 2000, top_p: 1, frequency_penalty: 0 }
[zym4yk] 🐛 DEBUG MODE VALUE: false boolean
[zym4yk] 🐛 DEBUG MODE FROM BODY: false boolean
[zym4yk] Creating debug callback, debugMode: false
[zym4yk] Debug mode disabled, returning undefined callback
[zym4yk] Debug callback created: false
❌ Cache MISS for key: 2acdf533...
🔍 VIDEO DEBUG: Classifying 6 URLs...
🔍 Classifying URL 1/6: https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022
[VideoProcessingClient] Classifying URL: https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022 using http://localhost:11236/classify
🔍 Classifying URL 2/6: https://code.visualstudio.com/docs/debugtest/debugging
[VideoProcessingClient] Classifying URL: https://code.visualstudio.com/docs/debugtest/debugging using http://localhost:11236/classify
🔍 Classifying URL 3/6: https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run
[VideoProcessingClient] Classifying URL: https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run using http://localhost:11236/classify
🔍 Classifying URL 4/6: https://playwright.dev/docs/debug
[VideoProcessingClient] Classifying URL: https://playwright.dev/docs/debug using http://localhost:11236/classify
🔍 Classifying URL 5/6: https://learn.microsoft.com/en-us/answers/questions/1042559/breakpoint-does-not-work-during-the-test-either-wi
[VideoProcessingClient] Classifying URL: https://learn.microsoft.com/en-us/answers/questions/1042559/breakpoint-does-not-work-during-the-test-either-wi using http://localhost:11236/classify
🔍 Classifying URL 6/6: https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests
[VideoProcessingClient] Classifying URL: https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests using http://localhost:11236/classify
[VideoProcessingClient] Classification result for https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run: { type: 'webpage', platform: null, extension: null }
✅ Classification result for https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run: webpage
[VideoProcessingClient] Classification result for https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022: { type: 'webpage', platform: null, extension: null }
✅ Classification result for https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022: webpage
[VideoProcessingClient] Classification result for https://code.visualstudio.com/docs/debugtest/debugging: { type: 'webpage', platform: null, extension: null }
✅ Classification result for https://code.visualstudio.com/docs/debugtest/debugging: webpage
[VideoProcessingClient] Classification result for https://learn.microsoft.com/en-us/answers/questions/1042559/breakpoint-does-not-work-during-the-test-either-wi: { type: 'webpage', platform: null, extension: null }
✅ Classification result for https://learn.microsoft.com/en-us/answers/questions/1042559/breakpoint-does-not-work-during-the-test-either-wi: webpage
[VideoProcessingClient] Classification result for https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests: { type: 'webpage', platform: null, extension: null }
✅ Classification result for https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests: webpage
[VideoProcessingClient] Classification result for https://playwright.dev/docs/debug: { type: 'webpage', platform: null, extension: null }
✅ Classification result for https://playwright.dev/docs/debug: webpage
🌐 Adding to webpage URLs: https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022
🌐 Adding to webpage URLs: https://code.visualstudio.com/docs/debugtest/debugging
🌐 Adding to webpage URLs: https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run
🌐 Adding to webpage URLs: https://playwright.dev/docs/debug
🌐 Adding to webpage URLs: https://learn.microsoft.com/en-us/answers/questions/1042559/breakpoint-does-not-work-during-the-test-either-wi
🌐 Adding to webpage URLs: https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests
📊 URL Classification: 0 videos, 6 webpages
🎥 Video URLs: []
🌐 Webpage URLs: [
  'https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022',
  'https://code.visualstudio.com/docs/debugtest/debugging',
  'https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run',
  'https://playwright.dev/docs/debug',
  'https://learn.microsoft.com/en-us/answers/questions/1042559/breakpoint-does-not-work-during-the-test-either-wi',
  'https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests'
]
⏳ VIDEO DEBUG: Waiting for 6 crawl promises and 0 video promises...
🎬 VIDEO DEBUG: Video processing enabled: true
⏰ VIDEO DEBUG: Video timeout set to 5 minutes per video
✅ VIDEO DEBUG: All promises settled. Total results: 6
📊 Processing Summary:
   • Crawl results: 6 (6 successful)
   • Video results: 0 (0 successful)
   • Video processing was enabled: true
🔄 Combining search results...
🔗 Combining results:
   • Serper organic results: 6
   • Available crawl results: 6
   • Available video results: 0
🔗 Processing search result 1: https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022
   • Has crawl result: true
   • Has video result: false
🌐 Creating webpage result for: https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022
🔗 Processing search result 2: https://code.visualstudio.com/docs/debugtest/debugging
   • Has crawl result: true
   • Has video result: false
🌐 Creating webpage result for: https://code.visualstudio.com/docs/debugtest/debugging
🔗 Processing search result 3: https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run
   • Has crawl result: true
   • Has video result: false
🌐 Creating webpage result for: https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run
🔗 Processing search result 4: https://playwright.dev/docs/debug
   • Has crawl result: true
   • Has video result: false
🌐 Creating webpage result for: https://playwright.dev/docs/debug
🔗 Processing search result 5: https://learn.microsoft.com/en-us/answers/questions/1042559/breakpoint-does-not-work-during-the-test-either-wi
   • Has crawl result: true
   • Has video result: false
🌐 Creating webpage result for: https://learn.microsoft.com/en-us/answers/questions/1042559/breakpoint-does-not-work-during-the-test-either-wi
🔗 Processing search result 6: https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests
   • Has crawl result: true
   • Has video result: false
🌐 Creating webpage result for: https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests
✅ Final combined results: 6
📋 Combined results: 6 total
   • Video content results: 0
   • Webpage results: 6
💾 Cached data for key: 2acdf533... (TTL: 3600s)
[zym4yk] Search completed: {
  totalResults: 6,
  searchTime: 1365,
  crawlTime: 9932,
  successfulCrawls: 6,
  videoResults: 0,
  successfulVideoResults: 0
}
[zym4yk] 🎬 Video results details:
[zym4yk] 🔄 Transforming 6 search results...
[zym4yk] Transforming result 1:
[zym4yk]   • URL: https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022
[zym4yk]   • Type: webpage
[zym4yk]   • Success: true
[zym4yk]   • Content length: 23286
[zym4yk]   • Markdown length: 23286
[zym4yk] Transforming result 2:
[zym4yk]   • URL: https://code.visualstudio.com/docs/debugtest/debugging
[zym4yk]   • Type: webpage
[zym4yk]   • Success: true
[zym4yk]   • Content length: 53346
[zym4yk]   • Markdown length: 53346
[zym4yk] Transforming result 3:
[zym4yk]   • URL: https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run
[zym4yk]   • Type: webpage
[zym4yk]   • Success: true
[zym4yk]   • Content length: 46767
[zym4yk]   • Markdown length: 46767
[zym4yk] Transforming result 4:
[zym4yk]   • URL: https://playwright.dev/docs/debug
[zym4yk]   • Type: webpage
[zym4yk]   • Success: true
[zym4yk]   • Content length: 23609
[zym4yk]   • Markdown length: 23609
[zym4yk] Transforming result 5:
[zym4yk]   • URL: https://learn.microsoft.com/en-us/answers/questions/1042559/breakpoint-does-not-work-during-the-test-either-wi
[zym4yk]   • Type: webpage
[zym4yk]   • Success: true
[zym4yk]   • Content length: 19007
[zym4yk]   • Markdown length: 19007
[zym4yk] Transforming result 6:
[zym4yk]   • URL: https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests
[zym4yk]   • Type: webpage
[zym4yk]   • Success: true
[zym4yk]   • Content length: 43999
[zym4yk]   • Markdown length: 43999
[zym4yk] Source 1 keep: [ Skip to main content ](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022#main) [ Skip to Ask Learn chat experience ](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022)
##  Microsoft Ignite
November 17–21, 2025
Join us to grow your skills, build connections, and explore new technologies. 
[ Register now ](https://aka.ms/msigniteFY26_MSLearn)
Dismiss alert
This browser is no longer supported.
Upgrade to Microsoft Edge to take advantage of the latest features, security updates, and technical support. 
[ Download Microsoft Edge ](https://go.microsoft.com/fwlink/p/?LinkID=2092881%20) [ More info about Internet Explorer and Microsoft Edge ](https://learn.microsoft.com/en-us/lifecycle/faq/internet-explorer-microsoft-edge)
[ Learn ](https://learn.microsoft.com/en-us/) [ ](https://www.microsoft.com)
Suggestions will filter as you type 
[ Sign in ](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022)
  * [ Profile ](https://learn.microsoft.com/en-us/users/me/activity/)
  * [ Settings ](https://learn.microsoft.com/en-us/users/me/settings/)


[ Sign out ](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022)
[ ](https://www.microsoft.com) [ Learn ](https://learn.microsoft.com/en-us/)
  * Discover
    * [ Documentation ](https://learn.microsoft.com/en-us/docs/)
In-depth articles on Microsoft developer tools and technologies
    * [ Training ](https://learn.microsoft.com/en-us/training/)
Personalized learning paths and courses
    * [ Credentials ](https://learn.microsoft.com/en-us/credentials/)
Globally recognized, industry-endorsed credentials
    * [ Q&A ](https://learn.microsoft.com/en-us/answers/)
Technical questions and answers moderated by Microsoft
    * [ Code Samples ](https://learn.microsoft.com/en-us/samples/)
Code sample library for Microsoft developer tools and technologies
    * [ Assessments ](https://learn.microsoft.com/en-us/assessments/)
Interactive, curated guidance and recommendations
    * [ Shows ](https://learn.microsoft.com/en-us/shows/)
Thousands of hours of original programming from Microsoft experts
Microsoft Applied Skills
[ Explore all Applied Skills ](https://learn.microsoft.com/en-us/credentials/applied-skills/?wt.mc_id=appliedskills_marketingspot_webpage_wwl_learnpromo)
Showcase real-world skills. Stand out!
  * Product documentation
    * [ ASP.NET ](https://learn.microsoft.com/en-us/aspnet/)
    * [ Azure ](https://learn.microsoft.com/en-us/azure/)
    * [ Dynamics 365 ](https://learn.microsoft.com/en-us/dynamics365/)
    * [ Microsoft 365 ](https://learn.microsoft.com/en-us/microsoft-365/)
    * [ Microsoft Copilot ](https://learn.microsoft.com/en-us/copilot/)
    * [ Microsoft Entra ](https://learn.microsoft.com/en-us/entra/)
    * [ Microsoft Exchange ](https://learn.microsoft.com/en-us/exchange/)
    * [ Microsoft Fabric ](https://learn.microsoft.com/en-us/fabric/)
    * [ Microsoft Intune ](https://learn.microsoft.com/en-us/mem/)
    * [ .NET ](https://learn.microsoft.com/en-us/dotnet/)
    * [ Power Apps ](https://learn.microsoft.com/en-us/power-apps/)
    * [ Power BI ](https://learn.microsoft.com/en-us/power-bi/)
    * [ Power Platform ](https://learn.microsoft.com/en-us/power-platform/)
    * [ Microsoft Purview ](https://learn.microsoft.com/en-us/purview/)
    * [ SharePoint ](https://learn.microsoft.com/en-us/sharepoint/)
    * [ SQL ](https://learn.microsoft.com/en-us/sql/)
    * [ Microsoft Teams ](https://learn.microsoft.com/en-us/microsoftteams/)
    * [ Visual Studio ](https://learn.microsoft.com/en-us/visualstudio/)
    * [ Windows ](https://learn.microsoft.com/en-us/windows/)
    * [ Windows Server ](https://learn.microsoft.com/en-us/windows-server/)
[ View all products ](https://learn.microsoft.com/en-us/docs/)
Microsoft Applied Skills
[ Explore all Applied Skills ](https://learn.microsoft.com/en-us/credentials/applied-skills/?wt.mc_id=appliedskills_marketingspot_webpage_wwl_learnpromo)
Showcase real-world skills. Stand out!
  * Development languages
    * [ C++ ](https://learn.microsoft.com/en-us/cpp/)
    * [ C# ](https://learn.microsoft.com/en-us/dotnet/csharp/)
    * [ DAX ](https://learn.microsoft.com/en-us/dax/)
    * [ Java ](https://learn.microsoft.com/en-us/java/)
    * [ OData ](https://learn.microsoft.com/en-us/odata/)
    * [ OpenAPI ](https://learn.microsoft.com/en-us/openapi/)
    * [ Power Query M ](https://learn.microsoft.com/en-us/powerquery-m/)
    * [ VBA ](https://learn.microsoft.com/en-us/office/vba/)
Microsoft Applied Skills
[ Explore all Applied Skills ](https://learn.microsoft.com/en-us/credentials/applied-skills/?wt.mc_id=appliedskills_marketingspot_webpage_wwl_learnpromo)
Showcase real-world skills. Stand out!
  * Topics
    * [ Learn for Organizations ](https://learn.microsoft.com/en-us/training/organizations/)
    * [ Artificial intelligence ](https://learn.microsoft.com/en-us/ai/)
    * [ Compliance ](https://learn.microsoft.com/en-us/compliance/)
    * [ DevOps ](https://learn.microsoft.com/en-us/devops/)
    * [ Platform engineering ](https://learn.microsoft.com/en-us/platform-engineering/)
    * [ Security ](https://learn.microsoft.com/en-us/security/)
Microsoft Applied Skills
[ Explore all Applied Skills ](https://learn.microsoft.com/en-us/credentials/applied-skills/?wt.mc_id=appliedskills_marketingspot_webpage_wwl_learnpromo)
Showcase real-world skills. Stand out!


Suggestions will filter as you type 
[ Sign in ](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022)
  * [ Profile ](https://learn.microsoft.com/en-us/users/me/activity/)
  * [ Settings ](https://learn.microsoft.com/en-us/users/me/settings/)


[ Sign out ](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022)
[ Visual Studio IDE  ](https://learn.microsoft.com/en-us/visualstudio/windows/)
  * [ Edit ](https://learn.microsoft.com/en-us/visualstudio/ide/index-writing-code/)
  * [ Build ](https://learn.microsoft.com/en-us/visualstudio/ide/compiling-and-building-in-visual-studio/)
  * [ Debug ](https://learn.microsoft.com/en-us/visualstudio/debugger/)
  * [ Test ](https://learn.microsoft.com/en-us/visualstudio/test/)
  * [ Deploy ](https://learn.microsoft.com/en-us/visualstudio/deployment/)
  * Common tasks
    * [ Improve performance ](https://learn.microsoft.com/en-us/visualstudio/profiling/)
    * [ Access data ](https://learn.microsoft.com/en-us/visualstudio/data-tools/)
    * [ Design user interfaces ](https://learn.microsoft.com/en-us/visualstudio/designers/designing-user-interfaces/)
    * [ DevOps ](https://learn.microsoft.com/en-us/azure/devops/)
    * [ Extend Visual Studio ](https://learn.microsoft.com/en-us/visualstudio/extensibility/)
    * [ Version control ](https://learn.microsoft.com/en-us/visualstudio/version-control/)
  * [ Troubleshooting ](https://learn.microsoft.com/en-us/troubleshoot/developer/visualstudio/)
  * Resources
    * [ visualstudio.microsoft.com ](https://visualstudio.microsoft.com/)
    * [ Visual Studio blog ](https://devblogs.microsoft.com/visualstudio/)
    * [ Downloads ](https://www.visualstudio.com/downloads/)
    * [ Release notes ](https://learn.microsoft.com/en-us/visualstudio/releases/2022/release-notes/)
    * [ Support ](https://www.visualstudio.com/vs/support/)
    * [ Subscriptions ](https://www.visualstudio.com/subscriptions/)
    * [ Marketplace ](https://marketplace.visualstudio.com/vs)
  * More
    * [ Edit ](https://learn.microsoft.com/en-us/visualstudio/ide/index-writing-code/)
    * [ Build ](https://learn.microsoft.com/en-us/visualstudio/ide/compiling-and-building-in-visual-studio/)
    * [ Debug ](https://learn.microsoft.com/en-us/visualstudio/debugger/)
    * [ Test ](https://learn.microsoft.com/en-us/visualstudio/test/)
    * [ Deploy ](https://learn.microsoft.com/en-us/visualstudio/deployment/)
    * Common tasks
      * [ Improve performance ](https://learn.microsoft.com/en-us/visualstudio/profiling/)
      * [ Access data ](https://learn.microsoft.com/en-us/visualstudio/data-tools/)
      * [ Design user interfaces ](https://learn.microsoft.com/en-us/visualstudio/designers/designing-user-interfaces/)
      * [ DevOps ](https://learn.microsoft.com/en-us/azure/devops/)
      * [ Extend Visual Studio ](https://learn.microsoft.com/en-us/visualstudio/extensibility/)
      * [ Version control ](https://learn.microsoft.com/en-us/visualstudio/version-control/)
    * [ Troubleshooting ](https://learn.microsoft.com/en-us/troubleshoot/developer/visualstudio/)
    * Resources
      * [ visualstudio.microsoft.com ](https://visualstudio.microsoft.com/)
      * [ Visual Studio blog ](https://devblogs.microsoft.com/visualstudio/)
      * [ Downloads ](https://www.visualstudio.com/downloads/)
      * [ Release notes ](https://learn.microsoft.com/en-us/visualstudio/releases/2022/release-notes/)
      * [ Support ](https://www.visualstudio.com/vs/support/)
      * [ Subscriptions ](https://www.visualstudio.com/subscriptions/)
      * [ Marketplace ](https://marketplace.visualstudio.com/vs)


[ Download Visual Studio ](https://visualstudio.microsoft.com/downloads/?cid=learn-navbar-download-cta)
Version Visual Studio 2022
  * [2022](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022)
  * [2019](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2019)
  * [Previous versions](https://learn.microsoft.com/previous-versions/visualstudio)


Search
Suggestions will filter as you type 
  * [Testing tools in Visual Studio](https://learn.microsoft.com/en-us/visualstudio/test/?view=vs-2022)
  *     * [Unit test basics](https://learn.microsoft.com/en-us/visualstudio/test/unit-test-basics?view=vs-2022)
    * [Create unit tests from code](https://learn.microsoft.com/en-us/visualstudio/test/create-unit-tests-menu?view=vs-2022)
    * [Install third-party unit test frameworks](https://learn.microsoft.com/en-us/visualstudio/test/install-third-party-unit-test-frameworks?view=vs-2022)
    *       * [Run unit tests with Test Explorer](https://learn.microsoft.com/en-us/visualstudio/test/run-unit-tests-with-test-explorer?view=vs-2022)
      * [Debug unit tests with Test Explorer](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022)
      * [Test Explorer FAQ](https://learn.microsoft.com/en-us/visualstudio/test/test-explorer-faq?view=vs-2022)
    * [Run tests from the command line](https://learn.microsoft.com/en-us/visualstudio/test/vstest-console-options?view=vs-2022)
    * [Run a unit test as a 64-bit process](https://learn.microsoft.com/en-us/visualstudio/test/run-a-unit-test-as-a-64-bit-process?view=vs-2022)
    * [Configure unit tests by using a .runsettings file](https://learn.microsoft.com/en-us/visualstudio/test/configure-unit-tests-by-using-a-dot-runsettings-file?view=vs-2022)
    * [Test Execution with Hot Reload](https://learn.microsoft.com/en-us/visualstudio/test/test-execution-with-hot-reload?view=vs-2022)
  * [Remote testing in Visual Studio](https://learn.microsoft.com/en-us/visualstudio/test/remote-testing?view=vs-2022)


Download PDF
Table of contents  Exit editor mode
  1. [ Learn ](https://learn.microsoft.com/en-us/?view=vs-2022)
  2. [ Visual Studio ](https://learn.microsoft.com/en-us/visualstudio/windows/?view=vs-2022)
  3. [ Testing ](https://learn.microsoft.com/en-us/visualstudio/test/?view=vs-2022)


  1. [Learn](https://learn.microsoft.com/en-us/?view=vs-2022)
  2. [Visual Studio](https://learn.microsoft.com/en-us/visualstudio/windows/?view=vs-2022)
  3. [Testing](https://learn.microsoft.com/en-us/visualstudio/test/?view=vs-2022)


Ask Learn Ask Learn Focus mode
Table of contents [ Read in English ](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022) Add to Collections Add to plan [ Edit ](https://github.com/MicrosoftDocs/visualstudio-docs/blob/main/docs/test/debug-unit-tests-with-test-explorer.md)
* * *
#### Share via
[ Facebook ](https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fvisualstudio%2Ftest%2Fdebug-unit-tests-with-test-explorer%3Fview%3Dvs-2022%26WT.mc_id%3Dfacebook) [ x.com ](https://twitter.com/intent/tweet?original_referer=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fvisualstudio%2Ftest%2Fdebug-unit-tests-with-test-explorer%3Fview%3Dvs-2022%26WT.mc_id%3Dtwitter&text=%0A%0D%0Ahttps%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fvisualstudio%2Ftest%2Fdebug-unit-tests-with-test-explorer%3Fview%3Dvs-2022%26WT.mc_id%3Dtwitter&tw_p=tweetbutton&url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fvisualstudio%2Ftest%2Fdebug-unit-tests-with-test-explorer%3Fview%3Dvs-2022%26WT.mc_id%3Dtwitter) [ LinkedIn ](https://www.linkedin.com/feed/?shareActive=true&text=%0A%0D%0Ahttps%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fvisualstudio%2Ftest%2Fdebug-unit-tests-with-test-explorer%3Fview%3Dvs-2022%26WT.mc_id%3Dlinkedin) Email
* * *
Print
* * *
Note
Access to this page requires authorization. You can try [signing in](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022) or changing directories. 
Access to this page requires authorization. You can try changing directories. 
# Debug and analyze unit tests by using Test Explorer
  * 03/31/2025


Feedback
##  In this article
  1. [Diagnose performance problems with a test method](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022#diagnose-performance-problems-with-a-test-method)
  2. [Get AI assistance to debug tests](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022#get-ai-assistance-to-debug-tests)
  3. [Related content](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022#related-content)


You can use Test Explorer to start a debugging session for your tests. Stepping through your code with the Visual Studio debugger seamlessly takes you back and forth between the unit tests and the project under test.
To start debugging:
  1. In the Visual Studio editor, set a breakpoint in one or more test methods that you want to debug.
Because test methods can run in any order, set breakpoints in all the test methods that you want to debug.
  2. In Test Explorer, select the test methods, right-click somewhere on the pane, and then select **Debug**.
![Screenshot that shows test execution details.](https://learn.microsoft.com/en-us/visualstudio/test/media/vs-2022/test-explorer-debug.png?view=vs-2022)
![Screenshot that shows test execution details.](https://learn.microsoft.com/en-us/visualstudio/test/media/vs-2019/test-explorer-debug.png?view=vs-2022)


For more information about the debugger, see [Debug in Visual Studio](https://learn.microsoft.com/en-us/visualstudio/debugger/debugger-feature-tour?view=vs-2022).
[](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022#diagnose-performance-problems-with-a-test-method)
## Diagnose performance problems with a test method
Starting in Visual Studio 2022 version 17.8, you can use any applicable tool in the Performance Profiler to help improve your code, and not just the Instrumentation tool. You can profile small units of work in isolation, make changes, and then remeasure and validate the impact of the changes.
To diagnose why a test method is taking more time than you'd like, or using more memory than you'd like:
  1. Right-click the method in Test Explorer, and then select **Profile**.
  2. In the Performance Profiler, select a profiling tool to test your code.


For more information, see [this blog post](https://devblogs.microsoft.com/visualstudio/a-unit-of-profiling-makes-the-allocations-go-away/) or see [Collect profiling data on release builds](https://learn.microsoft.com/en-us/visualstudio/profiling/running-profiling-tools-with-or-without-the-debugger?view=vs-2022#collect-profiling-data-on-release-builds).
To diagnose why a test method is taking too much time:
  * Right-click the method in Test Explorer, and then select **Profile**.


For more information, see [Instrumentation profiling report](https://learn.microsoft.com/en-us/visualstudio/profiling/understanding-instrumentation-data-values?view=vs-2017&preserve-view=true).
This feature is not currently supported for .NET Core.
[](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022#get-ai-assistance-to-debug-tests)
## Get AI assistance to debug tests
Starting in Visual Studio 2022 version 17.12 Preview 2, you can get quick assistance from GitHub Copilot to debug tests if you have an [active Copilot subscription](https://learn.microsoft.com/en-us/visualstudio/ide/visual-studio-github-copilot-chat?view=vs-2022#prerequisites). To get help, right-click a failed test in Test Explorer, and then select of the following commands:
  * **Explain failure with Copilot**
  * **Debug with Copilot**


![Screenshot of debugging tests with Copilot.](https://learn.microsoft.com/en-us/visualstudio/test/media/vs-2022/debug-tests-with-copilot.png?view=vs-2022)
If you debug with GitHub Copilot:
  1. It provides you with a debug plan.
  2. It sets appropriate breakpoints and watch variables.
  3. It starts the debug session.


When the debugger hits the breakpoint, it provides GitHub Copilot with values for the watched variables. Copilot then determines your next step: either continue debugging or fix the problem code. You can continue the Copilot Chat conversation until you have a passing test.
[](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022#related-content)
## Related content
  * [Unit test your code](https://learn.microsoft.com/en-us/visualstudio/test/unit-test-your-code?view=vs-2022)
  * [Run unit tests with Test Explorer](https://learn.microsoft.com/en-us/visualstudio/test/run-unit-tests-with-test-explorer?view=vs-2022)
  * [Test Explorer FAQ](https://learn.microsoft.com/en-us/visualstudio/test/test-explorer-faq?view=vs-2022)


* * *
## Feedback
Was this page helpful? 
Yes No
* * *
##  Additional resources 
  * [ Run Unit Tests with Test Explorer - Visual Studio (Windows) ](https://learn.microsoft.com/en-us/visualstudio/test/run-unit-tests-with-test-explorer?source=recommendations)
Run tests by using Test Explorer in Visual Studio, enable automatic tests after build, view results, group and filter the test list, create playlists, and use shortcuts. 
  * [ Review Test Explorer FAQ Issues and Answers - Visual Studio (Windows) ](https://learn.microsoft.com/en-us/visualstudio/test/test-explorer-faq?source=recommendations)
Review frequently asked questions (FAQs) about Visual Studio Test Explorer, which include some common troubleshooting scenarios. 
  * [ Configure process architecture for unit tests - Visual Studio (Windows) ](https://learn.microsoft.com/en-us/visualstudio/test/run-a-unit-test-as-a-64-bit-process?source=recommendations)
Configure process architecture for unit tests and run unit tests and capture code coverage information as a 64-bit process, and recompile code or tests compiled as 32-bit/x86 to run them as a 64-bit process. 
  * [ Create, run, and customize C# unit tests - Visual Studio (Windows) ](https://learn.microsoft.com/en-us/visualstudio/test/walkthrough-creating-and-running-unit-tests-for-managed-code?source=recommendations)
Learn how to create, run, and customize a series of unit tests using the Microsoft unit test framework for managed code and Visual Studio Test Explorer. 
  * [ Create a Unit Test Project - Visual Studio (Windows) ](https://learn.microsoft.com/en-us/visualstudio/test/create-a-unit-test-project?source=recommendations)
Learn how to create a unit test project. The test project can be in the same solution as the production code, or it can be in a separate solution. 
  * [ Configure and use Live Unit Testing - Visual Studio (Windows) ](https://learn.microsoft.com/en-us/visualstudio/test/live-unit-testing?source=recommendations)
Learn about Live Unit Testing during application development, including supported frameworks and how to configure Live Unit Testing. 
  * [ Determine code testing coverage - Visual Studio (Windows) ](https://learn.microsoft.com/en-us/visualstudio/test/using-code-coverage-to-determine-how-much-code-is-being-tested?source=recommendations)
Learn how to use the code coverage feature of Visual Studio to determine what proportion of your project code is being tested by coded tests. 


Show 4 more
Module 
[ Interactively debug .NET apps with the Visual Studio debugger - Training ](https://learn.microsoft.com/en-us/training/modules/dotnet-debug-visual-studio/?source=recommendations)
Learn how to efficiently debug your .NET app by using Visual Studio to fix your bugs quickly. Analyze and fix your C# applications by using the interactive debugger within Visual Studio. 
Certification 
[ GitHub Copilot - Certifications ](https://learn.microsoft.com/en-us/credentials/certifications/github-copilot/?source=recommendations)
The GitHub Copilot certification exam evaluates your skill in using the AI-driven code completion tool in various programming languages, certifying your capability to optimize software development workflows efficiently. 
##  In this article 
  1. [Diagnose performance problems with a test method](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022#diagnose-performance-problems-with-a-test-method)
  2. [Get AI assistance to debug tests](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022#get-ai-assistance-to-debug-tests)
  3. [Related content](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022#related-content)


Was this page helpful?
Yes No
## 
Ask Learn
Preview
Ask Learn is an AI assistant that can answer questions, clarify concepts, and define terms using trusted Microsoft documentation.
Please sign in to use Ask Learn.
[ Sign in ](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022)
[English (United States)](https://learn.microsoft.com/en-us/locale?target=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fvisualstudio%2Ftest%2Fdebug-unit-tests-with-test-explorer%3Fview%3Dvs-2022)
[ Your Privacy Choices](https://aka.ms/yourcaliforniaprivacychoices)
Theme
  * Light 
  * Dark 
  * High contrast 


  * [AI Disclaimer](https://learn.microsoft.com/en-us/principles-for-ai-generated-content)
  * [Previous Versions](https://learn.microsoft.com/en-us/previous-versions/)
  * [Blog](https://techcommunity.microsoft.com/t5/microsoft-learn-blog/bg-p/MicrosoftLearnBlog)
  * [Contribute](https://learn.microsoft.com/en-us/contribute)
  * [Privacy](https://go.microsoft.com/fwlink/?LinkId=521839)
  * [Terms of Use](https://learn.microsoft.com/en-us/legal/termsofuse)
  * [Trademarks](https://www.microsoft.com/legal/intellectualproperty/Trademarks/)
  * © Microsoft 2025


 (success: true, hasMarkdown: true, hasDescription: true)
[zym4yk] Source 2 keep: [Visual Studio Code](https://code.visualstudio.com/)
  * [Docs](https://code.visualstudio.com/docs)
  * [Updates](https://code.visualstudio.com/updates)
  * [Blog](https://code.visualstudio.com/blogs)
  * [API](https://code.visualstudio.com/api)
  * [Extensions](https://marketplace.visualstudio.com/VSCode)
  * [FAQ](https://code.visualstudio.com/docs/supporting/faq)
  * [Search](https://code.visualstudio.com/Search)
  * [MCP](https://code.visualstudio.com/mcp)


  * ![Switch to the dark theme](https://code.visualstudio.com/assets/icons/theme-light.svg) ![Switch to the light theme](https://code.visualstudio.com/assets/icons/theme-dark.svg)
  * [ ![Search](https://code.visualstudio.com/assets/icons/search.svg) ![Search](https://code.visualstudio.com/assets/icons/search-dark.svg) ](https://code.visualstudio.com/Search "Search")
  * ![Search](https://code.visualstudio.com/assets/icons/search-dark.svg) ![Search](https://code.visualstudio.com/assets/icons/search.svg)
  * [ Download](https://code.visualstudio.com/Download)


Try [MCP servers](https://code.visualstudio.com/mcp) to extend agent mode in VS Code!
Dismiss this update
  * [Overview](https://code.visualstudio.com/docs)
  * [Setup](https://code.visualstudio.com/docs/debugtest/debugging#setup-articles)
    * [Overview](https://code.visualstudio.com/docs/setup/setup-overview)
    * [Linux](https://code.visualstudio.com/docs/setup/linux)
    * [macOS](https://code.visualstudio.com/docs/setup/mac)
    * [Windows](https://code.visualstudio.com/docs/setup/windows)
    * [VS Code for the Web](https://code.visualstudio.com/docs/setup/vscode-web)
    * [Raspberry Pi](https://code.visualstudio.com/docs/setup/raspberry-pi)
    * [Network](https://code.visualstudio.com/docs/setup/network)
    * [Additional Components](https://code.visualstudio.com/docs/setup/additional-components)
    * [Enterprise](https://code.visualstudio.com/docs/setup/enterprise)
    * [Uninstall](https://code.visualstudio.com/docs/setup/uninstall)
  * [Get Started](https://code.visualstudio.com/docs/debugtest/debugging#getstarted-articles)
    * [VS Code Tutorial](https://code.visualstudio.com/docs/getstarted/getting-started)
    * [Copilot Quickstart](https://code.visualstudio.com/docs/getstarted/copilot-quickstart)
    * [User Interface](https://code.visualstudio.com/docs/getstarted/userinterface)
    * [Personalize VS Code](https://code.visualstudio.com/docs/getstarted/personalize-vscode)
    * [Install Extensions](https://code.visualstudio.com/docs/getstarted/extensions)
    * [Tips and Tricks](https://code.visualstudio.com/docs/getstarted/tips-and-tricks)
    * [Intro Videos](https://code.visualstudio.com/docs/getstarted/introvideos)
  * [Configure](https://code.visualstudio.com/docs/debugtest/debugging#configure-articles)
    * [Display Language](https://code.visualstudio.com/docs/configure/locales)
    * [Layout](https://code.visualstudio.com/docs/configure/custom-layout)
    * [Keyboard Shortcuts](https://code.visualstudio.com/docs/configure/keybindings)
    * [Settings](https://code.visualstudio.com/docs/configure/settings)
    * [Settings Sync](https://code.visualstudio.com/docs/configure/settings-sync)
    * Extensions
      * [Extension Marketplace](https://code.visualstudio.com/docs/configure/extensions/extension-marketplace)
      * [Extension Runtime Security](https://code.visualstudio.com/docs/configure/extensions/extension-runtime-security)
    * [Themes](https://code.visualstudio.com/docs/configure/themes)
    * [Profiles](https://code.visualstudio.com/docs/configure/profiles)
    * [Accessibility](https://code.visualstudio.com/docs/debugtest/debugging#configure-accessibility-articles)
      * [Overview](https://code.visualstudio.com/docs/configure/accessibility/accessibility)
      * [Voice Interactions](https://code.visualstudio.com/docs/configure/accessibility/voice)
    * [Command Line Interface](https://code.visualstudio.com/docs/configure/command-line)
    * [Telemetry](https://code.visualstudio.com/docs/configure/telemetry)
  * [Edit code](https://code.visualstudio.com/docs/debugtest/debugging#editing-articles)
    * [Basic Editing](https://code.visualstudio.com/docs/editing/codebasics)
    * [IntelliSense](https://code.visualstudio.com/docs/editing/intellisense)
    * [Code Navigation](https://code.visualstudio.com/docs/editing/editingevolved)
    * [Refactoring](https://code.visualstudio.com/docs/editing/refactoring)
    * [Snippets](https://code.visualstudio.com/docs/editing/userdefinedsnippets)
    * [Workspaces](https://code.visualstudio.com/docs/debugtest/debugging#editing-workspaces-articles)
      * [Overview](https://code.visualstudio.com/docs/editing/workspaces/workspaces)
      * [Multi-root Workspaces](https://code.visualstudio.com/docs/editing/workspaces/multi-root-workspaces)
      * [Workspace Trust](https://code.visualstudio.com/docs/editing/workspaces/workspace-trust)
  * [Build, Debug, Test](https://code.visualstudio.com/docs/debugtest/debugging#debugtest-articles)
    * [Tasks](https://code.visualstudio.com/docs/debugtest/tasks)
    * [Debugging](https://code.visualstudio.com/docs/debugtest/debugging)
    * [Debug Configuration](https://code.visualstudio.com/docs/debugtest/debugging-configuration)
    * [Testing](https://code.visualstudio.com/docs/debugtest/testing)
    * [Port Forwarding](https://code.visualstudio.com/docs/debugtest/port-forwarding)
  * [GitHub Copilot](https://code.visualstudio.com/docs/debugtest/debugging#copilot-articles)
    * [Overview](https://code.visualstudio.com/docs/copilot/overview)
    * [Setup](https://code.visualstudio.com/docs/copilot/setup)
    * [Quickstart](https://code.visualstudio.com/docs/copilot/getting-started)
    * Chat
      * [Chat Overview](https://code.visualstudio.com/docs/copilot/chat/copilot-chat)
      * [Chat Tutorial](https://code.visualstudio.com/docs/copilot/chat/getting-started-chat)
      * [Manage Context](https://code.visualstudio.com/docs/copilot/chat/copilot-chat-context)
      * [Chat Modes](https://code.visualstudio.com/docs/copilot/chat/chat-modes)
      * [Ask Mode](https://code.visualstudio.com/docs/copilot/chat/chat-ask-mode)
      * [Edit Mode](https://code.visualstudio.com/docs/copilot/chat/copilot-edits)
      * [Agent Mode](https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode)
      * [MCP Servers](https://code.visualstudio.com/docs/copilot/chat/mcp-servers)
      * [Inline Chat](https://code.visualstudio.com/docs/copilot/chat/inline-chat)
      * [Prompt Engineering](https://code.visualstudio.com/docs/copilot/chat/prompt-crafting)
    * [Code Completions](https://code.visualstudio.com/docs/copilot/ai-powered-suggestions)
    * [Copilot Coding Agent](https://code.visualstudio.com/docs/copilot/copilot-coding-agent)
    * [Smart Actions](https://code.visualstudio.com/docs/copilot/copilot-smart-actions)
    * [Customize Copilot](https://code.visualstudio.com/docs/copilot/copilot-customization)
    * [Language Models](https://code.visualstudio.com/docs/copilot/language-models)
    * Guides
      * [Edit Notebooks with AI](https://code.visualstudio.com/docs/copilot/guides/notebooks-with-ai)
      * [Test with AI](https://code.visualstudio.com/docs/copilot/guides/test-with-copilot)
      * [Debug with AI](https://code.visualstudio.com/docs/copilot/guides/debug-with-copilot)
      * [MCP Dev Guide](https://code.visualstudio.com/docs/copilot/guides/mcp-developer-guide)
    * [Tips and Tricks](https://code.visualstudio.com/docs/copilot/copilot-tips-and-tricks)
    * [FAQ](https://code.visualstudio.com/docs/copilot/faq)
    * [Reference](https://code.visualstudio.com/docs/debugtest/debugging#copilot-reference-articles)
      * [Cheat Sheet](https://code.visualstudio.com/docs/copilot/reference/copilot-vscode-features)
      * [Settings Reference](https://code.visualstudio.com/docs/copilot/reference/copilot-settings)
      * [Workspace Context](https://code.visualstudio.com/docs/copilot/reference/workspace-context)
  * [Source Control](https://code.visualstudio.com/docs/debugtest/debugging#sourcecontrol-articles)
    * [Overview](https://code.visualstudio.com/docs/sourcecontrol/overview)
    * [Introduction to Git](https://code.visualstudio.com/docs/sourcecontrol/intro-to-git)
    * [Collaborate on GitHub](https://code.visualstudio.com/docs/sourcecontrol/github)
    * [FAQ](https://code.visualstudio.com/docs/sourcecontrol/faq)
  * [Terminal](https://code.visualstudio.com/docs/debugtest/debugging#terminal-articles)
    * [Getting Started Tutorial](https://code.visualstudio.com/docs/terminal/getting-started)
    * [Terminal Basics](https://code.visualstudio.com/docs/terminal/basics)
    * [Terminal Profiles](https://code.visualstudio.com/docs/terminal/profiles)
    * [Shell Integration](https://code.visualstudio.com/docs/terminal/shell-integration)
    * [Appearance](https://code.visualstudio.com/docs/terminal/appearance)
    * [Advanced](https://code.visualstudio.com/docs/terminal/advanced)
  * [Languages](https://code.visualstudio.com/docs/debugtest/debugging#languages-articles)
    * [Overview](https://code.visualstudio.com/docs/languages/overview)
    * [JavaScript](https://code.visualstudio.com/docs/languages/javascript)
    * [JSON](https://code.visualstudio.com/docs/languages/json)
    * [HTML](https://code.visualstudio.com/docs/languages/html)
    * [Emmet](https://code.visualstudio.com/docs/languages/emmet)
    * [CSS, SCSS and Less](https://code.visualstudio.com/docs/languages/css)
    * [TypeScript](https://code.visualstudio.com/docs/languages/typescript)
    * [Markdown](https://code.visualstudio.com/docs/languages/markdown)
    * [PowerShell](https://code.visualstudio.com/docs/languages/powershell)
    * [C++](https://code.visualstudio.com/docs/languages/cpp)
    * [Java](https://code.visualstudio.com/docs/languages/java)
    * [PHP](https://code.visualstudio.com/docs/languages/php)
    * [Python](https://code.visualstudio.com/docs/languages/python)
    * [Julia](https://code.visualstudio.com/docs/languages/julia)
    * [R](https://code.visualstudio.com/docs/languages/r)
    * [Ruby](https://code.visualstudio.com/docs/languages/ruby)
    * [Rust](https://code.visualstudio.com/docs/languages/rust)
    * [Go](https://code.visualstudio.com/docs/languages/go)
    * [T-SQL](https://code.visualstudio.com/docs/languages/tsql)
    * [C#](https://code.visualstudio.com/docs/languages/csharp)
    * [.NET](https://code.visualstudio.com/docs/languages/dotnet)
    * [Polyglot](https://code.visualstudio.com/docs/languages/polyglot)
    * [Swift](https://code.visualstudio.com/docs/languages/swift)
  * [Node.js / JavaScript](https://code.visualstudio.com/docs/debugtest/debugging#nodejs-articles)
    * [Working with JavaScript](https://code.visualstudio.com/docs/nodejs/working-with-javascript)
    * [Node.js Tutorial](https://code.visualstudio.com/docs/nodejs/nodejs-tutorial)
    * [Node.js Debugging](https://code.visualstudio.com/docs/nodejs/nodejs-debugging)
    * [Deploy Node.js Apps](https://code.visualstudio.com/docs/nodejs/nodejs-deployment)
    * [Browser Debugging](https://code.visualstudio.com/docs/nodejs/browser-debugging)
    * [Angular Tutorial](https://code.visualstudio.com/docs/nodejs/angular-tutorial)
    * [React Tutorial](https://code.visualstudio.com/docs/nodejs/reactjs-tutorial)
    * [Vue Tutorial](https://code.visualstudio.com/docs/nodejs/vuejs-tutorial)
    * [Debugging Recipes](https://code.visualstudio.com/docs/nodejs/debugging-recipes)
    * [Performance Profiling](https://code.visualstudio.com/docs/nodejs/profiling)
    * [Extensions](https://code.visualstudio.com/docs/nodejs/extensions)
  * [TypeScript](https://code.visualstudio.com/docs/debugtest/debugging#typescript-articles)
    * [Tutorial](https://code.visualstudio.com/docs/typescript/typescript-tutorial)
    * [Compiling](https://code.visualstudio.com/docs/typescript/typescript-compiling)
    * [Editing](https://code.visualstudio.com/docs/typescript/typescript-editing)
    * [Refactoring](https://code.visualstudio.com/docs/typescript/typescript-refactoring)
    * [Debugging](https://code.visualstudio.com/docs/typescript/typescript-debugging)
  * [Python](https://code.visualstudio.com/docs/debugtest/debugging#python-articles)
    * [Quick Start](https://code.visualstudio.com/docs/python/python-quick-start)
    * [Tutorial](https://code.visualstudio.com/docs/python/python-tutorial)
    * [Run Python Code](https://code.visualstudio.com/docs/python/run)
    * [Editing](https://code.visualstudio.com/docs/python/editing)
    * [Linting](https://code.visualstudio.com/docs/python/linting)
    * [Formatting](https://code.visualstudio.com/docs/python/formatting)
    * [Debugging](https://code.visualstudio.com/docs/python/debugging)
    * [Environments](https://code.visualstudio.com/docs/python/environments)
    * [Testing](https://code.visualstudio.com/docs/python/testing)
    * [Python Interactive](https://code.visualstudio.com/docs/python/jupyter-support-py)
    * [Django Tutorial](https://code.visualstudio.com/docs/python/tutorial-django)
    * [FastAPI Tutorial](https://code.visualstudio.com/docs/python/tutorial-fastapi)
    * [Flask Tutorial](https://code.visualstudio.com/docs/python/tutorial-flask)
    * [Create Containers](https://code.visualstudio.com/docs/python/tutorial-create-containers)
    * [Deploy Python Apps](https://code.visualstudio.com/docs/python/python-on-azure)
    * [Python in the Web](https://code.visualstudio.com/docs/python/python-web)
    * [Settings Reference](https://code.visualstudio.com/docs/python/settings-reference)
  * [Java](https://code.visualstudio.com/docs/debugtest/debugging#java-articles)
    * [Getting Started](https://code.visualstudio.com/docs/java/java-tutorial)
    * [Navigate and Edit](https://code.visualstudio.com/docs/java/java-editing)
    * [Refactoring](https://code.visualstudio.com/docs/java/java-refactoring)
    * [Formatting and Linting](https://code.visualstudio.com/docs/java/java-linting)
    * [Project Management](https://code.visualstudio.com/docs/java/java-project)
    * [Build Tools](https://code.visualstudio.com/docs/java/java-build)
    * [Run and Debug](https://code.visualstudio.com/docs/java/java-debugging)
    * [Testing](https://code.visualstudio.com/docs/java/java-testing)
    * [Spring Boot](https://code.visualstudio.com/docs/java/java-spring-boot)
    * [Application Servers](https://code.visualstudio.com/docs/java/java-tomcat-jetty)
    * [Deploy Java Apps](https://code.visualstudio.com/docs/java/java-on-azure)
    * [GUI Applications](https://code.visualstudio.com/docs/java/java-gui)
    * [Extensions](https://code.visualstudio.com/docs/java/extensions)
    * [FAQ](https://code.visualstudio.com/docs/java/java-faq)
  * [C++](https://code.visualstudio.com/docs/debugtest/debugging#cpp-articles)
    * [Intro Videos](https://code.visualstudio.com/docs/cpp/introvideos-cpp)
    * [GCC on Linux](https://code.visualstudio.com/docs/cpp/config-linux)
    * [GCC on Windows](https://code.visualstudio.com/docs/cpp/config-mingw)
    * [GCC on Windows Subsystem for Linux](https://code.visualstudio.com/docs/cpp/config-wsl)
    * [Clang on macOS](https://code.visualstudio.com/docs/cpp/config-clang-mac)
    * [Microsoft C++ on Windows](https://code.visualstudio.com/docs/cpp/config-msvc)
    * [Build with CMake](https://code.visualstudio.com/docs/cpp/build-with-cmake)
    * [CMake Tools on Linux](https://code.visualstudio.com/docs/cpp/cmake-linux)
    * [CMake Quick Start](https://code.visualstudio.com/docs/cpp/cmake-quickstart)
    * [Editing and Navigating](https://code.visualstudio.com/docs/cpp/cpp-ide)
    * [Debugging](https://code.visualstudio.com/docs/cpp/cpp-debug)
    * [Configure Debugging](https://code.visualstudio.com/docs/cpp/launch-json-reference)
    * [Refactoring](https://code.visualstudio.com/docs/cpp/cpp-refactoring)
    * [Settings Reference](https://code.visualstudio.com/docs/cpp/customize-cpp-settings)
    * [Configure IntelliSense](https://code.visualstudio.com/docs/cpp/configure-intellisense)
    * [Configure IntelliSense for Cross-Compiling](https://code.visualstudio.com/docs/cpp/configure-intellisense-crosscompilation)
    * [FAQ](https://code.visualstudio.com/docs/cpp/faq-cpp)
  * [C#](https://code.visualstudio.com/docs/debugtest/debugging#csharp-articles)
    * [Intro Videos](https://code.visualstudio.com/docs/csharp/introvideos-csharp)
    * [Get Started](https://code.visualstudio.com/docs/csharp/get-started)
    * [Navigate and Edit](https://code.visualstudio.com/docs/csharp/navigate-edit)
    * [IntelliCode](https://code.visualstudio.com/docs/csharp/intellicode)
    * [Refactoring](https://code.visualstudio.com/docs/csharp/refactoring)
    * [Formatting and Linting](https://code.visualstudio.com/docs/csharp/formatting-linting)
    * [Project Management](https://code.visualstudio.com/docs/csharp/project-management)
    * [Build Tools](https://code.visualstudio.com/docs/csharp/build-tools)
    * [Package Management](https://code.visualstudio.com/docs/csharp/package-management)
    * [Run and Debug](https://code.visualstudio.com/docs/csharp/debugging)
    * [Testing](https://code.visualstudio.com/docs/csharp/testing)
    * [FAQ](https://code.visualstudio.com/docs/csharp/cs-dev-kit-faq)
  * [Container Tools](https://code.visualstudio.com/docs/debugtest/debugging#containers-articles)
    * [Overview](https://code.visualstudio.com/docs/containers/overview)
    * [Node.js](https://code.visualstudio.com/docs/containers/quickstart-node)
    * [Python](https://code.visualstudio.com/docs/containers/quickstart-python)
    * [ASP.NET Core](https://code.visualstudio.com/docs/containers/quickstart-aspnet-core)
    * [Debug](https://code.visualstudio.com/docs/containers/debug-common)
    * [Docker Compose](https://code.visualstudio.com/docs/containers/docker-compose)
    * [Registries](https://code.visualstudio.com/docs/containers/quickstart-container-registries)
    * [Deploy to Azure](https://code.visualstudio.com/docs/containers/app-service)
    * [Choose a Dev Environment](https://code.visualstudio.com/docs/containers/choosing-dev-environment)
    * [Customize](https://code.visualstudio.com/docs/containers/reference)
    * [Develop with Kubernetes](https://code.visualstudio.com/docs/containers/bridge-to-kubernetes)
    * [Tips and Tricks](https://code.visualstudio.com/docs/containers/troubleshooting)
  * [Data Science](https://code.visualstudio.com/docs/debugtest/debugging#datascience-articles)
    * [Overview](https://code.visualstudio.com/docs/datascience/overview)
    * [Jupyter Notebooks](https://code.visualstudio.com/docs/datascience/jupyter-notebooks)
    * [Data Science Tutorial](https://code.visualstudio.com/docs/datascience/data-science-tutorial)
    * [Python Interactive](https://code.visualstudio.com/docs/datascience/python-interactive)
    * [Data Wrangler Quick Start](https://code.visualstudio.com/docs/datascience/data-wrangler-quick-start)
    * [Data Wrangler](https://code.visualstudio.com/docs/datascience/data-wrangler)
    * [PyTorch Support](https://code.visualstudio.com/docs/datascience/pytorch-support)
    * [Azure Machine Learning](https://code.visualstudio.com/docs/datascience/azure-machine-learning)
    * [Manage Jupyter Kernels](https://code.visualstudio.com/docs/datascience/jupyter-kernel-management)
    * [Jupyter Notebooks on the Web](https://code.visualstudio.com/docs/datascience/notebooks-web)
  * [Intelligent Apps](https://code.visualstudio.com/docs/debugtest/debugging#intelligentapps-articles)
    * [AI Toolkit Overview](https://code.visualstudio.com/docs/intelligentapps/overview)
    * [Models](https://code.visualstudio.com/docs/intelligentapps/models)
    * [Playground](https://code.visualstudio.com/docs/intelligentapps/playground)
    * [Agent Builder](https://code.visualstudio.com/docs/intelligentapps/agentbuilder)
    * [Bulk Run](https://code.visualstudio.com/docs/intelligentapps/bulkrun)
    * [Evaluation](https://code.visualstudio.com/docs/intelligentapps/evaluation)
    * [Fine-tune](https://code.visualstudio.com/docs/intelligentapps/finetune)
    * [Model Conversion](https://code.visualstudio.com/docs/intelligentapps/modelconversion)
    * [Tracing](https://code.visualstudio.com/docs/intelligentapps/tracing)
    * [FAQ](https://code.visualstudio.com/docs/intelligentapps/faq)
    * [Reference](https://code.visualstudio.com/docs/debugtest/debugging#intelligentapps-reference-articles)
      * [File Structure](https://code.visualstudio.com/docs/intelligentapps/reference/FileStructure)
      * [Manual Model Conversion](https://code.visualstudio.com/docs/intelligentapps/reference/ManualModelConversion)
      * [Manual Model Conversion On GPU](https://code.visualstudio.com/docs/intelligentapps/reference/ManualConversionOnGPU)
      * [Setup Environment Without AI Toolkit](https://code.visualstudio.com/docs/intelligentapps/reference/SetupWithoutAITK)
      * [Template Project](https://code.visualstudio.com/docs/intelligentapps/reference/TemplateProject)
  * [Azure](https://code.visualstudio.com/docs/debugtest/debugging#azure-articles)
    * [Overview](https://code.visualstudio.com/docs/azure/overview)
    * [Getting Started](https://code.visualstudio.com/docs/azure/gettingstarted)
    * [Resources View](https://code.visualstudio.com/docs/azure/resourcesextension)
    * [Deployment](https://code.visualstudio.com/docs/azure/deployment)
    * [VS Code for the Web - Azure](https://code.visualstudio.com/docs/azure/vscodeforweb)
    * [Containers](https://code.visualstudio.com/docs/azure/containers)
    * [Azure Kubernetes Service](https://code.visualstudio.com/docs/azure/aksextensions)
    * [Kubernetes](https://code.visualstudio.com/docs/azure/kubernetes)
    * [MongoDB](https://code.visualstudio.com/docs/azure/mongodb)
    * [Remote Debugging for Node.js](https://code.visualstudio.com/docs/azure/remote-debugging)
  * [Remote](https://code.visualstudio.com/docs/debugtest/debugging#remote-articles)
    * [Overview](https://code.visualstudio.com/docs/remote/remote-overview)
    * [SSH](https://code.visualstudio.com/docs/remote/ssh)
    * [Dev Containers](https://code.visualstudio.com/docs/remote/dev-containers)
    * [Windows Subsystem for Linux](https://code.visualstudio.com/docs/remote/wsl)
    * [GitHub Codespaces](https://code.visualstudio.com/docs/remote/codespaces)
    * [VS Code Server](https://code.visualstudio.com/docs/remote/vscode-server)
    * [Tunnels](https://code.visualstudio.com/docs/remote/tunnels)
    * [SSH Tutorial](https://code.visualstudio.com/docs/remote/ssh-tutorial)
    * [WSL Tutorial](https://code.visualstudio.com/docs/remote/wsl-tutorial)
    * [Tips and Tricks](https://code.visualstudio.com/docs/remote/troubleshooting)
    * [FAQ](https://code.visualstudio.com/docs/remote/faq)
  * [Dev Containers](https://code.visualstudio.com/docs/debugtest/debugging#devcontainers-articles)
    * [Overview](https://code.visualstudio.com/docs/devcontainers/containers)
    * [Tutorial](https://code.visualstudio.com/docs/devcontainers/tutorial)
    * [Attach to Container](https://code.visualstudio.com/docs/devcontainers/attach-container)
    * [Create Dev Container](https://code.visualstudio.com/docs/devcontainers/create-dev-container)
    * [Advanced Containers](https://code.visualstudio.com/docs/devcontainers/containers-advanced)
    * [devcontainer.json](https://code.visualstudio.com/docs/devcontainers/devcontainerjson-reference)
    * [Dev Container CLI](https://code.visualstudio.com/docs/devcontainers/devcontainer-cli)
    * [Tips and Tricks](https://code.visualstudio.com/docs/devcontainers/tips-and-tricks)
    * [FAQ](https://code.visualstudio.com/docs/devcontainers/faq)
  * [Reference](https://code.visualstudio.com/docs/debugtest/debugging#reference-articles)
    * [Default Keyboard Shortcuts](https://code.visualstudio.com/docs/reference/default-keybindings)
    * [Default Settings](https://code.visualstudio.com/docs/reference/default-settings)
    * [Substitution Variables](https://code.visualstudio.com/docs/reference/variables-reference)
    * [Tasks Schema](https://code.visualstudio.com/docs/reference/tasks-appendix)

Topics Overview Overview Linux macOS Windows VS Code for the Web Raspberry Pi Network Additional Components Enterprise Uninstall VS Code Tutorial Copilot Quickstart User Interface Personalize VS Code Install Extensions Tips and Tricks Intro Videos Display Language Layout Keyboard Shortcuts Settings Settings Sync Extension Marketplace Extension Runtime Security Themes Profiles Overview Voice Interactions Command Line Interface Telemetry Basic Editing IntelliSense Code Navigation Refactoring Snippets Overview Multi-root Workspaces Workspace Trust Tasks Debugging Debug Configuration Testing Port Forwarding Overview Setup Quickstart Chat Overview Chat Tutorial Manage Context Chat Modes Ask Mode Edit Mode Agent Mode MCP Servers Inline Chat Prompt Engineering Code Completions Copilot Coding Agent Smart Actions Customize Copilot Language Models Edit Notebooks with AI Test with AI Debug with AI MCP Dev Guide Tips and Tricks FAQ Cheat Sheet Settings Reference Workspace Context Overview Introduction to Git Collaborate on GitHub FAQ Getting Started Tutorial Terminal Basics Terminal Profiles Shell Integration Appearance Advanced Overview JavaScript JSON HTML Emmet CSS, SCSS and Less TypeScript Markdown PowerShell C++ Java PHP Python Julia R Ruby Rust Go T-SQL C# .NET Polyglot Swift Working with JavaScript Node.js Tutorial Node.js Debugging Deploy Node.js Apps Browser Debugging Angular Tutorial React Tutorial Vue Tutorial Debugging Recipes Performance Profiling Extensions Tutorial Compiling Editing Refactoring Debugging Quick Start Tutorial Run Python Code Editing Linting Formatting Debugging Environments Testing Python Interactive Django Tutorial FastAPI Tutorial Flask Tutorial Create Containers Deploy Python Apps Python in the Web Settings Reference Getting Started Navigate and Edit Refactoring Formatting and Linting Project Management Build Tools Run and Debug Testing Spring Boot Application Servers Deploy Java Apps GUI Applications Extensions FAQ Intro Videos GCC on Linux GCC on Windows GCC on Windows Subsystem for Linux Clang on macOS Microsoft C++ on Windows Build with CMake CMake Tools on Linux CMake Quick Start Editing and Navigating Debugging Configure Debugging Refactoring Settings Reference Configure IntelliSense Configure IntelliSense for Cross-Compiling FAQ Intro Videos Get Started Navigate and Edit IntelliCode Refactoring Formatting and Linting Project Management Build Tools Package Management Run and Debug Testing FAQ Overview Node.js Python ASP.NET Core Debug Docker Compose Registries Deploy to Azure Choose a Dev Environment Customize Develop with Kubernetes Tips and Tricks Overview Jupyter Notebooks Data Science Tutorial Python Interactive Data Wrangler Quick Start Data Wrangler PyTorch Support Azure Machine Learning Manage Jupyter Kernels Jupyter Notebooks on the Web AI Toolkit Overview Models Playground Agent Builder Bulk Run Evaluation Fine-tune Model Conversion Tracing FAQ File Structure Manual Model Conversion Manual Model Conversion On GPU Setup Environment Without AI Toolkit Template Project Overview Getting Started Resources View Deployment VS Code for the Web - Azure Containers Azure Kubernetes Service Kubernetes MongoDB Remote Debugging for Node.js Overview SSH Dev Containers Windows Subsystem for Linux GitHub Codespaces VS Code Server Tunnels SSH Tutorial WSL Tutorial Tips and Tricks FAQ Overview Tutorial Attach to Container Create Dev Container Advanced Containers devcontainer.json Dev Container CLI Tips and Tricks FAQ Default Keyboard Shortcuts Default Settings Substitution Variables Tasks Schema
[ Edit ](https://vscode.dev/github/microsoft/vscode-docs/blob/main/docs/debugtest/debugging.md "Edit this document in vscode.dev")
# Debug code with Visual Studio Code
Visual Studio Code has rich support for debugging various types of applications. VS Code has built-in support for JavaScript, TypeScript, and Node.js debugging. The [Visual Studio Marketplace](https://marketplace.visualstudio.com/vscode/Debuggers) has a wide variety of debugging extensions to add debugging support for other languages and runtimes to VS Code.
This article describes the debugging features of VS Code and how to get started with debugging in VS Code. You also learn how you can use Copilot in VS Code to accelerate setting up your debugging configuration and starting a debugging session.
The following video shows how to get started with debugging in VS Code.
## [Debugger user interface](https://code.visualstudio.com/docs/debugtest/debugging#_debugger-user-interface)
The following diagram shows the main components of the debugger user interface:
![Debugging diagram](https://code.visualstudio.com/assets/docs/debugtest/debugging/debugging_hero.png)
  1. **Run and Debug view** : displays all information related to running, debugging, and managing debug configuration settings.
  2. **Debug toolbar** : has buttons for the most common debugging actions.
  3. **Debug console** : enables viewing and interacting with the output of your code running in the debugger.
  4. **Debug sidebar** : during a debug session, lets you interact with the call stack, breakpoints, variables, and watch variables.
  5. **Run** menu: has the most common run and debug commands.


## [Before you start debugging](https://code.visualstudio.com/docs/debugtest/debugging#_before-you-start-debugging)
  1. Install a debugging extension from the [Visual Studio Marketplace](https://marketplace.visualstudio.com/vscode/Debuggers) for your language or runtime.
VS Code has built-in support for JavaScript, TypeScript, and Node.js debugging.
  2. Define a debugging configuration for your project.
For simple applications, VS Code tries to run and debug the currently active file. For more complex applications or debugging scenarios, you need to create a `launch.json` file to specify the debugger configuration. Get more information about creating a [debug configuration](https://code.visualstudio.com/docs/debugtest/debugging-configuration).
Copilot in VS Code can help generate the `launch.json` file for you. For more information, see [Use Copilot to generate debugging configurations](https://code.visualstudio.com/docs/debugtest/debugging-configuration#_generate-a-launch-configuration-with-ai).
  3. Set breakpoints in your code.
A breakpoint is a marker that you can set on a line of code to tell the debugger to pause execution when it reaches that line. You can set breakpoints by clicking in the gutter next to the line number in the editor.
For more information about breakpoints, see [Working with Breakpoints](https://code.visualstudio.com/docs/debugtest/debugging#_breakpoints).


## [Start a debugging session](https://code.visualstudio.com/docs/debugtest/debugging#_start-a-debugging-session)
To start a debugging session in VS Code, perform the following steps:
  1. Open the file that contains the code you want to debug.
  2. Start a debugging session with the F5 key or select **Run and Debug** in the **Run and Debug** view (`workbench.view.debug`).
![Simplified initial Run and Debug view](https://code.visualstudio.com/assets/docs/debugtest/debugging/debug-start.png)
For more complex debugging scenarios like attaching to a running process, you need to create a `launch.json` file to specify the debugger configuration. Get more information about [debug configurations](https://code.visualstudio.com/docs/debugtest/debugging-configuration).
  3. Choose the debugger you want to use from the list of available debuggers.
VS Code tries to run and debug the currently active file. For Node.js, VS Code checks for a `start` script in the `package.json` file to determine the entry point of the application.
  4. When a debugging session starts, the **DEBUG CONSOLE** panel is displayed and shows debugging output, and the Status Bar changes color (orange for default color themes).
![debug session](https://code.visualstudio.com/assets/docs/debugtest/debugging/debug-session.png)
  5. The debug status in the Status Bar shows the active debug configuration. Select the debug status to change the active launch configuration and start debugging without needing to open the **Run and Debug** view.
![Debug status](https://code.visualstudio.com/assets/docs/debugtest/debugging/debug-status.png)


## [Debug actions](https://code.visualstudio.com/docs/debugtest/debugging#_debug-actions)
Once a debug session starts, the Debug toolbar appears at the top of the window. The toolbar contains actions to control the flow of the debug session, such as stepping through code, pausing execution, and stopping the debug session.
![Screenshot that shows the Debug toolbar, with icons to control the flow of the debug session.](https://code.visualstudio.com/assets/docs/debugtest/debugging/toolbar.png)
The following table describes the actions available in the debug toolbar:
Expand table 
Action | Description  
---|---  
Continue / Pause   
F5 |  **Continue** : Resume normal program/script execution (up to the next breakpoint).   
**Pause** : Inspect code executing at the current line and debug line-by-line.  
Step Over   
F10 | Execute the next method as a single command without inspecting or following its component steps.  
Step Into   
F11 | Enter the next method to follow its execution line-by-line.  
Step Out   
⇧F11 | When inside a method or subroutine, return to the earlier execution context by completing remaining lines of the current method as though it were a single command.  
Restart   
⇧⌘F5 | Terminate the current program execution and start debugging again using the current run configuration.  
Stop   
⇧F5 | Terminate the current program execution.  
If your debugging sessions involve multiple targets (for example, a client and a server), the debug toolbar shows the list of sessions and lets you switch between them.
Use the [](vscode://settings/debug.toolBarLocation) setting to control the location of the Debug toolbar. It can be the default `floating`, `docked` to the **Run and Debug** view, or `hidden`. A floating debug toolbar can be dragged horizontally and also down to the editor area (up to a certain distance from the top edge).
## [Breakpoints](https://code.visualstudio.com/docs/debugtest/debugging#_breakpoints)
A breakpoint is a special marker that pauses the execution of your code at a specific point, so you can inspect the state of your application at that point. VS Code supports several types of breakpoints.
### [Setting breakpoints](https://code.visualstudio.com/docs/debugtest/debugging#_setting-breakpoints)
To set or unset a breakpoint, click on the **editor margin** or use F9 on the current line.
  * Breakpoints in the editor margin are normally shown as red filled circles.
  * Disabled breakpoints have a filled gray circle.
  * When a debugging session starts, breakpoints that can't be registered with the debugger change to a gray hollow circle. The same might happen if the source is edited while a debug session without live-edit support is running.


Optionally, breakpoints can be shown in the editor's overview ruler by enabling the setting [](vscode://settings/debug.showBreakpointsInOverviewRuler):
![breakpoints in overview ruler](https://code.visualstudio.com/assets/docs/debugtest/debugging/bpts-in-overview.png)
For more control of your breakpoints, use the **Run and Debug** view's **BREAKPOINTS** section. This section lists all breakpoints in your code and provides extra actions to manage them.
![Breakpoints](https://code.visualstudio.com/assets/docs/debugtest/debugging/breakpoints.png)
### [Breakpoint types](https://code.visualstudio.com/docs/debugtest/debugging#_breakpoint-types)
#### [Conditional breakpoints](https://code.visualstudio.com/docs/debugtest/debugging#_conditional-breakpoints)
A powerful VS Code debugging feature is the ability to set conditions based on expressions, hit counts, or a combination of both.
  * **Expression condition** : The breakpoint is hit whenever the expression evaluates to `true`.
  * **Hit count** : The _hit count_ controls how many times a breakpoint needs to be hit before it interrupts execution. Whether a hit count is respected, and the exact syntax of the expression, can vary among debugger extensions.
  * **Wait for breakpoint** : The breakpoint is activated when another breakpoint is hit ([triggered breakpoint](https://code.visualstudio.com/docs/debugtest/debugging#_triggered-breakpoints)).


To add a conditional breakpoint:
  1. Create a conditional breakpoint
     * Right-click in the editor margin and select **Add Conditional Breakpoint**.
     * Use the **Add Conditional Breakpoint** command in the Command Palette (⇧⌘P).
  2. Choose the type of condition you want to set (expression, hit count, or wait for breakpoint).
![HitCount](https://code.visualstudio.com/assets/docs/debugtest/debugging/hitCount.gif)


To add a condition to an existing breakpoint:
  1. Edit an existing breakpoint
     * Right-click on the breakpoint in the editor margin and select **Edit Breakpoint**.
     * Select the pencil icon next for an existing breakpoint in the **BREAKPOINTS** section of the **Run and Debug** view.
  2. Edit the condition (expression, hit count, or wait for breakpoint).


If a debugger does not support conditional breakpoints, the **Add Conditional Breakpoint** and **Edit Condition** actions are not available.
#### [Triggered breakpoints](https://code.visualstudio.com/docs/debugtest/debugging#_triggered-breakpoints)
A triggered breakpoint is type of conditional breakpoint that is enabled once another breakpoint is hit. They can be useful when diagnosing failure cases in code that happen only after a certain precondition.
Triggered breakpoints can be set by right-clicking on the glyph margin, selecting **Add Triggered Breakpoint** , and then choosing which other breakpoint enables the breakpoint.
#### [Inline breakpoints](https://code.visualstudio.com/docs/debugtest/debugging#_inline-breakpoints)
Inline breakpoints are only hit when the execution reaches the column associated with the inline breakpoint. This is useful when debugging minified code, which contains multiple statements in a single line.
An inline breakpoint can be set using ⇧F9 or through the context menu during a debug session. Inline breakpoints are shown inline in the editor.
Inline breakpoints can also have conditions. Editing multiple breakpoints on a line is possible through the context menu in the editor's left margin.
#### [Function breakpoints](https://code.visualstudio.com/docs/debugtest/debugging#_function-breakpoints)
Instead of placing breakpoints directly in source code, a debugger can support creating breakpoints by specifying a function name. This is useful in situations where source is not available but a function name is known.
To create a function breakpoint, select the **+** button in the **BREAKPOINTS** section header and enter the function name. Function breakpoints are shown with a red triangle in the **BREAKPOINTS** section.
#### [Data breakpoints](https://code.visualstudio.com/docs/debugtest/debugging#_data-breakpoints)
If a debugger supports data breakpoints, they can be set from the context menu in the **VARIABLES** view. The **Break on Value Change/Read/Access** commands add a data breakpoint that is hit when the value of the underlying variable changes/is read/is accessed. Data breakpoints are shown with a red hexagon in the **BREAKPOINTS** section.
#### [Logpoints](https://code.visualstudio.com/docs/debugtest/debugging#_logpoints)
A logpoint is a variant of a breakpoint that does not interrupt into the debugger, but instead logs a message to the debug console. Logpoints can help you save time by not having to add or remove logging statements in your code.
A logpoint is represented by a diamond-shaped icon. Log messages are plain text but can also include expressions to be evaluated within curly braces ('{}').
To add a logpoint, right-click in the editor left margin and select **Add Logpoint** , or use the **Debug: Add Logpoint...** command in the Command Palette (⇧⌘P). You can also configure the setting [](vscode://settings/debug.gutterMiddleClickAction) to toggle a logpoint when pressing the middle mouse button in the editor gutter.
![Logpoints](https://code.visualstudio.com/assets/docs/debugtest/debugging/log-points.gif)
Just like regular breakpoints, logpoints can be enabled or disabled and can also be controlled by a condition and/or hit count.
Debugger extensions can choose to implement logpoints or not.
## [Data inspection](https://code.visualstudio.com/docs/debugtest/debugging#_data-inspection)
### [Run and Debug view](https://code.visualstudio.com/docs/debugtest/debugging#_run-and-debug-view)
During a debugging session, you can inspect variables and expressions in the **VARIABLES** section of the **Run and Debug** view or by hovering over their source in the editor. Variable values and expression evaluation are relative to the selected stack frame in the **CALL STACK** section.
![Screenshot of the Variables section in the Run and Debug view.](https://code.visualstudio.com/assets/docs/debugtest/debugging/variables.png)
To change the value of a variable during the debugging session, right-click on the variable in the **VARIABLES** section and select **Set Value** (Enter).
Additionally, you can use the **Copy Value** action to copy the variable's value, or the **Copy as Expression** action to copy an expression to access the variable. You can then use this expression in the **WATCH** section.
Variables and expressions can also be evaluated and watched in the **Run and Debug** view's **WATCH** section.
![Screenshot of the Watch section in the Run and Debug view.](https://code.visualstudio.com/assets/docs/debugtest/debugging/watch.png)
To filter variables by their name or value, use the ⌥⌘F keyboard shortcut while the focus is on the **VARIABLES** section, and type a search term.
![Screenshot of the filter control in the Variables section.](https://code.visualstudio.com/assets/docs/debugtest/debugging/filtering-variables.png)
### [Debug console REPL](https://code.visualstudio.com/docs/debugtest/debugging#_debug-console-repl)
Expressions can be evaluated with the **Debug Console** REPL ([Read-Eval-Print Loop](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop)) feature. To open the Debug Console, use the **Debug Console** action at the top of the Debug pane or use the **View: Debug Console** command (⇧⌘Y).
Expressions are evaluated after you press Enter and the Debug Console REPL shows suggestions as you type. If you need to enter multiple lines, use Shift+Enter between the lines and then send all lines for evaluation with Enter.
Debug Console input uses the mode of the active editor, which means that the Debug Console input supports syntax coloring, indentation, auto closing of quotes, and other language features.
![Screenshot of the Debug Console.](https://code.visualstudio.com/assets/docs/debugtest/debugging/debugconsole.png)
You must be in an active debugging session to use the Debug Console REPL.
## [Multi-target debugging](https://code.visualstudio.com/docs/debugtest/debugging#_multitarget-debugging)
For complex scenarios that involve more than one process (for example, a client and a server), VS Code supports multi-target debugging. After you've started a first debug session, you can launch another debug session. As soon as a second session is up and running, the VS Code UI switches to _multi-target mode_ :
  * The individual sessions now show up as top-level elements in the **CALL STACK** view.
![Callstack View](https://code.visualstudio.com/assets/docs/debugtest/debugging/debug-callstack.png)
  * The debug toolbar shows the currently **active session** (and all other sessions are available in a dropdown menu).
![Debug Actions Widget](https://code.visualstudio.com/assets/docs/debugtest/debugging/debug-actions-widget.png)
  * Debug actions (for example, all actions in the debug toolbar) are performed on the active session. The active session can be changed either by using the dropdown menu in the debug toolbar or by selecting a different element in the **CALL STACK** view.


## [Remote debugging](https://code.visualstudio.com/docs/debugtest/debugging#_remote-debugging)
VS Code does not support built-in remote debugging across all languages. Remote debugging is a feature of the debug extension you are using, and you should consult the extension's page in the [Marketplace](https://marketplace.visualstudio.com/search?target=VSCode&category=Debuggers&sortBy=Installs) for support and details.
There is, however, one exception: the Node.js debugger included in VS Code supports remote debugging. For more information, see [Node.js Debugging](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_remote-debugging).
## [Debugger extensions](https://code.visualstudio.com/docs/debugtest/debugging#_debugger-extensions)
VS Code has built-in debugging support for the [Node.js](https://nodejs.org/) runtime and can debug JavaScript, TypeScript, or any other language that gets transpiled to JavaScript.
For debugging other languages and runtimes (including [PHP](https://marketplace.visualstudio.com/items?itemName=xdebug.php-debug), [Ruby](https://marketplace.visualstudio.com/items?itemName=rebornix.Ruby), [Go](https://marketplace.visualstudio.com/items?itemName=golang.go), [C#](https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp), [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python), [C++](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools), [PowerShell](https://marketplace.visualstudio.com/items?itemName=ms-vscode.PowerShell) and [many others](https://marketplace.visualstudio.com/search?term=debug&target=VSCode&category=Debuggers&sortBy=Relevance)), look for `Debuggers` extensions in the [Visual Studio Marketplace](https://marketplace.visualstudio.com/vscode/Debuggers), or select **Install Additional Debuggers** in the top-level Run menu.
These are several popular extensions that include debugging support:
[ ![Python](https://ms-python.gallerycdn.vsassets.io/extensions/ms-python/python/2025.11.2025072901/1753785626579/Microsoft.VisualStudio.Services.Icons.Default) Python 177.7Mms-python ](https://marketplace.visualstudio.com/items?itemName=ms-python.python)[ ![C/C++](https://ms-vscode.gallerycdn.vsassets.io/extensions/ms-vscode/cpptools/1.26.3/1750877541184/Microsoft.VisualStudio.Services.Icons.Default) C/C++ 85.4Mms-vscode ](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools)[ ![Python Debugger](https://ms-python.gallerycdn.vsassets.io/extensions/ms-python/debugpy/2025.11.2025072901/1753785186664/Microsoft.VisualStudio.Services.Icons.Default) Python Debugger 84.0Mms-python ](https://marketplace.visualstudio.com/items?itemName=ms-python.debugpy)[ ![CMake Tools](https://ms-vscode.gallerycdn.vsassets.io/extensions/ms-vscode/cmake-tools/1.22.3/1754022372984/Microsoft.VisualStudio.Services.Icons.Default) CMake Tools 48.4Mms-vscode ](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools)
## [Next steps](https://code.visualstudio.com/docs/debugtest/debugging#_next-steps)
To learn about VS Code's Node.js debugging support, take a look at:
  * [Node.js](https://code.visualstudio.com/docs/nodejs/nodejs-debugging) - Describes the Node.js debugger, which is included in VS Code.
  * [TypeScript](https://code.visualstudio.com/docs/typescript/typescript-debugging) - The Node.js debugger also supports TypeScript debugging.


To see a tutorial on the basics of debugging, check out this video:
  * [Getting started with debugging in VS Code](https://www.youtube.com/watch?v=3HiLLByBWkg) - Learn about debugging in VS Code.


To learn more about Copilot and AI-assisted debugging in VS Code:
  * [Debugging and fixing issues with Copilot](https://code.visualstudio.com/docs/copilot/overview#_fix-issues)
  * [Copilot cheat sheet for debugging and fixing issues](https://code.visualstudio.com/docs/copilot/reference/copilot-vscode-features#_debug-and-fix-problems)


To learn about debugging support for other programming languages via VS Code extensions:
  * [C++](https://code.visualstudio.com/docs/cpp/cpp-debug)
  * [Python](https://code.visualstudio.com/docs/python/debugging)
  * [Java](https://code.visualstudio.com/docs/java/java-debugging)


To learn about VS Code's task running support, go to:
  * [Tasks](https://code.visualstudio.com/docs/debugtest/tasks) - Describes how to run tasks with Gulp, Grunt, and Jake and how to show errors and warnings.


To write your own debugger extension, visit:
  * [Debugger Extension](https://code.visualstudio.com/api/extension-guides/debugger-extension) - Uses a mock sample to illustrate the steps required to create a VS Code debug extension.


## [Common questions](https://code.visualstudio.com/docs/debugtest/debugging#_common-questions)
### [What are the supported debugging scenarios?](https://code.visualstudio.com/docs/debugtest/debugging#_what-are-the-supported-debugging-scenarios)
Debugging of Node.js-based applications is supported on Linux, macOS, and Windows out of the box with VS Code. Many other scenarios are supported by [VS Code extensions](https://marketplace.visualstudio.com/vscode/Debuggers?sortBy=Installs) available in the Marketplace.
### Was this documentation helpful?
  
Yes , this page was helpfulNo , this page was not helpful
07/09/2025
####  On this page there are 11 sectionsOn this page
  * [Debugger user interface](https://code.visualstudio.com/docs/debugtest/debugging#_debugger-user-interface)
  * [Before you start debugging](https://code.visualstudio.com/docs/debugtest/debugging#_before-you-start-debugging)
  * [Start a debugging session](https://code.visualstudio.com/docs/debugtest/debugging#_start-a-debugging-session)
  * [Debug actions](https://code.visualstudio.com/docs/debugtest/debugging#_debug-actions)
  * [Breakpoints](https://code.visualstudio.com/docs/debugtest/debugging#_breakpoints)
  * [Data inspection](https://code.visualstudio.com/docs/debugtest/debugging#_data-inspection)
  * [Multi-target debugging](https://code.visualstudio.com/docs/debugtest/debugging#_multitarget-debugging)
  * [Remote debugging](https://code.visualstudio.com/docs/debugtest/debugging#_remote-debugging)
  * [Debugger extensions](https://code.visualstudio.com/docs/debugtest/debugging#_debugger-extensions)
  * [Next steps](https://code.visualstudio.com/docs/debugtest/debugging#_next-steps)
  * [Common questions](https://code.visualstudio.com/docs/debugtest/debugging#_common-questions)


  * [![RSS](https://code.visualstudio.com/assets/community/sidebar/rss.svg)RSS Feed](https://code.visualstudio.com/feed.xml)
  * [![Stackoverflow](https://code.visualstudio.com/assets/community/sidebar/stackoverflow.svg)Ask questions](https://stackoverflow.com/questions/tagged/vscode)
  * [![Twitter](https://code.visualstudio.com/assets/community/sidebar/twitter.svg)Follow @code](https://go.microsoft.com/fwlink/?LinkID=533687)
  * [![GitHub](https://code.visualstudio.com/assets/community/sidebar/github.svg)Request features](https://go.microsoft.com/fwlink/?LinkID=533482)
  * [![Issues](https://code.visualstudio.com/assets/community/sidebar/issue.svg)Report issues](https://www.github.com/Microsoft/vscode/issues)
  * [![YouTube](https://code.visualstudio.com/assets/community/sidebar/youtube.svg)Watch videos](https://www.youtube.com/channel/UCs5Y5_7XK8HLDX0SLNwkd3w)


  * [![RSS](https://code.visualstudio.com/assets/community/sidebar/rss.svg)RSS Feed](https://code.visualstudio.com/feed.xml)
  * [![Stackoverflow](https://code.visualstudio.com/assets/community/sidebar/stackoverflow.svg)Ask questions](https://stackoverflow.com/questions/tagged/vscode)
  * [![Twitter](https://code.visualstudio.com/assets/community/sidebar/twitter.svg)Follow @code](https://go.microsoft.com/fwlink/?LinkID=533687)
  * [![GitHub](https://code.visualstudio.com/assets/community/sidebar/github.svg)Request features](https://go.microsoft.com/fwlink/?LinkID=533482)
  * [![Issues](https://code.visualstudio.com/assets/community/sidebar/issue.svg)Report issues](https://www.github.com/Microsoft/vscode/issues)
  * [![YouTube](https://code.visualstudio.com/assets/community/sidebar/youtube.svg)Watch videos](https://www.youtube.com/channel/UCs5Y5_7XK8HLDX0SLNwkd3w)


  * [![Follow us on X](https://code.visualstudio.com/assets/icons/x-icon.svg)](https://go.microsoft.com/fwlink/?LinkID=533687)
  * [![VS Code on Github](https://code.visualstudio.com/assets/icons/github-icon.svg)](https://github.com/microsoft/vscode)
  * [![VS Code on YouTube](https://code.visualstudio.com/assets/icons/youtube-icon.svg)](https://www.youtube.com/@code)

[ ![Microsoft homepage](https://code.visualstudio.com/assets/icons/microsoft.svg) ](https://www.microsoft.com)
  * [Support](https://support.serviceshub.microsoft.com/supportforbusiness/create?sapId=d66407ed-3967-b000-4cfb-2c318cad363d)
  * [Privacy](https://go.microsoft.com/fwlink/?LinkId=521839)
  * Manage Cookies
  * [Terms of Use](https://www.microsoft.com/legal/terms-of-use)
  * [License](https://code.visualstudio.com/License)


 (success: true, hasMarkdown: true, hasDescription: true)
[zym4yk] Source 3 keep: # 
![site logo](https://cdn.sstatic.net/Sites/stackoverflow/Img/icon-48.png?v=b7e36f88ff92) **Join Stack Overflow**
By clicking “Sign up”, you agree to our [terms of service](https://stackoverflow.com/legal/terms-of-service/public) and acknowledge you have read our [privacy policy](https://stackoverflow.com/legal/privacy-policy).
Sign up with Google
Sign up with GitHub
# OR
Email
Password
Sign up
Already have an account? [Log in](https://stackoverflow.com/users/login)
[Skip to main content](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run#content)
[](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run) [ Stack Overflow ](https://stackoverflow.com)
  1. [ About ](https://stackoverflow.co/)
  2. Products
  3. [ For Teams ](https://stackoverflow.co/teams/)


  1. [ Stack Overflow for Teams Where developers & technologists share private knowledge with coworkers ](https://stackoverflow.co/teams/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=top-nav&utm_content=stack-overflow-for-teams)
  2. [ Advertising Reach devs & technologists worldwide about your product, service or employer brand ](https://stackoverflow.co/advertising/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=top-nav&utm_content=stack-overflow-advertising)
  3. [ Knowledge Solutions Data licensing offering for businesses to build and improve AI tools and models ](https://stackoverflow.co/api-solutions/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=top-nav&utm_content=overflow-api)
  4. [ Labs The future of collective knowledge sharing ](https://stackoverflow.co/labs/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=top-nav&utm_content=labs)
  5. [About the company](https://stackoverflow.co/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=top-nav&utm_content=about-the-company) [Visit the blog](https://stackoverflow.blog/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=top-nav&utm_content=blog)


Loading…
  1. ###  [current community](https://stackoverflow.com)
     * [ Stack Overflow  ](https://stackoverflow.com)
[help](https://stackoverflow.com/help) [chat](https://chat.stackoverflow.com/?tab=explore)
     * [ Meta Stack Overflow  ](https://meta.stackoverflow.com)
###  your communities 
[Sign up](https://stackoverflow.com/users/signup?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f6401749%2funit-test-passes-when-in-debug-but-fails-when-run) or [log in](https://stackoverflow.com/users/login?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f6401749%2funit-test-passes-when-in-debug-but-fails-when-run) to customize your list. 
###  [more stack exchange communities](https://stackexchange.com/sites)
[company blog](https://stackoverflow.blog)
  2. [Log in](https://stackoverflow.com/users/login?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f6401749%2funit-test-passes-when-in-debug-but-fails-when-run)
  3. [Sign up](https://stackoverflow.com/users/signup?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f6401749%2funit-test-passes-when-in-debug-but-fails-when-run)


The 2025 Developer Survey results are in. Explore insights into technology and tools, careers, community and more.  [View results](https://survey.stackoverflow.co/2025?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=dev-survey-2025&utm_content=results-announcement-banner). 
[](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run "dismiss")
# 
Let's set up your homepage Select a few topics you're interested in:
pythonjavascriptc#reactjsjavaandroidhtmlflutterc++node.jstypescriptcssrphpangularnext.jsspring-bootmachine-learningsqlexceliosazuredocker
Or search from our full list:
  * javascript
  * python
  * java
  * c#
  * php
  * android
  * html
  * jquery
  * c++
  * css
  * ios
  * sql
  * mysql
  * r
  * reactjs
  * node.js
  * arrays
  * c
  * asp.net
  * json
  * python-3.x
  * .net
  * ruby-on-rails
  * sql-server
  * swift
  * django
  * angular
  * objective-c
  * excel
  * pandas
  * angularjs
  * regex
  * typescript
  * ruby
  * linux
  * ajax
  * iphone
  * vba
  * xml
  * laravel
  * spring
  * asp.net-mvc
  * database
  * wordpress
  * string
  * flutter
  * postgresql
  * mongodb
  * wpf
  * windows
  * amazon-web-services
  * xcode
  * bash
  * git
  * oracle-database
  * spring-boot
  * dataframe
  * azure
  * firebase
  * list
  * multithreading
  * docker
  * vb.net
  * react-native
  * eclipse
  * algorithm
  * powershell
  * macos
  * visual-studio
  * numpy
  * image
  * forms
  * scala
  * function
  * vue.js
  * performance
  * twitter-bootstrap
  * selenium
  * winforms
  * kotlin
  * loops
  * express
  * dart
  * hibernate
  * sqlite
  * matlab
  * python-2.7
  * shell
  * rest
  * apache
  * entity-framework
  * android-studio
  * csv
  * maven
  * linq
  * qt
  * dictionary
  * unit-testing
  * asp.net-core
  * facebook
  * apache-spark
  * tensorflow
  * file
  * swing
  * class
  * unity-game-engine
  * sorting
  * date
  * authentication
  * go
  * symfony
  * t-sql
  * opencv
  * matplotlib
  * .htaccess
  * google-chrome
  * for-loop
  * datetime
  * codeigniter
  * perl
  * http
  * validation
  * sockets
  * google-maps
  * object
  * uitableview
  * xaml
  * oop
  * if-statement
  * visual-studio-code
  * cordova
  * ubuntu
  * web-services
  * email
  * android-layout
  * github
  * spring-mvc
  * elasticsearch
  * kubernetes
  * selenium-webdriver
  * ms-access
  * ggplot2
  * user-interface
  * parsing
  * pointers
  * google-sheets
  * c++11
  * security
  * machine-learning
  * google-apps-script
  * ruby-on-rails-3
  * templates
  * flask
  * nginx
  * variables
  * exception
  * sql-server-2008
  * gradle
  * debugging
  * tkinter
  * listview
  * delphi
  * jpa
  * asynchronous
  * web-scraping
  * haskell
  * pdf
  * jsp
  * ssl
  * amazon-s3
  * google-cloud-platform
  * jenkins
  * testing
  * xamarin
  * wcf
  * batch-file
  * npm
  * generics
  * ionic-framework
  * network-programming
  * unix
  * recursion
  * google-app-engine
  * mongoose
  * visual-studio-2010
  * .net-core
  * android-fragments
  * assembly
  * animation
  * math
  * svg
  * session
  * hadoop
  * intellij-idea
  * next.js
  * rust
  * curl
  * join
  * django-models
  * winapi
  * laravel-5
  * url
  * heroku
  * http-redirect
  * tomcat
  * google-cloud-firestore
  * inheritance
  * webpack
  * image-processing
  * keras
  * gcc
  * asp.net-mvc-4
  * swiftui
  * logging
  * dom
  * matrix
  * pyspark
  * actionscript-3
  * button
  * post
  * web
  * optimization
  * firebase-realtime-database
  * jquery-ui
  * cocoa
  * iis
  * xpath
  * d3.js
  * javafx
  * firefox
  * xslt
  * internet-explorer
  * caching
  * select
  * asp.net-mvc-3
  * opengl
  * events
  * asp.net-web-api
  * plot
  * dplyr
  * encryption
  * magento
  * search
  * stored-procedures
  * amazon-ec2
  * ruby-on-rails-4
  * memory
  * canvas
  * audio
  * multidimensional-array
  * jsf
  * random
  * vector
  * redux
  * cookies
  * input
  * facebook-graph-api
  * flash
  * indexing
  * xamarin.forms
  * arraylist
  * ipad
  * cocoa-touch
  * data-structures
  * video
  * model-view-controller
  * apache-kafka
  * azure-devops
  * serialization
  * jdbc
  * woocommerce
  * razor
  * routes
  * awk
  * servlets
  * mod-rewrite
  * excel-formula
  * beautifulsoup
  * filter
  * docker-compose
  * iframe
  * aws-lambda
  * design-patterns
  * text
  * django-rest-framework
  * visual-c++
  * cakephp
  * mobile
  * android-intent
  * struct
  * react-hooks
  * methods
  * groovy
  * mvvm
  * ssh
  * lambda
  * checkbox
  * ecmascript-6
  * time
  * google-chrome-extension
  * grails
  * installation
  * sharepoint
  * cmake
  * shiny
  * spring-security
  * jakarta-ee
  * plsql
  * android-recyclerview
  * core-data
  * types
  * meteor
  * sed
  * android-activity
  * activerecord
  * bootstrap-4
  * websocket
  * graph
  * replace
  * scikit-learn
  * group-by
  * vim
  * file-upload
  * junit
  * boost
  * sass
  * memory-management
  * deep-learning
  * import
  * async-await
  * error-handling
  * eloquent
  * dynamic
  * soap
  * dependency-injection
  * silverlight
  * layout
  * charts
  * apache-spark-sql
  * deployment
  * browser
  * gridview
  * svn
  * while-loop
  * google-bigquery
  * vuejs2
  * ffmpeg
  * dll
  * highcharts
  * view
  * foreach
  * makefile
  * plugins
  * c#-4.0
  * redis
  * reporting-services
  * jupyter-notebook
  * merge
  * unicode
  * reflection
  * https
  * server
  * google-maps-api-3
  * twitter
  * oauth-2.0
  * extjs
  * terminal
  * axios
  * pip
  * pytorch
  * split
  * cmd
  * encoding
  * django-views
  * collections
  * database-design
  * hash
  * netbeans
  * automation
  * data-binding
  * ember.js
  * build
  * tcp
  * mysqli
  * pdo
  * sqlalchemy
  * apache-flex
  * entity-framework-core
  * concurrency
  * command-line
  * spring-data-jpa
  * printing
  * react-redux
  * java-8
  * html-table
  * lua
  * jestjs
  * ansible
  * service
  * neo4j
  * material-ui
  * parameters
  * enums
  * flexbox
  * module
  * promise
  * visual-studio-2012
  * outlook
  * firebase-authentication
  * webview
  * web-applications
  * uwp
  * jquery-mobile
  * utf-8
  * datatable
  * python-requests
  * parallel-processing
  * drop-down-menu
  * colors
  * scipy
  * scroll
  * tfs
  * hive
  * count
  * syntax
  * ms-word
  * twitter-bootstrap-3
  * ssis
  * google-analytics
  * fonts
  * rxjs
  * constructor
  * file-io
  * three.js
  * powerbi
  * paypal
  * graphql
  * cassandra
  * discord
  * graphics
  * compiler-errors
  * gwt
  * socket.io
  * react-router
  * solr
  * backbone.js
  * url-rewriting
  * memory-leaks
  * datatables
  * nlp
  * terraform
  * oauth
  * datagridview
  * drupal
  * oracle11g
  * zend-framework
  * knockout.js
  * triggers
  * neural-network
  * interface
  * django-forms
  * angular-material
  * jmeter
  * casting
  * google-api
  * linked-list
  * path
  * timer
  * proxy
  * django-templates
  * arduino
  * orm
  * directory
  * windows-phone-7
  * parse-platform
  * visual-studio-2015
  * cron
  * conditional-statements
  * push-notification
  * functional-programming
  * primefaces
  * pagination
  * model
  * jar
  * xamarin.android
  * hyperlink
  * uiview
  * google-cloud-functions
  * visual-studio-2013
  * vbscript
  * gitlab
  * azure-active-directory
  * jwt
  * download
  * swift3
  * sql-server-2005
  * configuration
  * process
  * rspec
  * pygame
  * properties
  * combobox
  * callback
  * windows-phone-8
  * linux-kernel
  * safari
  * scrapy
  * permissions
  * emacs
  * scripting
  * raspberry-pi
  * clojure
  * x86
  * scope
  * io
  * azure-functions
  * expo
  * compilation
  * responsive-design
  * nhibernate
  * mongodb-query
  * angularjs-directive
  * request
  * bluetooth
  * reference
  * binding
  * dns
  * 3d
  * architecture
  * playframework
  * pyqt
  * discord.js
  * version-control
  * doctrine-orm
  * package
  * get
  * rubygems
  * f#
  * sql-server-2012
  * autocomplete
  * openssl
  * tree
  * datepicker
  * kendo-ui
  * jackson
  * yii
  * controller
  * grep
  * nested
  * xamarin.ios
  * static
  * dockerfile
  * statistics
  * null
  * transactions
  * active-directory
  * datagrid
  * uiviewcontroller
  * webforms
  * discord.py
  * phpmyadmin
  * sas
  * computer-vision
  * notifications
  * duplicates
  * mocking
  * youtube
  * pycharm
  * nullpointerexception
  * yaml
  * menu
  * sum
  * blazor
  * plotly
  * bitmap
  * asp.net-mvc-5
  * visual-studio-2008
  * electron
  * yii2
  * floating-point
  * css-selectors
  * stl
  * jsf-2
  * android-listview
  * time-series
  * cryptography
  * ant
  * hashmap
  * character-encoding
  * stream
  * msbuild
  * asp.net-core-mvc
  * sdk
  * google-drive-api
  * selenium-chromedriver
  * jboss
  * joomla
  * cors
  * devise
  * navigation
  * anaconda
  * background
  * cuda
  * multiprocessing
  * binary
  * camera
  * frontend
  * pyqt5
  * iterator
  * linq-to-sql
  * mariadb
  * onclick
  * ios7
  * android-jetpack-compose
  * microsoft-graph-api
  * rabbitmq
  * android-asynctask
  * tabs
  * laravel-4
  * amazon-dynamodb
  * environment-variables
  * insert
  * uicollectionview
  * linker
  * xsd
  * coldfusion
  * console
  * continuous-integration
  * upload
  * ftp
  * textview
  * opengl-es
  * operating-system
  * macros
  * mockito
  * vuejs3
  * formatting
  * localization
  * xml-parsing
  * json.net
  * type-conversion
  * data.table
  * kivy
  * timestamp
  * integer
  * calendar
  * segmentation-fault
  * android-ndk
  * prolog
  * drag-and-drop
  * char
  * crash
  * jasmine
  * automated-tests
  * dependencies
  * geometry
  * itext
  * azure-pipelines
  * android-gradle-plugin
  * fortran
  * firebase-cloud-messaging
  * sprite-kit
  * header
  * mfc
  * attributes
  * nuxt.js
  * nosql
  * format
  * odoo
  * db2
  * jquery-plugins
  * event-handling
  * jenkins-pipeline
  * nestjs
  * leaflet
  * julia
  * annotations
  * flutter-layout
  * keyboard
  * postman
  * textbox
  * arm
  * visual-studio-2017
  * gulp
  * stripe-payments
  * libgdx
  * synchronization
  * timezone
  * uikit
  * azure-web-app-service
  * xampp
  * dom-events
  * crystal-reports
  * wso2
  * android-emulator
  * swagger
  * namespaces
  * google-sheets-formula
  * uiscrollview
  * aggregation-framework
  * sequelize.js
  * jvm
  * chart.js
  * com
  * snowflake-cloud-data-platform
  * subprocess
  * geolocation
  * webdriver
  * centos
  * html5-canvas
  * garbage-collection
  * dialog
  * widget
  * numbers
  * concatenation
  * sql-update
  * qml
  * set
  * tuples
  * java-stream
  * smtp
  * mapreduce
  * ionic2
  * windows-10
  * rotation
  * android-edittext
  * modal-dialog
  * spring-data
  * nuget
  * doctrine
  * radio-button
  * http-headers
  * grid
  * sonarqube
  * lucene
  * xmlhttprequest
  * listbox
  * switch-statement
  * initialization
  * internationalization
  * components
  * apache-camel
  * boolean
  * google-play
  * serial-port
  * gdb
  * ldap
  * ios5
  * youtube-api
  * return
  * latex
  * pivot
  * eclipse-plugin
  * frameworks
  * tags
  * containers
  * github-actions
  * subquery
  * c++17
  * dataset
  * asp-classic
  * foreign-keys
  * label
  * uinavigationcontroller
  * copy
  * delegates
  * google-cloud-storage
  * embedded
  * struts2
  * migration
  * protractor
  * base64
  * queue
  * find
  * uibutton
  * sql-server-2008-r2
  * arguments
  * composer-php
  * append
  * jaxb
  * zip
  * stack
  * tailwind-css
  * cucumber
  * autolayout
  * ide
  * entity-framework-6
  * popup
  * iteration
  * r-markdown
  * windows-7
  * airflow
  * vb6
  * ssl-certificate
  * gmail
  * g++
  * hover
  * jqgrid
  * clang
  * range


Next You’ll be prompted to create an account to view your personalized homepage.
  1.     1. [ Home ](https://stackoverflow.com/)
    2. [ Questions ](https://stackoverflow.com/questions)
    3. [ AI Assist Labs ](https://stackoverflow.ai)
    4. [ Tags ](https://stackoverflow.com/tags)
    5. [ Challenges ](https://stackoverflow.com/beta/challenges)
    6. [ Chat ](https://chat.stackoverflow.com/rooms/259507/stack-overflow-lobby)
    7. [ Articles ](https://stackoverflow.blog/contributed?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=so-blog&utm_content=experiment-articles)
    8. [ Users ](https://stackoverflow.com/users)
    9. [ Jobs ](https://stackoverflow.com/jobs?source=so-left-nav)
    10. [ Companies ](https://stackoverflow.com/jobs/companies?so_medium=stackoverflow&so_source=SiteNav)
    11. [ Collectives ](javascript:void\(0\))
    12. Communities for your favorite technologies. [Explore all Collectives](https://stackoverflow.com/collectives-all)
  2. Teams
![](https://cdn.sstatic.net/Img/teams/teams-promo.svg?v=e507948b81bf)
Ask questions, find answers and collaborate at work with Stack Overflow for Teams. 
[Try Teams for free](https://stackoverflowteams.com/teams/create/free/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=side-bar&utm_content=explore-teams) [Explore Teams](https://stackoverflow.co/teams/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=side-bar&utm_content=explore-teams)
  3. [ Teams ](javascript:void\(0\))
  4. Ask questions, find answers and collaborate at work with Stack Overflow for Teams. [Explore Teams](https://stackoverflow.co/teams/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=side-bar&utm_content=explore-teams-compact)


##### Collectives™ on Stack Overflow
Find centralized, trusted content and collaborate around the technologies you use most.
[ Learn more about Collectives ](https://stackoverflow.com/collectives)
**Teams**
Q&A for work
Connect and share knowledge within a single location that is structured and easy to search.
[ Learn more about Teams ](https://stackoverflow.co/teams/)
# 
![Illustration of upvote icon after it is clicked](https://cdn.sstatic.net/Img/modal/img-upvote.png?v=fce73bd9724d)
# Hang on, you can't upvote just yet.
You'll need to complete a few actions and gain 15 reputation points before being able to upvote. **Upvoting** indicates when questions and answers are useful. [What's reputation and how do I get it?](https://stackoverflow.com/help/whats-reputation)
Instead, you can save this post to reference later.
Save this post for later Not now
# [Unit test passes when in debug but fails when run](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run)
[ Ask Question ](https://stackoverflow.com/questions/ask)
Asked 14 years, 1 month ago
Modified [3 years, 10 months ago](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run?lastactivity "2021-09-08 19:33:13Z")
Viewed 29k times 
This question shows research effort; it is useful and clear
15 
Save this question.
[](https://stackoverflow.com/posts/6401749/timeline)
Show activity on this post.
A search method returns any matching Articles and the most recent Non-matching articles up to a specified number.
Prior to being returned, the IsMatch property of the matching articles is set to true as follows:
articles = matchingArticles.Select(c => { c.IsMatch = true; return c; }).ToList();
In a test of this method, 
```
    [Test]
    public void SearchForArticle1Returns1MatchingArticleFirstInTheList()
    {
        using (var session = _sessionFactory.OpenSession())
        {
            var maxResults = 10;
            var searchPhrase = "Article1";
            IArticleRepository articleRepository = new ArticleRepository(session);
            var articles = articleRepository.GetSearchResultSet(searchPhrase, maxResults);
            Assert.AreEqual(10, articles.Count);
            Assert.AreEqual(1, articles.Where(a => a.Title.Contains(searchPhrase)).Count());
            var article = articles[0];
            Assert.IsTrue(article.Title.Contains(searchPhrase));
            Assert.IsTrue(article.IsMatch);
        }
    }

```

All assertions pass when the test is run in debug, however the final assertion fails when the test is run in release:
Expected: True But was: False
In the app itself the response is correct.
Any ideas as to why this is happening?
Edit:
I figured out what the problem is. It's essentially a race condition. When I am setting up the tests, I am dropping the db table, recreating it and populating it with the test data. Since the search relies on Full Text search, I am creating a text index on the relevant columns and setting it to auto populate. When this is run in debug, there appears to be sufficient time to populate the text index and the search query returns matches. When I run the test I don't think the index has been populated in time, no matches are returned and the test fails. It's similar to issues with datetimes. If I put a delay between creating the catalog and running the test the test passes.
  * [c#](https://stackoverflow.com/questions/tagged/c%23 "show questions tagged 'c#'")
  * [unit-testing](https://stackoverflow.com/questions/tagged/unit-testing "show questions tagged 'unit-testing'")
  * [debugging](https://stackoverflow.com/questions/tagged/debugging "show questions tagged 'debugging'")
  * [testing](https://stackoverflow.com/questions/tagged/testing "show questions tagged 'testing'")


[Share](https://stackoverflow.com/q/6401749 "Short permalink to this question")
Share a link to this question
Copy link[CC BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/ "The current license for this post: CC BY-SA 3.0")
[Improve this question](https://stackoverflow.com/posts/6401749/edit)
Follow 
Follow this question to receive notifications
[edited Jun 19, 2011 at 15:42](https://stackoverflow.com/posts/6401749/revisions "show all edits to this post")
Pones
asked Jun 19, 2011 at 9:59
[![Pones's user avatar](https://www.gravatar.com/avatar/9013c441180f544e3687b4fc80a7292f?s=64&d=identicon&r=PG)](https://stackoverflow.com/users/415291/pones)
[Pones](https://stackoverflow.com/users/415291/pones)Pones
34811 gold badge33 silver badges1313 bronze badges
7
  * I'm a bit confused by the checks for count==10 and count==1, and then you arbitrarily pick articles[0]. How much control is there over the order of articles?
– [Henk Holterman](https://stackoverflow.com/users/60761/henk-holterman "274,929 reputation")
[ Commented Jun 19, 2011 at 10:09 ](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run#comment7505220_6401749)
  * Like @Henk Holterman said you should probably filter the to where it contains searchPhrase and then get the first one
– [Oskar Kjellin](https://stackoverflow.com/users/293369/oskar-kjellin "21,930 reputation")
[ Commented Jun 19, 2011 at 10:45 ](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run#comment7505444_6401749)
  * @Henk Holterman, @Oskar Kjellin Thanks for looking. The matching Article is first in the list, that's taken care of in the repository method and tested elsewhere. However, If I do as you suggest: `//var article = articles[0];                 var article = articles.Where(a => a.Title.Contains(searchPhrase)).ToList()[0];                 Assert.IsTrue(article.Title.Contains(searchPhrase));                 Assert.IsTrue(article.IsMatch);` The result is the same.
– [Pones](https://stackoverflow.com/users/415291/pones "348 reputation")
[ Commented Jun 19, 2011 at 11:28 ](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run#comment7505714_6401749)
  * @Pones When you say `when the test is run in release` - did you mean that or just when not Debugging the test?
– [wal](https://stackoverflow.com/users/224410/wal "17,829 reputation")
[ Commented Jun 19, 2011 at 11:47 ](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run#comment7505834_6401749)
  * @Oskar Kjellin, the final assertion: Assert.IsTrue(article.IsMatch); @wal, I mean when not debugging the test - just running with re#er.
– [Pones](https://stackoverflow.com/users/415291/pones "348 reputation")
[ Commented Jun 19, 2011 at 11:55 ](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run#comment7505870_6401749)


[ ](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run "Use comments to ask for more information or suggest improvements. Avoid answering questions in comments.") |  [ Show **2** more comments ](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run "Expand to show all comments on this post")
##  3 Answers 3
Sorted by:  [ Reset to default ](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run?answertab=scoredesc#tab-top)
Highest score (default)  Trending (recent votes count more)  Date modified (newest first)  Date created (oldest first) 
This answer is useful
12 
Save this answer.
[](https://stackoverflow.com/posts/6402250/timeline)
Show activity on this post.
Pones, you have since clarified that the unit test fails when not debugging.
At this stage it could be anything however you should continue to run the unit test not debugging and insert the following statement somewhere you know (or think you know) is true
```
 if(condition)
            Debugger.Launch();

```

This will do the obvious and allow you to zone in on whats going wrong. 1 Place i suggest is on the `IsMatch` property (for starters)
Another common place you can run into issues like this is using DateTime's. If your unit test is running 'too fast' then it may break an assumption you had.
[Share](https://stackoverflow.com/a/6402250 "Short permalink to this answer")
Share a link to this answer
Copy link[CC BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/ "The current license for this post: CC BY-SA 3.0")
[Improve this answer](https://stackoverflow.com/posts/6402250/edit)
Follow 
Follow this answer to receive notifications
answered Jun 19, 2011 at 12:07
[![wal's user avatar](https://www.gravatar.com/avatar/f43a88df1e9cb67bb9ca09038e1382d1?s=64&d=identicon&r=PG)](https://stackoverflow.com/users/224410/wal)
[wal](https://stackoverflow.com/users/224410/wal)wal
17.8k88 gold badges7979 silver badges112112 bronze badges
8
  * When I run as suggested and examine the IsMatch property of the Article is false. So the assertion is failing. If I repeat in debug the IsMatch property is true.
– [Pones](https://stackoverflow.com/users/415291/pones "348 reputation")
[ Commented Jun 19, 2011 at 12:39 ](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run#comment7506193_6402250)
  * did you try Debugger.Launch( ) when not running under Debug?
– [wal](https://stackoverflow.com/users/224410/wal "17,829 reputation")
[ Commented Jun 19, 2011 at 12:58 ](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run#comment7506329_6402250)
  * Yes. When I did I could examine the IsMatch property and it was false.
– [Pones](https://stackoverflow.com/users/415291/pones "348 reputation")
[ Commented Jun 19, 2011 at 13:06 ](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run#comment7506389_6402250)
  * ok, what about after this line? `return matchingArticles.Select(c => { c.IsMatch = true; return c; }).ToList();;` (extract the return value to a variable before returning so you can inspect)
– [wal](https://stackoverflow.com/users/224410/wal "17,829 reputation")
[ Commented Jun 19, 2011 at 13:07 ](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run#comment7506403_6402250)
  * 4
I figured out what the problem is. It's essentially a race condition. When I am setting up the tests, I am dropping the db table, recreating it and populating it with the test data. Since the search relies on Full Text search, I am creating a text index on the relevant columns and setting it to auto populate. When this is run in debug, there appears to be sufficient time to populate the text index and the search query returns matches. When I run the test I don't think the index has been populated in time, no matches are returned and the test fails. It's simlar to issues with datetimes.
– [Pones](https://stackoverflow.com/users/415291/pones "348 reputation")
[ Commented Jun 19, 2011 at 14:02 ](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run#comment7506782_6402250)


[ ](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run "Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”.") |  [ Show **3** more comments ](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run "Expand to show all comments on this post")
This answer is useful
6 
Save this answer.
[](https://stackoverflow.com/posts/69108148/timeline)
Show activity on this post.
Obviously the problem will be different for other users, but I just hit it, and figured my solution may help some. Basically when you are running in debug mode, you are running a single test only. When you are running in run mode, you are running multiple tests in addition to the one you are having a problem with.
In my situation the problem was those other tests writing to a global list that I was not explicitly clearing in my test setup. I fixed the issue by clearing the list at the beginning of the test.
My advice to see if this is the type of problem you are facing would be to disable all other tests and only 'run' the test you have an issue with. If it works when ran by itself, but not with others, you'll know you have some dependency between tests.
Another tip is to use `Console.WriteLine("test")` statements in the test. That's actually how I found my list had items with it leftover from another test.
[Share](https://stackoverflow.com/a/69108148 "Short permalink to this answer")
Share a link to this answer
Copy link[CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/ "The current license for this post: CC BY-SA 4.0")
[Improve this answer](https://stackoverflow.com/posts/69108148/edit)
Follow 
Follow this answer to receive notifications
[edited Sep 8, 2021 at 19:33](https://stackoverflow.com/posts/69108148/revisions "show all edits to this post")
answered Sep 8, 2021 at 18:39
[![Eternal21's user avatar](https://i.sstatic.net/6NhQ5.jpg?s=64)](https://stackoverflow.com/users/1288473/eternal21)
[Eternal21](https://stackoverflow.com/users/1288473/eternal21)Eternal21
4,76433 gold badges5757 silver badges7171 bronze badges
1
  * 1
This! There are several questions of "run fails debug pass" at SO. It doesn't matter, what the precise test code is. The problem is, that running a test suite executes much more code, than debugging one. Check for test interference!
– [Martin Grey](https://stackoverflow.com/users/4106160/martin-grey "822 reputation")
[ Commented Jul 30, 2023 at 18:01 ](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run#comment135392108_69108148)


[ Add a comment ](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run "Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”.") |  [ ](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run "Expand to show all comments on this post")
This answer is useful
0 
Save this answer.
[](https://stackoverflow.com/posts/62158955/timeline)
Show activity on this post.
try to `print out` the actual result that you are comparing them with expected on `debug` and `normal run`
in my case, `I created entities` (JBA) `in the test method`
in `debug` mode, the `generated ids` were 1, 2 and 3 
but in the `normal running` mode, they ware `different`
that caused my `hard-coded` values to make the test fail, so I changed them to get id from entity instead of the hard-coded way
hope this helps
[Share](https://stackoverflow.com/a/62158955 "Short permalink to this answer")
Share a link to this answer
Copy link[CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/ "The current license for this post: CC BY-SA 4.0")
[Improve this answer](https://stackoverflow.com/posts/62158955/edit)
Follow 
Follow this answer to receive notifications
[edited Jun 2, 2020 at 18:37](https://stackoverflow.com/posts/62158955/revisions "show all edits to this post")
answered Jun 2, 2020 at 18:30
[![Basheer AL-MOMANI's user avatar](https://lh4.googleusercontent.com/-ovA4SCP-_wg/AAAAAAAAAAI/AAAAAAAAC-M/gGQW1h2xxPE/s64-rj/photo.jpg)](https://stackoverflow.com/users/4251431/basheer-al-momani)
[Basheer AL-MOMANI](https://stackoverflow.com/users/4251431/basheer-al-momani)Basheer AL-MOMANI
15.5k99 gold badges102102 silver badges9595 bronze badges
[ Add a comment ](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run "Use comments to ask for more information or suggest improvements. Avoid comments like “+1” or “thanks”.") |  [ ](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run "Expand to show all comments on this post")
##  Your Answer 
[ ](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run)
Thanks for contributing an answer to Stack Overflow!
  * Please be sure to _answer the question_. Provide details and share your research!


But _avoid_ …
  * Asking for help, clarification, or responding to other answers.
  * Making statements based on opinion; back them up with references or personal experience.


To learn more, see our [tips on writing great answers](https://stackoverflow.com/help/how-to-answer).
Draft saved
Draft discarded
### Sign up or [log in](https://stackoverflow.com/users/login?ssrc=question_page&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f6401749%2funit-test-passes-when-in-debug-but-fails-when-run%23new-answer)
Submit
### Post as a guest
Name
Email
Required, but never shown
Post Your Answer  Discard 
By clicking “Post Your Answer”, you agree to our [terms of service](https://stackoverflow.com/legal/terms-of-service/public) and acknowledge you have read our [privacy policy](https://stackoverflow.com/legal/privacy-policy).
Start asking to get answers
Find the answer to your question by asking.
[Ask question](https://stackoverflow.com/questions/ask)
Explore related questions
  * [c#](https://stackoverflow.com/questions/tagged/c%23 "show questions tagged 'c#'")
  * [unit-testing](https://stackoverflow.com/questions/tagged/unit-testing "show questions tagged 'unit-testing'")
  * [debugging](https://stackoverflow.com/questions/tagged/debugging "show questions tagged 'debugging'")
  * [testing](https://stackoverflow.com/questions/tagged/testing "show questions tagged 'testing'")


See similar questions with these tags.
  * The Overflow Blog 
  * [Do AI coding tools help with imposter syndrome or make it worse?](https://stackoverflow.blog/2025/07/31/do-ai-coding-tools-help-with-imposter-syndrome-or-make-it-worse/?cb=1)
  * [Diving into the results of the 2025 Developer Survey](https://stackoverflow.blog/2025/08/01/diving-into-the-results-of-the-2025-developer-survey/?cb=1)
  * Featured on Meta 
  * [Will you help build our new visual identity?](https://meta.stackexchange.com/questions/411312/will-you-help-build-our-new-visual-identity?cb=1)
  * [Upcoming initiatives on Stack Overflow and across the Stack Exchange network...](https://meta.stackexchange.com/questions/411578/upcoming-initiatives-on-stack-overflow-and-across-the-stack-exchange-network-j?cb=1 "Upcoming initiatives on Stack Overflow and across the Stack Exchange network - July 2025")
  * [Policy: Generative AI (e.g., ChatGPT) is banned](https://meta.stackoverflow.com/questions/421831/policy-generative-ai-e-g-chatgpt-is-banned?cb=1)
  * [Stack Overflow Experiment: Safely expanding voting access](https://meta.stackoverflow.com/questions/434568/stack-overflow-experiment-safely-expanding-voting-access?cb=1)
  * [Updated design for the new live activity panel experiment](https://meta.stackoverflow.com/questions/434644/updated-design-for-the-new-live-activity-panel-experiment?cb=1)
  * [Further Experimentation with Comment Reputation Requirements](https://meta.stackoverflow.com/questions/434624/further-experimentation-with-comment-reputation-requirements?cb=1)


#### Related
[ 6 ](https://stackoverflow.com/questions/343576/unit-tests-fail-to-run-when-not-in-debug-mode?rq=3 "Question score \(upvotes - downvotes\)") [Unit tests fail to run when NOT in Debug mode](https://stackoverflow.com/questions/343576/unit-tests-fail-to-run-when-not-in-debug-mode?rq=3)
[ 0 ](https://stackoverflow.com/questions/1223221/how-to-avoid-failing-test-during-debug?rq=3 "Question score \(upvotes - downvotes\)") [How to avoid failing test during Debug?](https://stackoverflow.com/questions/1223221/how-to-avoid-failing-test-during-debug?rq=3)
[ 0 ](https://stackoverflow.com/questions/1761354/method-is-called-from-my-testmethod-only-when-running-in-debug-mode?rq=3 "Question score \(upvotes - downvotes\)") [Method is called from my TestMethod only when running in debug mode](https://stackoverflow.com/questions/1761354/method-is-called-from-my-testmethod-only-when-running-in-debug-mode?rq=3)
[ 7 ](https://stackoverflow.com/questions/2991612/mstest-unit-test-passes-by-itself-fails-when-other-tests-are-run?rq=3 "Question score \(upvotes - downvotes\)") [MSTest unit test passes by itself, fails when other tests are run](https://stackoverflow.com/questions/2991612/mstest-unit-test-passes-by-itself-fails-when-other-tests-are-run?rq=3)
[ 3 ](https://stackoverflow.com/questions/10193066/visual-studio-unit-tests-fails-when-running-test-without-the-debugger?rq=3 "Question score \(upvotes - downvotes\)") [Visual Studio Unit Tests fails when running test without the debugger](https://stackoverflow.com/questions/10193066/visual-studio-unit-tests-fails-when-running-test-without-the-debugger?rq=3)
[ 0 ](https://stackoverflow.com/questions/14560827/unit-testing-in-vs2010-run-passes-debug-fails?rq=3 "Question score \(upvotes - downvotes\)") [Unit testing in VS2010 - "Run" passes, "Debug" fails](https://stackoverflow.com/questions/14560827/unit-testing-in-vs2010-run-passes-debug-fails?rq=3)
[ 9 ](https://stackoverflow.com/questions/18631123/run-test-vs-debug-test-different-results?rq=3 "Question score \(upvotes - downvotes\)") [Run test vs. Debug test = different results](https://stackoverflow.com/questions/18631123/run-test-vs-debug-test-different-results?rq=3)
[ 5 ](https://stackoverflow.com/questions/20484449/unit-test-passes-in-debug-build-but-fails-in-release-build?rq=3 "Question score \(upvotes - downvotes\)") [Unit test passes in debug build but fails in release build](https://stackoverflow.com/questions/20484449/unit-test-passes-in-debug-build-but-fails-in-release-build?rq=3)
[ 0 ](https://stackoverflow.com/questions/23518736/unittest-fails-in-debug-run-all-not-in-debug-run-selected?rq=3 "Question score \(upvotes - downvotes\)") [unittest fails in debug/run all, not in debug/run selected](https://stackoverflow.com/questions/23518736/unittest-fails-in-debug-run-all-not-in-debug-run-selected?rq=3)
[ 4 ](https://stackoverflow.com/questions/54996182/system-componentmodel-win32exception-the-operation-completed-successfully-whi?rq=3 "Question score \(upvotes - downvotes\)") ['System.ComponentModel.Win32Exception: The operation completed successfully' while debugging unit test](https://stackoverflow.com/questions/54996182/system-componentmodel-win32exception-the-operation-completed-successfully-whi?rq=3)
####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)
  * [ Short story: Empty house has psychic effect on couple who find it in the woods ](https://scifi.stackexchange.com/questions/298372/short-story-empty-house-has-psychic-effect-on-couple-who-find-it-in-the-woods)
  * [ Do universities let instructors freely alter course content to include their personal convictions inconsistent with science? ](https://academia.stackexchange.com/questions/220614/do-universities-let-instructors-freely-alter-course-content-to-include-their-per)
  * [ Why do C compilers still prefer push over mov for saving registers, even when mov appears faster in llvm-mca? ](https://stackoverflow.com/questions/79718097/why-do-c-compilers-still-prefer-push-over-mov-for-saving-registers-even-when-mo)
  * [ Shakespearean grammar: "hath" and "has" in the same sentence ](https://english.stackexchange.com/questions/632529/shakespearean-grammar-hath-and-has-in-the-same-sentence)
  * [ Can the UK take action if Iran continues covert influence activities through its embassy? ](https://politics.stackexchange.com/questions/93229/can-the-uk-take-action-if-iran-continues-covert-influence-activities-through-its)
  * [ Which Lawvere theories are their own opposite? ](https://mathoverflow.net/questions/498497/which-lawvere-theories-are-their-own-opposite)
  * [ Why emphasize seeking wisdom as "silver” rather than gold? ](https://hermeneutics.stackexchange.com/questions/107203/why-emphasize-seeking-wisdom-as-silver-rather-than-gold)
  * [ 80s/90s movie about an outcast child ](https://movies.stackexchange.com/questions/128031/80s-90s-movie-about-an-outcast-child)
  * [ How can a space station allow ships to do a slingshot manoeuvre around it? ](https://worldbuilding.stackexchange.com/questions/268494/how-can-a-space-station-allow-ships-to-do-a-slingshot-manoeuvre-around-it)
  * [ How to use \unexpanded in context? ](https://tex.stackexchange.com/questions/749018/how-to-use-unexpanded-in-context)
  * [ How do I attach non-edible flowers to cake? ](https://cooking.stackexchange.com/questions/132915/how-do-i-attach-non-edible-flowers-to-cake)
  * [ The dative plural form "den Einen" in Schopenhauer's 19th-century German – can "ein-" be used for plurals? ](https://german.stackexchange.com/questions/80516/the-dative-plural-form-den-einen-in-schopenhauers-19th-century-german-can)
  * [ Where's this road in front of mountains, near Joseph Oregon? ](https://travel.stackexchange.com/questions/199852/wheres-this-road-in-front-of-mountains-near-joseph-oregon)
  * [ Is Samson referred to/mentioned in the siddur/liturgy? ](https://judaism.stackexchange.com/questions/150857/is-samson-referred-to-mentioned-in-the-siddur-liturgy)
  * [ Dold-Kan correspondence for stable infinity categories ](https://mathoverflow.net/questions/498517/dold-kan-correspondence-for-stable-infinity-categories)
  * [ How should I talk about definitional uncertainty in seemingly well-defined measurands, arising at high resolutions? ](https://philosophy.stackexchange.com/questions/129179/how-should-i-talk-about-definitional-uncertainty-in-seemingly-well-defined-measu)
  * [ It’s all greek to me! ](https://puzzling.stackexchange.com/questions/132776/it-s-all-greek-to-me)
  * [ Is there a reason "replace conditional with table" isn't a standard refactoring? ](https://softwareengineering.stackexchange.com/questions/458882/is-there-a-reason-replace-conditional-with-table-isnt-a-standard-refactoring)
  * [ Could going the speed limit while everyone else speeds be impeding traffic? ](https://law.stackexchange.com/questions/110462/could-going-the-speed-limit-while-everyone-else-speeds-be-impeding-traffic)
  * [ Center alignment and white space removal in table ](https://tex.stackexchange.com/questions/749030/center-alignment-and-white-space-removal-in-table)
  * [ Optimizing a Rust permutation chooser for the most subsequences ](https://codereview.stackexchange.com/questions/297783/optimizing-a-rust-permutation-chooser-for-the-most-subsequences)
  * [ How did Gauss study mathematics? ](https://hsm.stackexchange.com/questions/18741/how-did-gauss-study-mathematics)
  * [ How to upgrade Ubuntu's minor version? ](https://askubuntu.com/questions/1553830/how-to-upgrade-ubuntus-minor-version)
  * [ When CAN'T I use "put out" to replace "produce" when it comes to making things for sale? ](https://ell.stackexchange.com/questions/367590/when-cant-i-use-put-out-to-replace-produce-when-it-comes-to-making-things-f)


[ ](https://stackoverflow.com/feeds/question/6401749 "Feed of this question and its answers")
#  Subscribe to RSS 
Question feed 
To subscribe to this RSS feed, copy and paste this URL into your RSS reader.
[ ](https://stackoverflow.com/questions/6401749/unit-test-passes-when-in-debug-but-fails-when-run)
lang-cs
#  Why are you flagging this comment?
It contains harassment, bigotry or abuse. 
This comment attacks a person or group. Learn more in our [Code of Conduct](https://stackoverflow.com/conduct/abusive-behavior).
It's unfriendly or unkind. 
This comment is rude or condescending. Learn more in our [Code of Conduct](https://stackoverflow.com/conduct/abusive-behavior).
Not needed. 
This comment is not relevant to the post.
```
  

```

Enter at least 6 characters
Something else. 
A problem not listed above. Try to be as specific as possible.
```
  

```

Enter at least 6 characters
Flag comment Cancel
You have 0 flags left today
[](https://stackoverflow.com)
##### [Stack Overflow](https://stackoverflow.com)
  * [Questions](https://stackoverflow.com/questions)
  * [Help](https://stackoverflow.com/help)
  * [Chat](https://chat.stackoverflow.com/?tab=explore)


##### [Products](https://stackoverflow.co/)
  * [Teams](https://stackoverflow.co/teams/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=footer&utm_content=teams)
  * [Advertising](https://stackoverflow.co/advertising/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=footer&utm_content=advertising)
  * [Talent](https://stackoverflow.co/advertising/employer-branding/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=footer&utm_content=talent)


##### [Company](https://stackoverflow.co/)
  * [About](https://stackoverflow.co/)
  * [Press](https://stackoverflow.co/company/press/)
  * [Work Here](https://stackoverflow.co/company/work-here/)
  * [Legal](https://stackoverflow.com/legal)
  * [Privacy Policy](https://stackoverflow.com/legal/privacy-policy)
  * [Terms of Service](https://stackoverflow.com/legal/terms-of-service/public)
  * [Contact Us](https://stackoverflow.com/contact)
  * Your Privacy Choices 
  * [Cookie Policy](https://policies.stackoverflow.co/stack-overflow/cookie-policy)


##### [Stack Exchange Network](https://stackexchange.com)
  * [ Technology ](https://stackexchange.com/sites#technology)
  * [ Culture & recreation ](https://stackexchange.com/sites#culturerecreation)
  * [ Life & arts ](https://stackexchange.com/sites#lifearts)
  * [ Science ](https://stackexchange.com/sites#science)
  * [ Professional ](https://stackexchange.com/sites#professional)
  * [ Business ](https://stackexchange.com/sites#business)
  * [ API ](https://api.stackexchange.com/)
  * [ Data ](https://data.stackexchange.com/)


  * [Blog](https://stackoverflow.blog?blb=1)
  * [Facebook](https://www.facebook.com/officialstackoverflow/)
  * [Twitter](https://twitter.com/stackoverflow)
  * [LinkedIn](https://linkedin.com/company/stack-overflow)
  * [Instagram](https://www.instagram.com/thestackoverflow)


Site design / logo © 2025 Stack Exchange Inc;  user contributions licensed under  [CC BY-SA](https://stackoverflow.com/help/licensing) .  rev 2025.8.1.32392
 (success: true, hasMarkdown: true, hasDescription: true)
[zym4yk] Source 4 keep: [Skip to main content](https://playwright.dev/docs/debug#__docusaurus_skipToContent_fallback)
[![Playwright logo](https://playwright.dev/img/playwright-logo.svg) **Playwright**](https://playwright.dev/)[Docs](https://playwright.dev/docs/intro)[API](https://playwright.dev/docs/api/class-playwright)
[Node.js](https://playwright.dev/docs/debug)
  * [Node.js](https://playwright.dev/docs/debug)
  * [Python](https://playwright.dev/python/docs/debug)
  * [Java](https://playwright.dev/java/docs/debug)
  * [.NET](https://playwright.dev/dotnet/docs/debug)


[Community](https://playwright.dev/community/welcome)
[](https://github.com/microsoft/playwright)[](https://aka.ms/playwright/discord)
Search`K`
  * [Getting Started](https://playwright.dev/docs/debug)
    * [Installation](https://playwright.dev/docs/intro)
    * [Writing tests](https://playwright.dev/docs/writing-tests)
    * [Generating tests](https://playwright.dev/docs/codegen-intro)
    * [Running and debugging tests](https://playwright.dev/docs/running-tests)
    * [Trace viewer](https://playwright.dev/docs/trace-viewer-intro)
    * [Setting up CI](https://playwright.dev/docs/ci-intro)
  * [Getting started - VS Code](https://playwright.dev/docs/getting-started-vscode)
  * [Release notes](https://playwright.dev/docs/release-notes)
  * [Canary releases](https://playwright.dev/docs/canary-releases)
  * [Playwright Test](https://playwright.dev/docs/debug)
    * [Test configuration](https://playwright.dev/docs/test-configuration)
    * [Test use options](https://playwright.dev/docs/test-use-options)
    * [Annotations](https://playwright.dev/docs/test-annotations)
    * [Command line](https://playwright.dev/docs/test-cli)
    * [Emulation](https://playwright.dev/docs/emulation)
    * [Fixtures](https://playwright.dev/docs/test-fixtures)
    * [Global setup and teardown](https://playwright.dev/docs/test-global-setup-teardown)
    * [Parallelism](https://playwright.dev/docs/test-parallel)
    * [Parameterize tests](https://playwright.dev/docs/test-parameterize)
    * [Projects](https://playwright.dev/docs/test-projects)
    * [Reporters](https://playwright.dev/docs/test-reporters)
    * [Retries](https://playwright.dev/docs/test-retries)
    * [Sharding](https://playwright.dev/docs/test-sharding)
    * [Timeouts](https://playwright.dev/docs/test-timeouts)
    * [TypeScript](https://playwright.dev/docs/test-typescript)
    * [UI Mode](https://playwright.dev/docs/test-ui-mode)
    * [Web server](https://playwright.dev/docs/test-webserver)
  * [Guides](https://playwright.dev/docs/debug)
    * [Library](https://playwright.dev/docs/library)
    * [Accessibility testing](https://playwright.dev/docs/accessibility-testing)
    * [Actions](https://playwright.dev/docs/input)
    * [Assertions](https://playwright.dev/docs/test-assertions)
    * [API testing](https://playwright.dev/docs/api-testing)
    * [Authentication](https://playwright.dev/docs/auth)
    * [Auto-waiting](https://playwright.dev/docs/actionability)
    * [Best Practices](https://playwright.dev/docs/best-practices)
    * [Browsers](https://playwright.dev/docs/browsers)
    * [Chrome extensions](https://playwright.dev/docs/chrome-extensions)
    * [Clock](https://playwright.dev/docs/clock)
    * [Components (experimental)](https://playwright.dev/docs/test-components)
    * [Debugging Tests](https://playwright.dev/docs/debug)
    * [Dialogs](https://playwright.dev/docs/dialogs)
    * [Downloads](https://playwright.dev/docs/downloads)
    * [Evaluating JavaScript](https://playwright.dev/docs/evaluating)
    * [Events](https://playwright.dev/docs/events)
    * [Extensibility](https://playwright.dev/docs/extensibility)
    * [Frames](https://playwright.dev/docs/frames)
    * [Handles](https://playwright.dev/docs/handles)
    * [Isolation](https://playwright.dev/docs/browser-contexts)
    * [Locators](https://playwright.dev/docs/locators)
    * [Mock APIs](https://playwright.dev/docs/mock)
    * [Mock browser APIs](https://playwright.dev/docs/mock-browser-apis)
    * [Navigations](https://playwright.dev/docs/navigations)
    * [Network](https://playwright.dev/docs/network)
    * [Other locators](https://playwright.dev/docs/other-locators)
    * [Pages](https://playwright.dev/docs/pages)
    * [Page object models](https://playwright.dev/docs/pom)
    * [Screenshots](https://playwright.dev/docs/screenshots)
    * [Snapshot testing](https://playwright.dev/docs/aria-snapshots)
    * [Test generator](https://playwright.dev/docs/codegen)
    * [Touch events (legacy)](https://playwright.dev/docs/touch-events)
    * [Trace viewer](https://playwright.dev/docs/trace-viewer)
    * [Videos](https://playwright.dev/docs/videos)
    * [Visual comparisons](https://playwright.dev/docs/test-snapshots)
    * [WebView2](https://playwright.dev/docs/webview2)
  * [Migration](https://playwright.dev/docs/debug)
  * [Integrations](https://playwright.dev/docs/debug)
  * [Supported languages](https://playwright.dev/docs/languages)


  * [](https://playwright.dev/)
  * Guides
  * Debugging Tests


On this page
# Debugging Tests
## VS Code debugger[​](https://playwright.dev/docs/debug#vs-code-debugger "Direct link to VS Code debugger")
We recommend using the [VS Code Extension](https://playwright.dev/docs/getting-started-vscode) for debugging for a better developer experience. With the VS Code extension you can debug your tests right in VS Code, see error messages, set breakpoints and step through your tests.
![running test in debug mode](https://user-images.githubusercontent.com/13063165/212740233-3f278825-13e7-4a88-a118-dd4478d43a16.png)
### Error Messages[​](https://playwright.dev/docs/debug#error-messages "Direct link to Error Messages")
If your test fails VS Code will show you error messages right in the editor showing what was expected, what was received as well as a complete call log.
![error messaging in vs code](https://user-images.githubusercontent.com/13063165/212738654-b573b7c9-05be-476f-ab4c-201bf4265bc0.png)
### Live Debugging[​](https://playwright.dev/docs/debug#live-debugging "Direct link to Live Debugging")
You can debug your test live in VS Code. After running a test with the `Show Browser` option checked, click on any of the locators in VS Code and it will be highlighted in the Browser window. Playwright will also show you if there are multiple matches.
![live debugging in VS Code](https://user-images.githubusercontent.com/13063165/212884329-0755b007-0d69-4987-b084-38fd5bfb577d.png)
You can also edit the locators in VS Code and Playwright will show you the changes live in the browser window.
![live debugging in VS Code](https://user-images.githubusercontent.com/13063165/212884772-5022d4b1-6fab-456f-88e3-506f2354e238.png)
### Picking a Locator[​](https://playwright.dev/docs/debug#picking-a-locator "Direct link to Picking a Locator")
Pick a [locator](https://playwright.dev/docs/locators) and copy it into your test file by clicking the **Pick locator** button form the testing sidebar. Then in the browser click the element you require and it will now show up in the **Pick locator** box in VS Code. Press 'enter' on your keyboard to copy the locator into the clipboard and then paste anywhere in your code. Or press 'escape' if you want to cancel.
![Pick locators](https://user-images.githubusercontent.com/13063165/212741666-6479a702-2517-44a3-9eca-e719e13b379c.png)
Playwright will look at your page and figure out the best locator, prioritizing [role, text and test id locators](https://playwright.dev/docs/locators). If Playwright finds multiple elements matching the locator, it will improve the locator to make it resilient and uniquely identify the target element, so you don't have to worry about failing tests due to locators.
### Run in Debug Mode[​](https://playwright.dev/docs/debug#run-in-debug-mode "Direct link to Run in Debug Mode")
To set a breakpoint click next to the line number where you want the breakpoint to be until a red dot appears. Run the tests in debug mode by right clicking on the line next to the test you want to run.
![setting debug test mode](https://user-images.githubusercontent.com/13063165/212739847-ecb7dcfe-8929-45f3-b24e-f9c4b592f430.png)
A browser window will open and the test will run and pause at where the breakpoint is set. You can step through the tests, pause the test and rerun the tests from the menu in VS Code.
![running test in debug mode](https://user-images.githubusercontent.com/13063165/212740233-3f278825-13e7-4a88-a118-dd4478d43a16.png)
### Debug Tests Using Chrome DevTools[​](https://playwright.dev/docs/debug#debug-tests-using-chrome-devtools "Direct link to Debug Tests Using Chrome DevTools")
Instead of using `Debug Test`, choose `Run Test` in VS Code. With `Show Browser` enabled, the browser session is reused, letting you open Chrome DevTools for continuous debugging of your tests and the web application.
### Debug in different Browsers[​](https://playwright.dev/docs/debug#debug-in-different-browsers "Direct link to Debug in different Browsers")
By default, debugging is done using the Chromium profile. You can debug your tests on different browsers by right clicking on the debug icon in the testing sidebar and clicking on the 'Select Default Profile' option from the dropdown.
![debugging on specific profile](https://user-images.githubusercontent.com/13063165/212879469-436f8130-c62a-49e1-9d67-c1903b478d5f.png)
Then choose the test profile you would like to use for debugging your tests. Each time you run your test in debug mode it will use the profile you selected. You can run tests in debug mode by right clicking the line number where your test is and selecting 'Debug Test' from the menu.
![choosing a profile for debugging](https://user-images.githubusercontent.com/13063165/212880198-eac22c3e-68ce-47da-9163-d6b376ae7575.png)
To learn more about debugging, see [Debugging in Visual Studio Code](https://code.visualstudio.com/docs/editor/debugging).
## Playwright Inspector[​](https://playwright.dev/docs/debug#playwright-inspector "Direct link to Playwright Inspector")
The Playwright Inspector is a GUI tool to help you debug your Playwright tests. It allows you to step through your tests, live edit locators, pick locators and see actionability logs.
![Playwright Inspector](https://user-images.githubusercontent.com/13063165/212924587-4b84e5f6-b147-40e9-8c75-d7b9ab6b7ca1.png)
### Run in debug mode[​](https://playwright.dev/docs/debug#run-in-debug-mode-1 "Direct link to Run in debug mode")
Run your tests with the `--debug` flag to open the inspector. This configures Playwright for debugging and opens the inspector. Additional useful defaults are configured when `--debug` is used:
  * Browsers launch in headed mode
  * Default timeout is set to 0 (= no timeout)


#### Debug all tests on all browsers[​](https://playwright.dev/docs/debug#debug-all-tests-on-all-browsers "Direct link to Debug all tests on all browsers")
To debug all tests run the test command with the `--debug` flag. This will run tests one by one, and open the inspector and a browser window for each test.
```
npx playwright test--debug  

```

#### Debug one test on all browsers[​](https://playwright.dev/docs/debug#debug-one-test-on-all-browsers "Direct link to Debug one test on all browsers")
To debug one test on a specific line, run the test command followed by the name of the test file and the line number of the test you want to debug, followed by the `--debug` flag. This will run a single test in each browser configured in your [`playwright.config`](https://playwright.dev/docs/test-projects#configure-projects-for-multiple-browsers) and open the inspector.
```
npx playwright test example.spec.ts:10 --debug  

```

#### Debug on a specific browser[​](https://playwright.dev/docs/debug#debug-on-a-specific-browser "Direct link to Debug on a specific browser")
In Playwright you can configure projects in your [`playwright.config`](https://playwright.dev/docs/test-projects#configure-projects-for-multiple-browsers). Once configured you can then debug your tests on a specific browser or mobile viewport using the `--project` flag followed by the name of the project configured in your `playwright.config`.
```
npx playwright test--project=chromium --debug  
npx playwright test--project="Mobile Safari"--debug  
npx playwright test--project="Microsoft Edge"--debug  

```

#### Debug one test on a specific browser[​](https://playwright.dev/docs/debug#debug-one-test-on-a-specific-browser "Direct link to Debug one test on a specific browser")
To run one test on a specific browser add the name of the test file and the line number of the test you want to debug as well as the `--project` flag followed by the name of the project.
```
npx playwright test example.spec.ts:10 --project=webkit --debug  

```

### Stepping through your tests[​](https://playwright.dev/docs/debug#stepping-through-your-tests "Direct link to Stepping through your tests")
You can play, pause or step through each action of your test using the toolbar at the top of the Inspector. You can see the current action highlighted in the test code, and matching elements highlighted in the browser window.
![Playwright Inspector and browser](https://user-images.githubusercontent.com/13063165/212936618-84b87acc-bc2e-46ed-994b-32b2ef742e60.png)
### Run a test from a specific breakpoint[​](https://playwright.dev/docs/debug#run-a-test-from-a-specific-breakpoint "Direct link to Run a test from a specific breakpoint")
To speed up the debugging process you can add a [page.pause()](https://playwright.dev/docs/api/class-page#page-pause) method to your test. This way you won't have to step through each action of your test to get to the point where you want to debug.
```
await page.pause();  

```

Once you add a `page.pause()` call, run your tests in debug mode. Clicking the "Resume" button in the Inspector will run the test and only stop on the `page.pause()`.
![test with page.pause](https://user-images.githubusercontent.com/13063165/219473050-122be4c2-31d0-4cbd-aa8b-8588e8b781a6.png)
### Live editing locators[​](https://playwright.dev/docs/debug#live-editing-locators "Direct link to Live editing locators")
While running in debug mode you can live edit the locators. Next to the 'Pick Locator' button there is a field showing the [locator](https://playwright.dev/docs/locators) that the test is paused on. You can edit this locator directly in the **Pick Locator** field, and matching elements will be highlighted in the browser window.
![live editing locators](https://user-images.githubusercontent.com/13063165/212980815-1cf6ef7b-e69a-496c-898a-ec603a3bc562.png)
### Picking locators[​](https://playwright.dev/docs/debug#picking-locators "Direct link to Picking locators")
While debugging, you might need to choose a more resilient locator. You can do this by clicking on the **Pick Locator** button and hovering over any element in the browser window. While hovering over an element you will see the code needed to locate this element highlighted below. Clicking an element in the browser will add the locator into the field where you can then either tweak it or copy it into your code.
![Picking locators](https://user-images.githubusercontent.com/13063165/212968640-ce82a027-9277-4bdf-b0a9-6282fb2becb7.png)
Playwright will look at your page and figure out the best locator, prioritizing [role, text and test id locators](https://playwright.dev/docs/locators). If Playwright finds multiple elements matching the locator, it will improve the locator to make it resilient and uniquely identify the target element, so you don't have to worry about failing tests due to locators.
### Actionability logs[​](https://playwright.dev/docs/debug#actionability-logs "Direct link to Actionability logs")
By the time Playwright has paused on a click action, it has already performed [actionability checks](https://playwright.dev/docs/actionability) that can be found in the log. This can help you understand what happened during your test and what Playwright did or tried to do. The log tells you if the element was visible, enabled and stable, if the locator resolved to an element, scrolled into view, and so much more. If actionability can't be reached, it will show the action as pending.
![Actionability Logs](https://user-images.githubusercontent.com/13063165/212968907-5dede739-e0e3-482a-91cd-726a0f5b0b6d.png)
## Trace Viewer[​](https://playwright.dev/docs/debug#trace-viewer "Direct link to Trace Viewer")
Playwright [Trace Viewer](https://playwright.dev/docs/trace-viewer) is a GUI tool that lets you explore recorded Playwright traces of your tests. You can go back and forward through each action on the left side, and visually see what was happening during the action. In the middle of the screen, you can see a DOM snapshot for the action. On the right side you can see action details, such as time, parameters, return value and log. You can also explore console messages, network requests and the source code.
To learn more about how to record traces and use the Trace Viewer, check out the [Trace Viewer](https://playwright.dev/docs/trace-viewer) guide.
## Browser Developer Tools[​](https://playwright.dev/docs/debug#browser-developer-tools "Direct link to Browser Developer Tools")
When running in Debug Mode with `PWDEBUG=console`, a `playwright` object is available in the Developer tools console. Developer tools can help you to:
  * Inspect the DOM tree and **find element selectors**
  * **See console logs** during execution (or learn how to [read logs via API](https://playwright.dev/docs/api/class-page#page-event-console))
  * Check **network activity** and other developer tools features


This will also set the default timeouts of Playwright to 0 (= no timeout).
![Browser Developer Tools with Playwright object](https://user-images.githubusercontent.com/13063165/219128002-898f604d-9697-4b7f-95b5-a6a8260b7282.png)
To debug your tests using the browser developer tools, start by setting a breakpoint in your test to pause the execution using the [page.pause()](https://playwright.dev/docs/api/class-page#page-pause) method.
```
await page.pause();  

```

Once you have set a breakpoint in your test, you can then run your test with `PWDEBUG=console`.
  * Bash
  * PowerShell
  * Batch


```
PWDEBUG=console npx playwright test  

```

```
$env:PWDEBUG="console"  
npx playwright test  

```

```
setPWDEBUG=console  
npx playwright test  

```

Once Playwright launches the browser window, you can open the developer tools. The `playwright` object will be available in the console panel.
#### playwright.$(selector)[​](https://playwright.dev/docs/debug#playwrightselector "Direct link to playwright.$\(selector\)")
Query the Playwright selector, using the actual Playwright query engine, for example:
```
playwright.$('.auth-form >>text=Log in');  
  
<button>Log in</button>  

```

#### playwright.$$(selector)[​](https://playwright.dev/docs/debug#playwrightselector-1 "Direct link to playwright.$$\(selector\)")
Same as `playwright.$`, but returns all matching elements.
```
playwright.$$('li >>text=John')  
  
[<li>, <li>, <li>, <li>]  

```

#### playwright.inspect(selector)[​](https://playwright.dev/docs/debug#playwrightinspectselector "Direct link to playwright.inspect\(selector\)")
Reveal element in the Elements panel.
```
playwright.inspect('text=Log in')  

```

#### playwright.locator(selector)[​](https://playwright.dev/docs/debug#playwrightlocatorselector "Direct link to playwright.locator\(selector\)")
Create a locator and query matching elements, for example:
```
playwright.locator('.auth-form', { hasText: 'Log in'});  
  
Locator ()  
  - element: button  
  - elements: [button]  

```

#### playwright.selector(element)[​](https://playwright.dev/docs/debug#playwrightselectorelement "Direct link to playwright.selector\(element\)")
Generates selector for the given element. For example, select an element in the Elements panel and pass `$0`:
```
playwright.selector($0)  
  
"div[id="glow-ingress-block"] >> text=/.*Hello.*/"  

```

## Verbose API logs[​](https://playwright.dev/docs/debug#verbose-api-logs "Direct link to Verbose API logs")
Playwright supports verbose logging with the `DEBUG` environment variable.
  * Bash
  * PowerShell
  * Batch


```
DEBUG=pw:api npx playwright test  

```

```
$env:DEBUG="pw:api"  
npx playwright test  

```

```
setDEBUG=pw:api  
npx playwright test  

```

**For WebKit** : launching WebKit Inspector during the execution will prevent the Playwright script from executing any further and will reset pre-configured user agent and device emulation.
## Headed mode[​](https://playwright.dev/docs/debug#headed-mode "Direct link to Headed mode")
Playwright runs browsers in headless mode by default. To change this behavior, use `headless: false` as a launch option.
You can also use the [slowMo](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-option-slow-mo) option to slow down execution (by N milliseconds per operation) and follow along while debugging.
```
// Chromium, Firefox, or WebKit  
await chromium.launch({headless:false,slowMo:100});  

```

[Previous Components (experimental)](https://playwright.dev/docs/test-components)[Next Dialogs](https://playwright.dev/docs/dialogs)
  * [VS Code debugger](https://playwright.dev/docs/debug#vs-code-debugger)
    * [Error Messages](https://playwright.dev/docs/debug#error-messages)
    * [Live Debugging](https://playwright.dev/docs/debug#live-debugging)
    * [Picking a Locator](https://playwright.dev/docs/debug#picking-a-locator)
    * [Run in Debug Mode](https://playwright.dev/docs/debug#run-in-debug-mode)
    * [Debug Tests Using Chrome DevTools](https://playwright.dev/docs/debug#debug-tests-using-chrome-devtools)
    * [Debug in different Browsers](https://playwright.dev/docs/debug#debug-in-different-browsers)
  * [Playwright Inspector](https://playwright.dev/docs/debug#playwright-inspector)
    * [Run in debug mode](https://playwright.dev/docs/debug#run-in-debug-mode-1)
    * [Stepping through your tests](https://playwright.dev/docs/debug#stepping-through-your-tests)
    * [Run a test from a specific breakpoint](https://playwright.dev/docs/debug#run-a-test-from-a-specific-breakpoint)
    * [Live editing locators](https://playwright.dev/docs/debug#live-editing-locators)
    * [Picking locators](https://playwright.dev/docs/debug#picking-locators)
    * [Actionability logs](https://playwright.dev/docs/debug#actionability-logs)
  * [Trace Viewer](https://playwright.dev/docs/debug#trace-viewer)
  * [Browser Developer Tools](https://playwright.dev/docs/debug#browser-developer-tools)
  * [Verbose API logs](https://playwright.dev/docs/debug#verbose-api-logs)
  * [Headed mode](https://playwright.dev/docs/debug#headed-mode)


Learn
  * [Getting started](https://playwright.dev/docs/intro)
  * [Playwright Training](https://learn.microsoft.com/en-us/training/modules/build-with-playwright/)
  * [Learn Videos](https://playwright.dev/community/learn-videos)
  * [Feature Videos](https://playwright.dev/community/feature-videos)


Community
  * [Stack Overflow](https://stackoverflow.com/questions/tagged/playwright)
  * [Discord](https://aka.ms/playwright/discord)
  * [Twitter](https://twitter.com/playwrightweb)
  * [LinkedIn](https://www.linkedin.com/company/playwrightweb)


More
  * [GitHub](https://github.com/microsoft/playwright)
  * [YouTube](https://www.youtube.com/channel/UC46Zj8pDH5tDosqm1gd7WTg)
  * [Blog](https://dev.to/playwright)
  * [Ambassadors](https://playwright.dev/community/ambassadors)


Copyright © 2025 Microsoft
 (success: true, hasMarkdown: true, hasDescription: true)
[zym4yk] Source 5 keep: [ Skip to main content ](https://learn.microsoft.com/en-us/answers/questions/1042559/breakpoint-does-not-work-during-the-test-either-wi#main)
##  Microsoft Ignite
November 17–21, 2025
Join us to grow your skills, build connections, and explore new technologies. 
[ Register now ](https://aka.ms/msigniteFY26_MSLearn)
Dismiss alert
This browser is no longer supported.
Upgrade to Microsoft Edge to take advantage of the latest features, security updates, and technical support. 
[ Download Microsoft Edge ](https://go.microsoft.com/fwlink/p/?LinkID=2092881%20) [ More info about Internet Explorer and Microsoft Edge ](https://learn.microsoft.com/en-us/lifecycle/faq/internet-explorer-microsoft-edge)
[ Learn ](https://learn.microsoft.com/en-us/) [ ](https://www.microsoft.com)
Suggestions will filter as you type 
[ Sign in ](https://learn.microsoft.com/en-us/answers/questions/1042559/breakpoint-does-not-work-during-the-test-either-wi)
  * [ Profile ](https://learn.microsoft.com/en-us/users/me/activity/)
  * [ Settings ](https://learn.microsoft.com/en-us/users/me/settings/)


[ Sign out ](https://learn.microsoft.com/en-us/answers/questions/1042559/breakpoint-does-not-work-during-the-test-either-wi)
[ ](https://www.microsoft.com) [ Learn ](https://learn.microsoft.com/en-us/)
  * Discover
    * [ Documentation ](https://learn.microsoft.com/en-us/docs/)
In-depth articles on Microsoft developer tools and technologies
    * [ Training ](https://learn.microsoft.com/en-us/training/)
Personalized learning paths and courses
    * [ Credentials ](https://learn.microsoft.com/en-us/credentials/)
Globally recognized, industry-endorsed credentials
    * [ Q&A ](https://learn.microsoft.com/en-us/answers/)
Technical questions and answers moderated by Microsoft
    * [ Code Samples ](https://learn.microsoft.com/en-us/samples/)
Code sample library for Microsoft developer tools and technologies
    * [ Assessments ](https://learn.microsoft.com/en-us/assessments/)
Interactive, curated guidance and recommendations
    * [ Shows ](https://learn.microsoft.com/en-us/shows/)
Thousands of hours of original programming from Microsoft experts
Microsoft Applied Skills
[ Explore all Applied Skills ](https://learn.microsoft.com/en-us/credentials/applied-skills/?wt.mc_id=appliedskills_marketingspot_webpage_wwl_learnpromo)
Showcase real-world skills. Stand out!
  * Product documentation
    * [ ASP.NET ](https://learn.microsoft.com/en-us/aspnet/)
    * [ Azure ](https://learn.microsoft.com/en-us/azure/)
    * [ Dynamics 365 ](https://learn.microsoft.com/en-us/dynamics365/)
    * [ Microsoft 365 ](https://learn.microsoft.com/en-us/microsoft-365/)
    * [ Microsoft Copilot ](https://learn.microsoft.com/en-us/copilot/)
    * [ Microsoft Entra ](https://learn.microsoft.com/en-us/entra/)
    * [ Microsoft Exchange ](https://learn.microsoft.com/en-us/exchange/)
    * [ Microsoft Fabric ](https://learn.microsoft.com/en-us/fabric/)
    * [ Microsoft Intune ](https://learn.microsoft.com/en-us/mem/)
    * [ .NET ](https://learn.microsoft.com/en-us/dotnet/)
    * [ Power Apps ](https://learn.microsoft.com/en-us/power-apps/)
    * [ Power BI ](https://learn.microsoft.com/en-us/power-bi/)
    * [ Power Platform ](https://learn.microsoft.com/en-us/power-platform/)
    * [ Microsoft Purview ](https://learn.microsoft.com/en-us/purview/)
    * [ SharePoint ](https://learn.microsoft.com/en-us/sharepoint/)
    * [ SQL ](https://learn.microsoft.com/en-us/sql/)
    * [ Microsoft Teams ](https://learn.microsoft.com/en-us/microsoftteams/)
    * [ Visual Studio ](https://learn.microsoft.com/en-us/visualstudio/)
    * [ Windows ](https://learn.microsoft.com/en-us/windows/)
    * [ Windows Server ](https://learn.microsoft.com/en-us/windows-server/)
[ View all products ](https://learn.microsoft.com/en-us/docs/)
Microsoft Applied Skills
[ Explore all Applied Skills ](https://learn.microsoft.com/en-us/credentials/applied-skills/?wt.mc_id=appliedskills_marketingspot_webpage_wwl_learnpromo)
Showcase real-world skills. Stand out!
  * Development languages
    * [ C++ ](https://learn.microsoft.com/en-us/cpp/)
    * [ C# ](https://learn.microsoft.com/en-us/dotnet/csharp/)
    * [ DAX ](https://learn.microsoft.com/en-us/dax/)
    * [ Java ](https://learn.microsoft.com/en-us/java/)
    * [ OData ](https://learn.microsoft.com/en-us/odata/)
    * [ OpenAPI ](https://learn.microsoft.com/en-us/openapi/)
    * [ Power Query M ](https://learn.microsoft.com/en-us/powerquery-m/)
    * [ VBA ](https://learn.microsoft.com/en-us/office/vba/)
Microsoft Applied Skills
[ Explore all Applied Skills ](https://learn.microsoft.com/en-us/credentials/applied-skills/?wt.mc_id=appliedskills_marketingspot_webpage_wwl_learnpromo)
Showcase real-world skills. Stand out!
  * Topics
    * [ Learn for Organizations ](https://learn.microsoft.com/en-us/training/organizations/)
    * [ Artificial intelligence ](https://learn.microsoft.com/en-us/ai/)
    * [ Compliance ](https://learn.microsoft.com/en-us/compliance/)
    * [ DevOps ](https://learn.microsoft.com/en-us/devops/)
    * [ Platform engineering ](https://learn.microsoft.com/en-us/platform-engineering/)
    * [ Security ](https://learn.microsoft.com/en-us/security/)
Microsoft Applied Skills
[ Explore all Applied Skills ](https://learn.microsoft.com/en-us/credentials/applied-skills/?wt.mc_id=appliedskills_marketingspot_webpage_wwl_learnpromo)
Showcase real-world skills. Stand out!


Suggestions will filter as you type 
[ Sign in ](https://learn.microsoft.com/en-us/answers/questions/1042559/breakpoint-does-not-work-during-the-test-either-wi)
  * [ Profile ](https://learn.microsoft.com/en-us/users/me/activity/)
  * [ Settings ](https://learn.microsoft.com/en-us/users/me/settings/)


[ Sign out ](https://learn.microsoft.com/en-us/answers/questions/1042559/breakpoint-does-not-work-during-the-test-either-wi)
[ Q&A  ](https://learn.microsoft.com/en-us/answers/)
  * [ Questions ](https://learn.microsoft.com/en-us/answers/questions/)
  * [ Tags ](https://learn.microsoft.com/en-us/answers/tags/)
  * [ Help ](https://learn.microsoft.com/en-us/answers/support/)
  * More
    * [ Questions ](https://learn.microsoft.com/en-us/answers/questions/)
    * [ Tags ](https://learn.microsoft.com/en-us/answers/tags/)
    * [ Help ](https://learn.microsoft.com/en-us/answers/support/)


[ Ask a question ](https://learn.microsoft.com/en-us/answers/questions/ask/)
Add
Add to Collections Add to plan
Add to Collections
#### Share via
[ Facebook ](https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fanswers%2Fquestions%2F1042559%2Fbreakpoint-does-not-work-during-the-test-either-wi%0A%09%09%09%09%09%09%09%09%09%09%09) [ x.com ](https://twitter.com/intent/tweet?original_referer=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fanswers%2Fquestions%2F1042559%2Fbreakpoint-does-not-work-during-the-test-either-wi%0A%09%09%09%09%09%09%09%09%09%09%09&text=Breakpoint%20does%20not%20work%20during%20the%20test%20either%20with%20NUnit%20and%20MSTest.%20Visual%20Studio%202022%2C%20Net%206%0A%09%09%09%09%09%09%09%09%09%09%09&tw_p=tweetbutton&url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fanswers%2Fquestions%2F1042559%2Fbreakpoint-does-not-work-during-the-test-either-wi) [ LinkedIn ](https://www.linkedin.com/cws/share?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fanswers%2Fquestions%2F1042559%2Fbreakpoint-does-not-work-during-the-test-either-wi) Email
# Breakpoint does not work during the test either with NUnit and MSTest. Visual Studio 2022, Net 6
![](data:image/svg+xml,%20%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20height='64'%20class='font-weight-bold'%20style='font:%20600%2030.11764705882353px%20"SegoeUI",%20Arial'%20width='64'%3E%3Ccircle%20fill='hsl\(297.6,%204%,%2038%\)'%20cx='32'%20cy='32'%20r='32'%20/%3E%3Ctext%20x='50%25'%20y='55%25'%20dominant-baseline='middle'%20text-anchor='middle'%20fill='%23FFF'%20%3EA%3C/text%3E%3C/svg%3E)
[Andrzej](https://learn.microsoft.com/en-us/users/na/?userid=9dfeca3c-ebb0-42d6-b16d-a30328f12b0c) 26 Reputation points
Oct 10, 2022, 8:14 PM
Hi, I've created test project in my solution and when I want to debug my code set breakpoint it doesn't work when I click debug and it whole flow looks the same when I click run. 
I don't have idea what should I do. I tried everything what I found in google but nothing help.   
I made restart general settings in visual, I was looking any setting in tools, test, debug, build tab. 
Maybe it is any magic way to correct this because it hard to write tests.   
I can add that when I create new project new solution I've installed xUnit and it works so I guess it exist some problem in visual. Even reinstall visual studio didn't help. 
If you need more information about my configuration VS 2022 please let me know. 
Thanks for any help
Developer technologies | Visual Studio | Testing
[ Developer technologies | Visual Studio | Testing ](https://learn.microsoft.com/en-us/answers/tags/362/developer-technologies-vs-testing/)
0 questions 
Sign in to follow  Follow 
[ Sign in to follow ](https://learn.microsoft.com/en-us/answers/questions/1042559/breakpoint-does-not-work-during-the-test-either-wi) Follow question 
0 comments No comments Report a concern
I have the same question  I have the same question  1 {count} vote
* * *
[ Sign in to comment ](https://learn.microsoft.com/en-us/answers/questions/1042559/breakpoint-does-not-work-during-the-test-either-wi)
Add comment 
Comment  Use comments to ask for clarification, additional information, or improvements to the question.
Discard draft Add comment 
## 1 answer
Sort by:  Most helpful 
[Most helpful](https://learn.microsoft.com/en-us/answers/questions/1042559/breakpoint-does-not-work-during-the-test-either-wi?orderby=helpful&page=1#answers) [Newest](https://learn.microsoft.com/en-us/answers/questions/1042559/breakpoint-does-not-work-during-the-test-either-wi?orderby=newest&page=1#answers) [Oldest](https://learn.microsoft.com/en-us/answers/questions/1042559/breakpoint-does-not-work-during-the-test-either-wi?orderby=oldest&page=1#answers)
  1. ![](data:image/svg+xml,%20%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20height='64'%20class='font-weight-bold'%20style='font:%20600%2030.11764705882353px%20"SegoeUI",%20Arial'%20width='64'%3E%3Ccircle%20fill='hsl\(249.60000000000002,%2010%,%2034%\)'%20cx='32'%20cy='32'%20r='32'%20/%3E%3Ctext%20x='50%25'%20y='55%25'%20dominant-baseline='middle'%20text-anchor='middle'%20fill='%23FFF'%20%3EAX%3C/text%3E%3C/svg%3E)
[Anna Xiu-MSFT](https://learn.microsoft.com/en-us/users/na/?userid=7fa8c10d-0587-467b-93c3-cd95d138a0f7) •  Follow  31,066 Reputation points • Microsoft External Staff 
Oct 11, 2022, 4:22 AM
Hi [@Andrzej ](https://learn.microsoft.com/users/na/?userid=9dfeca3c-ebb0-42d6-b16d-a30328f12b0c) , 
Welcome to Microsoft Q&A! 
Do you have any error message or warning when the breakpoint doesn’t work? Are you debugging your test project in Debug or Release mode? 
If it is in Release mode, the breakpoints will not be hit. Please disable **Just My Code** and try again. 
Besides, you can try to delete the .vs folder in your project folder and try again. 
Sincerely,   
Anna   
*   
If the answer is the right solution, please click "**Accept Answer** " and kindly upvote it. If you have extra questions about this answer, please click "Comment".   
Note: Please follow the steps in our [documentation](https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fanswers%2Farticles%2F67444%2Femail-notifications.html&data=04%7C01%7Cv-anxiu%40microsoft.com%7C5af3c905a36544f76b1e08d98ec229e6%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637697786835924191%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=gM6NQJuK8%2BbW4175SijiYcK%2BnMi6n8S5ZodjEGYRwQw%3D&reserved=0) to enable e-mail notifications if you want to receive the related email notification for this thread. 
[ Please sign in to rate this answer. ](https://learn.microsoft.com/en-us/answers/questions/1042559/breakpoint-does-not-work-during-the-test-either-wi)
Yes No
1 person found this answer helpful.
1 comment Show comments for this answer  Report a concern
    1. ![](data:image/svg+xml,%20%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20height='64'%20class='font-weight-bold'%20style='font:%20600%2030.11764705882353px%20"SegoeUI",%20Arial'%20width='64'%3E%3Ccircle%20fill='hsl\(156.8,%2098%,%2025%\)'%20cx='32'%20cy='32'%20r='32'%20/%3E%3Ctext%20x='50%25'%20y='55%25'%20dominant-baseline='middle'%20text-anchor='middle'%20fill='%23FFF'%20%3ED%3C/text%3E%3C/svg%3E)
[Damian](https://learn.microsoft.com/en-us/users/na/?userid=4ba99856-67c8-475a-a65c-8b07bea5d04d) •  Follow  0 Reputation points
Mar 14, 2023, 2:32 PM
I'm having the same issue too with NUnit v3.13.3 (latest version), _yes in Debug mode_. We are not using auto-generated code. Hoving over the breakpoint with the warning chevron states:
> The breakpoint will not currently be hit. The source code is different from the original version.
> To allow this breakpoint to be hit: hover over the breakpoint, click the 'Settings...' button that appears, then click 'Location', 'Allow the source code to be different from the original.'
> To allow this for all breakpoints, disable the option 'Require source files to exactly match the original version' under Tools, Options, Debugging, General.
0 votes Report a concern
* * *
[ Sign in to comment ](https://learn.microsoft.com/en-us/answers/questions/1042559/breakpoint-does-not-work-during-the-test-either-wi)
Add comment 
Comment  Use comments to ask for clarification, additional information, or improvements to the question.
Discard draft Add comment 

[ Sign in to answer ](https://learn.microsoft.com/en-us/answers/questions/1042559/breakpoint-does-not-work-during-the-test-either-wi)
##  Your answer 
Answer  Answers can be marked as Accepted Answers by the question author, which helps users to know the answer solved the author's problem.
Post your answer  Discard draft
* * *
##  Additional resources 
* * *
  * [ Troubleshoot breakpoints in the debugger - Visual Studio ](https://learn.microsoft.com/en-us/troubleshoot/developer/visualstudio/debuggers/troubleshooting-breakpoints?source=recommendations)
If a breakpoint is disabled or couldn't be set, it's displayed as a hollow circle. Look here information on problems that can occur when setting breakpoints. 
  * [ Get started with breakpoints - Visual Studio (Windows) ](https://learn.microsoft.com/en-us/visualstudio/debugger/get-started-with-breakpoints?source=recommendations)
Learn about breakpoints, one of the most important debugging techniques. 
  * [ Troubleshooting .NET data breakpoints - Visual Studio ](https://learn.microsoft.com/en-us/troubleshoot/developer/visualstudio/debuggers/troubleshooting-data-breakpoint-errors?source=recommendations)
Provides explanations, solutions, and workarounds for Unable to set data breakpoint errors that occur when using Break when Value Changes (C# only). 
  * [ Debug Unit Tests with Test Explorer - Visual Studio (Windows) ](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?source=recommendations)
Debug and analyze unit tests via Test Explorer in Visual Studio by setting breakpoints to diagnose performance problems with a test method. 
  * [ Debug ASP.NET Core - Visual Studio (Windows) ](https://learn.microsoft.com/en-us/visualstudio/debugger/quickstart-debug-aspnet?source=recommendations)
Debug ASP.NET Core using the Visual Studio debugger 


Show 2 more
* * *
Module 
[ Interactively debug .NET apps with the Visual Studio debugger - Training ](https://learn.microsoft.com/en-us/training/modules/dotnet-debug-visual-studio/?source=recommendations)
Learn how to efficiently debug your .NET app by using Visual Studio to fix your bugs quickly. Analyze and fix your C# applications by using the interactive debugger within Visual Studio. 
### Question activity
[ Sign in to follow questions and users ](https://learn.microsoft.com/en-us/answers/questions/1042559/breakpoint-does-not-work-during-the-test-either-wi) Follow question 
###  Additional resources 
* * *
Module 
[ Interactively debug .NET apps with the Visual Studio debugger - Training ](https://learn.microsoft.com/en-us/training/modules/dotnet-debug-visual-studio/?source=recommendations)
Learn how to efficiently debug your .NET app by using Visual Studio to fix your bugs quickly. Analyze and fix your C# applications by using the interactive debugger within Visual Studio. 
* * *
  * [ Troubleshoot breakpoints in the debugger - Visual Studio ](https://learn.microsoft.com/en-us/troubleshoot/developer/visualstudio/debuggers/troubleshooting-breakpoints?source=recommendations)
If a breakpoint is disabled or couldn't be set, it's displayed as a hollow circle. Look here information on problems that can occur when setting breakpoints. 
  * [ Get started with breakpoints - Visual Studio (Windows) ](https://learn.microsoft.com/en-us/visualstudio/debugger/get-started-with-breakpoints?source=recommendations)
Learn about breakpoints, one of the most important debugging techniques. 
  * [ Troubleshooting .NET data breakpoints - Visual Studio ](https://learn.microsoft.com/en-us/troubleshoot/developer/visualstudio/debuggers/troubleshooting-data-breakpoint-errors?source=recommendations)
Provides explanations, solutions, and workarounds for Unable to set data breakpoint errors that occur when using Break when Value Changes (C# only). 
  * [ Debug Unit Tests with Test Explorer - Visual Studio (Windows) ](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?source=recommendations)
Debug and analyze unit tests via Test Explorer in Visual Studio by setting breakpoints to diagnose performance problems with a test method. 
  * [ Debug ASP.NET Core - Visual Studio (Windows) ](https://learn.microsoft.com/en-us/visualstudio/debugger/quickstart-debug-aspnet?source=recommendations)
Debug ASP.NET Core using the Visual Studio debugger 


Show 2 more
[English (United States)](https://learn.microsoft.com/en-us/locale?target=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fanswers%2Fquestions%2F1042559%2Fbreakpoint-does-not-work-during-the-test-either-wi)
[ Your Privacy Choices](https://aka.ms/yourcaliforniaprivacychoices)
Theme
  * Light 
  * Dark 
  * High contrast 


  * [AI Disclaimer](https://learn.microsoft.com/en-us/principles-for-ai-generated-content)
  * [Previous Versions](https://learn.microsoft.com/en-us/previous-versions/)
  * [Blog](https://techcommunity.microsoft.com/t5/microsoft-learn-blog/bg-p/MicrosoftLearnBlog)
  * [Contribute](https://learn.microsoft.com/en-us/contribute)
  * [Privacy](https://go.microsoft.com/fwlink/?LinkId=521839)
  * [Terms of Use](https://learn.microsoft.com/en-us/legal/termsofuse)
  * [Code of Conduct](https://aka.ms/msftqacodeconduct)
  * [Trademarks](https://www.microsoft.com/legal/intellectualproperty/Trademarks/)
  * © Microsoft 2025


 (success: true, hasMarkdown: true, hasDescription: true)
[zym4yk] Source 6 keep: [](https://testcafe.io/)[](https://testcafe.io/)
  * [Studio](https://www.devexpress.com/products/testcafestudio/)


  * [Guides](https://testcafe.io/documentation/402635/guides/overview/getting-started)
  * [API](https://testcafe.io/documentation/402632/api)
  * [Recipes](https://testcafe.io/documentation/402633/recipes)
  * [Examples](https://testcafe.io/documentation/402637/examples)
  * [FAQ](https://testcafe.io/documentation/402636/faq/general-info)
  * [What's New2](https://testcafe.io/release-notes)
  * [Support](https://testcafe.io/support)


Search`K`
[](https://github.com/DevExpress/testcafe)
[Star](https://github.com/DevExpress/testcafe)[9,866](https://github.com/DevExpress/testcafe/stargazers)
Guides
  * Overview
    * [Getting Started](https://testcafe.io/documentation/402635/guides/overview/getting-started)
    * [Why TestCafe?](https://testcafe.io/documentation/402631/guides/overview/why-testcafe)
  * Basic Guides
    * [Install TestCafe](https://testcafe.io/documentation/402834/guides/basic-guides/install-testcafe)
    * [Test Structure](https://testcafe.io/documentation/402831/guides/basic-guides/test-structure)
    * [Element Selectors](https://testcafe.io/documentation/402829/guides/basic-guides/element-selectors)
    * [Test Actions](https://testcafe.io/documentation/402833/guides/basic-guides/test-actions)
    * [Assertions](https://testcafe.io/documentation/402837/guides/basic-guides/assertions)
    * [Client Functions](https://testcafe.io/documentation/402832/guides/basic-guides/client-functions)
    * [Run Tests](https://testcafe.io/documentation/402830/guides/basic-guides/run-tests)
    * [Debug Tests](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests)
  * Best Practices
    * [Best Practices](https://testcafe.io/documentation/402836/guides/best-practices/best-practices)
    * [Speed Up Test Execution](https://testcafe.io/documentation/402963/guides/best-practices/speed-up-test-execution)
    * [Page Model](https://testcafe.io/documentation/402826/guides/best-practices/page-model)
    * [Bootstrap your TestCafe project with create-testcafe](https://testcafe.io/documentation/404259/guides/best-practices/create-testcafe)
  * Intermediate Guides
    * [Native Automation FAQ](https://testcafe.io/documentation/404237/guides/intermediate-guides/native-automation-mode)
    * [Browsers](https://testcafe.io/documentation/402828/guides/intermediate-guides/browsers)
    * [Mobile Devices, Cloud Browsers and Emulation](https://testcafe.io/documentation/403584/guides/intermediate-guides/mobile-devices-cloud-browsers-and-emulation)
    * [Visual Selector Debugger](https://testcafe.io/documentation/404288/guides/intermediate-guides/visual-selector-debugger)
    * [Run Tests Concurrently](https://testcafe.io/documentation/403626/guides/intermediate-guides/run-tests-concurrently)
    * [Reporters](https://testcafe.io/documentation/402825/guides/intermediate-guides/reporters)
    * [TypeScript and CoffeeScript](https://testcafe.io/documentation/402824/guides/intermediate-guides/typescript-and-coffeescript)
    * [Authentication and Roles](https://testcafe.io/documentation/402845/guides/intermediate-guides/authentication)
    * [Screenshots and Videos](https://testcafe.io/documentation/402840/guides/intermediate-guides/screenshots-and-videos)
    * [API Testing](https://testcafe.io/documentation/403971/guides/intermediate-guides/api-testing)
    * [Hooks](https://testcafe.io/documentation/403435/guides/intermediate-guides/hooks)
    * [Quarantine Mode](https://testcafe.io/documentation/403841/guides/intermediate-guides/quarantine-mode)
    * [Live Mode](https://testcafe.io/documentation/403842/guides/intermediate-guides/live-mode)
    * [Intercept HTTP Requests](https://testcafe.io/documentation/402842/guides/intermediate-guides/intercept-http-requests)
    * [Metadata and Filtering](https://testcafe.io/documentation/403436/guides/intermediate-guides/metadata-and-filtering)
    * [Multiple Browser Windows](https://testcafe.io/documentation/402841/guides/intermediate-guides/multiple-browser-windows)
  * Advanced Guides
    * [Advanced Selector Techniques](https://testcafe.io/documentation/403655/guides/advanced-guides/advanced-selector-techniques)
    * [Inject Client Scripts](https://testcafe.io/documentation/402843/guides/advanced-guides/inject-client-scripts)
    * [ESM Module Support](https://testcafe.io/documentation/404258/guides/advanced-guides/esm-module-support)
    * [Create Custom Test Actions](https://testcafe.io/documentation/404150/guides/advanced-guides/custom-test-actions)
    * [Fire DOM Events](https://testcafe.io/documentation/403219/guides/advanced-guides/fire-dom-events)
    * [Execute Shell Commands on Startup](https://testcafe.io/documentation/403849/guides/advanced-guides/execute-shell-commands-on-startup)
    * [Test HTTPS Features and HTTP/2 Websites](https://testcafe.io/documentation/402839/guides/advanced-guides/test-https-features-and-http2-websites)
    * [Modify Reporter Output](https://testcafe.io/documentation/404388/guides/advanced-guides/modify-reporter-output)
    * [Detect the Client Browser and Platform](https://testcafe.io/documentation/402844/guides/advanced-guides/detect-the-client-browser-and-platform)
    * [Use the TestCafe Docker Image](https://testcafe.io/documentation/402838/guides/advanced-guides/use-testcafe-docker-image)
    * [Built-In Wait Mechanisms](https://testcafe.io/documentation/402827/guides/advanced-guides/built-in-wait-mechanisms)
    * [Replay Chrome User Flow Recordings](https://testcafe.io/documentation/403998/guides/advanced-guides/chrome-replay-support)
  * Continuous Integration
    * [Integrate TestCafe with AppVeyor](https://testcafe.io/documentation/402823/guides/continuous-integration/appveyor)
    * [Integrate TestCafe with Azure DevOps](https://testcafe.io/documentation/402822/guides/continuous-integration/azure-devops)
    * [Run Tests in Bitbucket Pipelines](https://testcafe.io/documentation/402821/guides/continuous-integration/bitbucket-pipelines)
    * [Integrate TestCafe With CircleCI](https://testcafe.io/documentation/402819/guides/continuous-integration/circleci)
    * [Run Tests on LambdaTest with CircleCI](https://testcafe.io/documentation/402820/guides/continuous-integration/circleci-and-lambdatest)
    * [Integrate TestCafe with GitHub Actions](https://testcafe.io/documentation/402817/guides/continuous-integration/github-actions)
    * [Run Tests on BrowserStack with GitHub Actions](https://testcafe.io/documentation/402818/guides/continuous-integration/github-actions-and-browserstack)
    * [Integrate TestCafe with GitLab](https://testcafe.io/documentation/402816/guides/continuous-integration/gitlab)
    * [Integrate TestCafe with Jenkins](https://testcafe.io/documentation/402815/guides/continuous-integration/jenkins)
    * [Integrate TestCafe with TeamCity](https://testcafe.io/documentation/402847/guides/continuous-integration/teamcity)
    * [Run Tests in Travis CI](https://testcafe.io/documentation/402813/guides/continuous-integration/travis)
    * [Run Tests on Sauce Labs with Travis CI](https://testcafe.io/documentation/402814/guides/continuous-integration/travis-and-sauce-labs)
  * Extend TestCafe
    * [Install Plugins](https://testcafe.io/documentation/402811/guides/extend-testcafe/install-plugins)
    * [Reporter Plugin](https://testcafe.io/documentation/402810/guides/extend-testcafe/reporter-plugin)
    * [Browser Provider Plugin](https://testcafe.io/documentation/402812/guides/extend-testcafe/browser-provider-plugin)


[Guides](https://testcafe.io/documentation/402634/guides)→Debug Tests
# Debug Tests
Some tests fail even when your website works as intended. This guide describes tools and strategies that you can use to fix failing TestCafe tests.
##  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#table-of-contents)Table of contents[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#table-of-contents)
  * [Common reasons for test failure](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#common-reasons-for-test-failure)
    * [Element Selector issues](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#element-selector-issues)
    * [Network issues](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#network-issues)
    * [Browser issues](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#browser-issues)
    * [Application errors](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#application-errors)
  * [Debug mode](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#debug-mode)
  * [Visual Selector debugger](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#visual-selector-debugger)
  * [Quarantine mode](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#quarantine-mode)
  * [Node.js debugger](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#nodejs-debugger)
  * [Adjust timeouts](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#adjust-timeouts)
  * [Adjust test speed](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#adjust-test-speed)
  * [Take screenshots on test failure](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#take-screenshots-on-test-failure)
  * [Skip JavaScript errors](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#skip-javascript-errors)


##  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#common-reasons-for-test-failure)Common reasons for test failure[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#common-reasons-for-test-failure)
Most tests fail for one of the following reasons:
  1. [Element Selector issues](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#element-selector-issues)
  2. [Network issues](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#network-issues)
  3. [Browser issues](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#browser-issues)
  4. [Application errors](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#application-errors)


If you don’t understand what causes a test to fail, try one of the following strategies:
  * Enter debug mode and [inspect the page](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#debug-mode).
  * Take [screenshots and videos](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#take-screenshots-on-test-failure) of the test to capture the moment of failure.
  * Decrease [test execution speed](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#adjust-test-speed) to pinpoint the cause of failure.


If a test yields inconclusive results, determine the reason for its irregular behavior. If you can’t resolve the issue, [quarantine the test](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#quarantine-mode) to rule out false negatives.
###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#element-selector-issues)Element Selector issues[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#element-selector-issues)
Actions and assertions use [Element Selector queries](https://testcafe.io/documentation/402829/guides/basic-guides/element-selectors) to interact with the DOM. Imprecise and poorly written Element Selector queries may cause actions and assertions to fail or yield unexpected results.
  * Make sure that your Selectors adhere to [the recommended guidelines](https://testcafe.io/documentation/402836/guides/best-practices/best-practices#selector-strategy).
  * Use the [Visual Selector debugger](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#visual-selector-debugger) to troubleshoot Element Selector queries.
  * If your Selector query is correct, but TestCafe cannot find the page element in time, adjust the [Element Selector timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#selector-timeout). 
  * If an assertion fails before your application updates page content, adjust the [Assertion timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#assertion-timeout).


See also: [My tests fail because TestCafe cannot locate a page element. Why does this happen?](https://testcafe.io/documentation/403937/faq/working-with-testcafe#my-tests-fail-because-testcafe-cannot-locate-a-page-element-why-does-this-happen)
###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#network-issues)Network issues[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#network-issues)
TestCafe tests fail when the browser fails to load a web page.
  * If your server is slow to respond, increase the [Page request timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#page-request-timeout) or the [AJAX request timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#ajax-request-timeout).
  * Enable the [Retry Test Pages](https://testcafe.io/documentation/402638/reference/configuration-file#retrytestpages) option to retry unsuccessful page requests.
  * If TestCafe routes your request through a low bandwidth [proxy](https://testcafe.io/documentation/402830/guides/basic-guides/run-tests#use-a-proxy), turn the proxy off, or [bypass](https://testcafe.io/documentation/402639/reference/command-line-interface#--proxy-bypass-rules) the proxy when you access a particular resource.
  * TestCafe uses [two network ports](https://testcafe.io/documentation/402639/reference/command-line-interface#--ports-port1port2) in the [0 - 65535] range to automate browsers. TestCafe cannot run if your firewall blocks network activity on these ports.


###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#browser-issues)Browser issues[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#browser-issues)
TestCafe tests fail when browsers disconnect or malfunction.
  * If you run multiple browsers concurrently, you may exhaust your system resources. Poor browser performance can negatively impact test performance. Decrease [the concurrency factor](https://testcafe.io/documentation/403626/guides/intermediate-guides/run-tests-concurrently) or run your browsers in [headless mode](https://testcafe.io/documentation/402828/guides/intermediate-guides/browsers#test-in-headless-mode).
  * TestCafe fails when a browser does not initialize within the [browser initialization timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#browser-initialization-timeout). Increase the timeout to account for slow browser performance.
  * TestCafe may experience performance issues if you minimize the browser window, or run the test in a background tab. The operating system detects that the browser runs in the background, and does not allocate the necessary amount of system resources to the test run.
  * TestCafe automatically restarts browsers that appear unresponsive. If TestCafe restarts your browser by mistake, enable [development mode](https://testcafe.io/documentation/402638/reference/configuration-file#developmentmode) to prevent this behavior.


###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#application-errors)Application errors[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#application-errors)
  * If your application yields a JavaScript error, TestCafe fails the test. If you cannot fix the JavaScript error in question, enable the [skipJsErrors](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#skip-javascript-errors) option to let tests proceed.
  * If your application is slow to load, adjust the [page request timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#page-request-timeout).


##  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#debug-mode)Debug mode[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#debug-mode)
![Debug mode footer](https://testcafe.io/images/debug-mode.png)
If you launch TestCafe in [debug mode](https://testcafe.io/documentation/402639/reference/command-line-interface#-d---debug-mode), TestCafe pauses the test before the first action. You can then advance the test step by step, inspect the page, and use the [Visual Selector debugger](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#visual-selector-debugger).
TestCafe displays information about breakpoints in the test log:
![Logging Debugger Breakpoints](https://testcafe.io/images/debugging/log-debugger.png)
Enable the `debugMode` setting to enter debug mode:
  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#-d---debug-mode)```
testcafe chrome test.js --debug-mode

```

  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#debugmode)```
{
    "debugMode": true
}

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ debugMode: true});

```



To enter debug mode on test failure, enable the `debugOnFail` option:
  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#--debug-on-fail)```
testcafe chrome tests/sample-fixture.js --debug-on-fail

```

  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#debugonfail)```
{
    "debugOnFail": true
}

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ debugOnFail: true});

```



Use the [t.debug](https://testcafe.io/documentation/402707/reference/test-api/testcontroller/debug) action to manually add a breakpoint. If you include a Selector query as the argument, TestCafe automatically passes the query to the [Visual Selector Debugger](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#visual-selector-debugger).
```
fixture `Debugger example`
    .page `http://devexpress.github.io/testcafe/example/`;

test('Debugger', async t => {
    await t
        .debug()
        .setNativeDialogHandler(() => true)
        .click('#populate')
        .click('#submit-button');
});

```

Important
When you enter [debug mode](https://testcafe.io/documentation/402707/reference/test-api/testcontroller/debug) with [native automation](https://testcafe.io/documentation/404237/guides/intermediate-guides/native-automation-mode) enabled, the web page **does not** freeze. The application reacts to clicks, hovers, and other interactions.
##  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#visual-selector-debugger)Visual Selector debugger[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#visual-selector-debugger)
Use the [Visual Selector debugger](https://testcafe.io/documentation/404288/guides/intermediate-guides/visual-selector-debugger) to interactively debug and generate Selector queries.
  * Enter a Selector query to see page elements that match it.
  * Click a page element to generate a Selector query.
  * Click the “Hide Picker” button to disable the debugger and hide the Selector input field.


![Enter a Selector query](https://testcafe.io/images/inspector/enter-query.gif)
If you pass a Selector query to the [t.debug()](https://testcafe.io/documentation/402707/reference/test-api/testcontroller/debug) method, TestCafe automatically inserts the query into the input field of the Visual Selector Debugger, and highlights page elements that match the query. 
##  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#quarantine-mode)Quarantine mode[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#quarantine-mode)
Enable quarantine mode to eliminate false negatives and detect unstable tests. When a test fails, TestCafe quarantines it, and repeats it until the test yields conclusive results.
Enable quarantine mode with the `-q (--quarantine-mode)` command line flag, the `quarantineMode` configuration file setting, or the `quarantineMode` [Test Runner](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run) option:
  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#-q-attemptlimitvalue-successthresholdvalue2---quarantine-mode-attemptlimitvalue-successthresholdvalue2)```
testcafe chrome ./tests/ -q

```

  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#quarantinemode)```
{
    "quarantineMode": true
}

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ quarantineMode: true });

```



##  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#nodejs-debugger)Node.js debugger[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#nodejs-debugger)
You can debug server-side code in Chrome Developer Tools and popular IDEs.
Important
Use the [Visual Selector debugger](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#visual-selector-debugger) to debug Element Selector queries.
Specify the [--inspect-brk](https://testcafe.io/documentation/402639/reference/command-line-interface#--inspect-brk) CLI flag to launch a Node.js debugger and use the [Google Chrome Developer Tools panel](https://testcafe.io/documentation/402801/recipes/debugging/chrome-dev-tools):
```
testcafe --inspect-brk chrome ./tests

```

![Node.js debugger link](https://testcafe.io/images/node-debugger.png)
For more information on debugging Node.js code in your text editor, read the following tutorials:
  * [Visual Studio Code](https://testcafe.io/documentation/402800/recipes/debugging/visual-studio-code)
  * [WebStorm](https://testcafe.io/documentation/402799/recipes/debugging/webstorm)


##  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#adjust-timeouts)Adjust timeouts[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#adjust-timeouts)
Note
High timeout values may increase the total runtime of your test suite.
  * [Selector timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#selector-timeout)
  * [Assertion timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#assertion-timeout)
  * [Page load timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#page-load-timeout)
  * [Page request timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#page-request-timeout)
  * [AJAX request timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#ajax-request-timeout)
  * [Browser initialization timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#browser-initialization-timeout)
  * [Test execution timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#test-execution-timeout)
  * [Run execution timeout](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#run-execution-timeout)


###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#selector-timeout)Selector timeout[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#selector-timeout)
If the action target is slow to appear, investigate the root cause of the issue. If you cannot improve the performance of your network or application, increase the **Selector timeout**.
If TestCafe fails to resolve an [element selector](https://testcafe.io/documentation/402829/guides/basic-guides/element-selectors) query within the Selector timeout period, the test fails.
Default value: **10000 ms**
Specify the [timeout](https://testcafe.io/documentation/402756/reference/test-api/selector/constructor#optionstimeout) option to change the Selector timeout for an individual Selector query:
```
const footerSelector = Selector('#footer', { timeout: 20000 });

```

Use one of the following options to change the Selector timeout for the entire test run:
  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#selectortimeout)```
{
    "selectorTimeout": 3000
}

```

  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#--selector-timeout-ms)```
testcafe chrome my-tests --selector-timeout 500000

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ selectorTimeout: 50000 });

```



###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#assertion-timeout)Assertion timeout[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#assertion-timeout)
If an assertion fails because your application is slow to update its content, investigate the root cause of the issue. If you cannot improve the performance of your application, increase the **Assertion timeout**.
TestCafe executes [compatible assertions](https://testcafe.io/documentation/402837/guides/basic-guides/assertions#smart-assertion-query-mechanism) multiple times within the **Assertion timeout** period, repeating measurements and calculations with each attempt. If an assertion does not succeed, the test fails.
Default value: **3000 ms**
Specify the [timeout](https://testcafe.io/documentation/402837/guides/basic-guides/assertions#assertion-timeout) option to change the timeout for an individual assertion: 
```
await t.expect(Selector('h1').innerText).eql('Hello World!', { timeout: 20000 });

```

Use one of the following options to change the assertion timeout for the entire test run:
  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#assertiontimeout)```
{
    "assertionTimeout": 1000
}

```

  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#--assertion-timeout-ms)```
testcafe chrome my-tests --assertion-timeout 10000

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ assertionTimeout: 50000 });

```



###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#page-load-timeout)Page Load timeout[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#page-load-timeout)
The **Page Load timeout** defines the maximum amount of time between the `DOMContentLoaded` event and the `window.load` event. TestCafe applies the timeout when the user delays test execution until the `window.loadEventRaised` event.
Default value: **3000 ms**
Use the [test.timeouts](https://testcafe.io/documentation/403062/reference/test-api/test/timeouts) method to change the page load timeout for an individual test:
```
test('My test', async () => {
    /* test code goes here */
}).timeouts({ pageLoadTimeout:    5000 });

```

Use one of the following options to change the page load timeout for the entire test run:
  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#pageloadtimeout)```
{
    "pageLoadTimeout": 5000
}

```

  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#--page-load-timeout-ms)```
testcafe chrome my-tests --page-load-timeout 5000

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ assertionTimeout: 50000 });

```



###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#ajax-request-timeout)AJAX request timeout[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#ajax-request-timeout)
Note
[Disable native automation](https://testcafe.io/documentation/404237/guides/intermediate-guides/native-automation-mode) to adjust the **AJAX request timeout**.
If your application is slow to respond to AJAX requests, investigate the root cause of the issue. If you cannot improve the performance of your application, increase the **AJAX request timeout**.
If TestCafe does not resolve an XHR/Fetch request within the AJAX request timeout period, the test fails.
Default value: **120000 ms**
Use the [test.timeouts](https://testcafe.io/documentation/403062/reference/test-api/test/timeouts) method to change the AJAX request timeout for an individual test:
```
test('My test', async () => {
    /* test code goes here */
}).timeouts({ ajaxRequestTimeout:    5000 });

```

Use one of the following options to change the AJAX request timeout for the entire test run:
  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#ajaxrequesttimeout)```
{
    "ajaxRequestTimeout": 40000
}

```

  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#--ajax-request-timeout-ms)```
testcafe chrome my-tests --ajax-request-timeout 40000

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ ajaxRequestTimeout: 50000 });

```



###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#page-request-timeout)Page request timeout[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#page-request-timeout)
Note
[Disable native automation](https://testcafe.io/documentation/404237/guides/intermediate-guides/native-automation-mode) to adjust the **Page request timeout**.
If your application is slow to respond to HTTP requests, investigate the root cause of the issue. If you cannot improve the performance of your application, increase the **Page request timeout**.
If the server does not fulfill a page request within the Page request timeout period, the test fails.
Default value: **25000 ms**
Use the [test.timeouts](https://testcafe.io/documentation/403062/reference/test-api/test/timeouts) method to change the page request timeout for an individual test:
```
test('My test', async () => {
    /* test code goes here */
}).timeouts({ pageRequestTimeout:    5000 });

```

Use one of the following options to change the page request timeout for the entire test run:
  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#pagerequesttimeout)```
{
    "pageRequestTimeout": 8000
}

```

  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#--page-request-timeout-ms)```
testcafe chrome my-tests --page-request-timeout 8000

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ pageRequestTimeout: 8000 });

```



###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#browser-initialization-timeout)Browser initialization timeout[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#browser-initialization-timeout)
If your browser is slow to launch, investigate the root cause of the issue. If you cannot improve the performance of your testing environment, increase the **Browser initialization timeout**.
If one or more browsers fail to connect to TestCafe within the Browser initialization timeout period, the test run fails.
![Browser init error](https://testcafe.io/images/browser-disconnection.png)
**Default value** : `120000` for [local browsers](https://testcafe.io/documentation/402639/reference/command-line-interface#local-browsers), `360000` for [remote browsers](https://testcafe.io/documentation/402639/reference/command-line-interface#cloud-browsers-custom-browsers-remote-browsers).
  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#browserinittimeout)```
{
    "browserInitTimeout": 180000
}

```

  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#--browser-init-timeout-ms)```
testcafe chrome my-tests --browser-init-timeout 180000

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ browserInitTimeout: 8000 });

```



###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#test-execution-timeout)Test Execution timeout[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#test-execution-timeout)
When the total execution time of a test exceeds the **Test Execution timeout** , TestCafe terminates the test, even if the browser is responsive.
Default value: **none (timeout disabled)**
Note
Continuous Integration systems offer built-in task runtime management capabilities. Use the Test Execution timeout when other options are not available.
  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#testexecutiontimeout)```
{
    "testExecutionTimeout": 180000
}

```

  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#--test-execution-timeout-ms)```
testcafe chrome my-tests --test-execution-timeout 180000

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ testExecutionTimeout: 8000 });

```



###  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#run-execution-timeout)Run Execution timeout[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#run-execution-timeout)
When the total execution time of a run exceeds the **Run Execution timeout** , TestCafe terminates the test run, even if the browsers are responsive.
Default value: **none (timeout disabled)**
Note
Continuous Integration systems offer built-in task runtime management capabilities. Use the Run Execution timeout when other options are not available.
  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#runexecutiontimeout)```
{
    "runExecutionTimeout": 180000
}

```

  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#--run-execution-timeout-ms)```
testcafe chrome my-tests --run-execution-timeout 180000

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ runExecutionTimeout: 8000 });

```



##  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#adjust-test-speed)Adjust test speed[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#adjust-test-speed)
Use the `speed` parameter to limit test execution speed. The parameter accepts values between `1` (the fastest speed, **default value**) and `0.01` (the slowest speed).
If you limit test execution speed, it is easier to notice differences in test behavior.
  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#--speed-factor)```
testcafe chrome ./my-tests --speed 0.1

```

  * [Configuration file](https://testcafe.io/documentation/402638/reference/configuration-file#speed)```
{
    "speed": 0.1
}

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run)```
await runner.run({ speed: 0.1 });

```



##  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#take-screenshots-on-test-failure)Take screenshots on test failure[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#take-screenshots-on-test-failure)
Enable the `takeOnFails` option to take screenshots on test failure. Use the screenshots to determine the cause of the failure.
Additionally, you can record [test videos](https://testcafe.io/documentation/402840/guides/intermediate-guides/screenshots-and-videos) to review video footage of your tests.
Important
Video recording incurs a heavy system resource overhead. If you record too many videos simultaneously, test performance may suffer.
  * [Configuration File](https://testcafe.io/documentation/402638/reference/configuration-file#screenshotstakeonfails)```
{
    "screenshots": {
        "takeOnFails": true
    }
}

```

  * [Command Line Interface](https://testcafe.io/documentation/402639/reference/command-line-interface#takeonfails)```
testcafe all tests/sample-fixture.js -s takeOnFails=true

```

  * [TestCafe Test Runner API](https://testcafe.io/documentation/402654/reference/testcafe-api/runner/screenshots)```
runner.screenshots({
    takeOnFails: true
});

```



##  [](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#skip-javascript-errors)Skip JavaScript errors[](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#skip-javascript-errors)
> Main article: [Skip JavaScript Errors](https://testcafe.io/documentation/404038/recipes/debugging/skip-javascript-errors)
TestCafe tests fail when a page yields a JavaScript error. Usually, errors are signs of malfunction that warrant action. However, in some cases third-party modules yield errors that the user cannot fix.
If you enable the `skipJsErrors` option, TestCafe deliberately **ignores** JavaScript errors and lets tests proceed.
  * Use the [CLI flag](https://testcafe.io/documentation/402639/reference/command-line-interface#-e-messagevalue-stackvalue2-pageurlvalue3---skip-js-errors-messagevalue-stackvalue2-pageurlvalue3), the [configuration file property](https://testcafe.io/documentation/402638/reference/configuration-file#skipjserrors), or the [Test Runner API](https://testcafe.io/documentation/402655/reference/testcafe-api/runner/run#skipjserrors) to ignore JavaScript errors throughout your entire test suite.


  * Use the [fixture.skipJsErrors](https://testcafe.io/documentation/404025/reference/test-api/fixture/skipjserrors) method to ignore JavaScript errors for individual fixtures. 


  * Use the [test.skipJsErrors](https://testcafe.io/documentation/404026/reference/test-api/test/skipjserrors) method to ignore JavaScript errors in individual tests.


  * Use the [t.skipJsErrors](https://testcafe.io/documentation/404027/reference/test-api/testcontroller/skipjserrors) action to ignore JavaScript errors at specific points in the test.


For each of the methods above, you can define the following options:
  * The `pageUrl` option filters errors by page URL.
  * The `message` option filters errors by message.
  * The `stack` option filters errors by call stack.


On this page
  * [Table of contents](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#table-of-contents)
  * [Common reasons for test failure](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#common-reasons-for-test-failure)
  * [Debug mode](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#debug-mode)
  * [Visual Selector debugger](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#visual-selector-debugger)
  * [Quarantine mode](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#quarantine-mode)
  * [Node.js debugger](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#nodejs-debugger)
  * [Adjust timeouts](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#adjust-timeouts)
  * [Adjust test speed](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#adjust-test-speed)
  * [Take screenshots on test failure](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#take-screenshots-on-test-failure)
  * [Skip JavaScript errors](https://testcafe.io/documentation/402835/guides/basic-guides/debug-tests#skip-javascript-errors)


![TestCafe](https://testcafe.io/img/testcafe-logo.svg)
TestCafe is a user-friendly end-to-end testing framework. Free and open source test runner. Powerful desktop app. Enterprise-quality web services.
[Facebook](https://www.facebook.com/dxtestcafe/)[Twitter](https://twitter.com/DXTestCafe)[GitHub](https://github.com/DevExpress/testcafe)Email[Youtube](https://www.youtube.com/playlist?list=PL8h4jt35t1wirqPiT68hV0cpX1ppQMVtF)
## Footer navigation
### Product
  * [Why TestCafe](https://testcafe.io/documentation/402631/guides/overview/why-testcafe)
  * [Getting Started](https://testcafe.io/documentation/402635/guides/overview/getting-started)
  * [TestCafe Studio](https://www.devexpress.com/products/testcafestudio/)
  * [Integrations](https://testcafe.io/documentation/402809/guides/continuous-integration)
  * [What's New](https://testcafe.io/release-notes)
  * [Roadmap](https://testcafe.io/402949/roadmap)


### Features
  * [Cross-browser tests](https://testcafe.io/documentation/402828/guides/concepts/browsers)
  * [API tests](https://testcafe.io/documentation/403971/guides/intermediate-guides/api-testing)
  * [Multi-window tests](https://testcafe.io/documentation/402841/guides/intermediate-guides/multiple-browser-windows)
  * [Iframe tests](https://testcafe.io/documentation/402833/guides/basic-guides/test-actions#work-with-iframes)
  * [Live Mode](https://testcafe.io/documentation/402830/guides/basic-guides/run-tests#live-mode)
  * [Unstable test detection](https://testcafe.io/documentation/402830/guides/basic-guides/run-tests#quarantine-mode)
  * [Screenshots and Videos](https://testcafe.io/documentation/402840/guides/intermediate-guides/screenshots-and-videos)
  * [Concurrent test runs](https://testcafe.io/documentation/403626/guides/intermediate-guides/run-tests-concurrently)
  * [TypeScript tests](https://testcafe.io/documentation/402824/guides/concepts/typescript-and-coffeescript)


### Resources
  * [Blog](https://testcafe.io/resources/team-blog)
  * [Community Blogs](https://testcafe.io/resources/community-blogs)
  * [Courses](https://testcafe.io/resources/courses)
  * [Books](https://testcafe.io/resources/books)
  * [Case studies](https://testcafe.io/case-studies)


### Learn
  * [Docs](https://testcafe.io/documentation/402635/guides/overview/getting-started)
  * [FAQ](https://testcafe.io/documentation/402636/faq/general-info)
  * [Guides](https://testcafe.io/documentation/402634/guides)
  * [Best Practices](https://testcafe.io/documentation/402836/guides/basic-guides/best-practices)
  * [Examples](https://testcafe.io/documentation/402637/examples)


### Support
  * [Report an Issue](https://github.com/DevExpress/testcafe/issues/new?assignees=&labels=TYPE%3A+bug&template=bug_report.yaml)
  * [Suggest a Feature](https://github.com/DevExpress/testcafe/issues/new?assignees=&labels=TYPE%3A+enhancement&template=feature_request.yaml)
  * [Ask on StackOverflow](https://stackoverflow.com/questions/ask?tags=testcafe)


© 2012–2023 Developer Express Inc. Use of this site constitutes acceptance of our [Privacy Policy.](https://www.devexpress.com/aboutus/privacy-policy.xml)
All trademarks or registered trademarks are property of their respective owners.
Why We Use Cookies
This site uses cookies to make your browsing experience more convenient and personal. Cookies store useful information on your computer to help us improve the efficiency and relevance of our site for you. In some cases, they are essential to making the site work properly. By accessing this site, you consent to the use of cookies. For more information, refer to DevExpress [privacy policy](https://www.devexpress.com/aboutus/privacy-policy.xml) and[ cookie policy](https://www.devexpress.com/AboutUs/cookie-policy.xml).
I understand
 (success: true, hasMarkdown: true, hasDescription: true)
[zym4yk] ✅ Filtered to 6 sources
[zym4yk] Query: "debug test working" -> Detected ticker: null
[zym4yk] 📝 Preparing context from 6 sources...
[zym4yk] Source 1 context:
[zym4yk]   • Original content length: 23286
[zym4yk]   • Relevant content length: 2000
[zym4yk]   • Success indicator: ""
[zym4yk] Source 2 context:
[zym4yk]   • Original content length: 53346
[zym4yk]   • Relevant content length: 2000
[zym4yk]   • Success indicator: ""
[zym4yk] Source 3 context:
[zym4yk]   • Original content length: 46767
[zym4yk]   • Relevant content length: 2000
[zym4yk]   • Success indicator: ""
[zym4yk] Source 4 context:
[zym4yk]   • Original content length: 23609
[zym4yk]   • Relevant content length: 2000
[zym4yk]   • Success indicator: ""
[zym4yk] Source 5 context:
[zym4yk]   • Original content length: 19007
[zym4yk]   • Relevant content length: 2000
[zym4yk]   • Success indicator: ""
[zym4yk] Source 6 context:
[zym4yk]   • Original content length: 43999
[zym4yk]   • Relevant content length: 2000
[zym4yk]   • Success indicator: ""
[zym4yk] ✅ Final context length: 12922
[zym4yk] 💬 Creating text stream for query: debug test working
[zym4yk] 📝 Context length: 12922
[zym4yk] ✅ Successful crawls: 6/6
[zym4yk] 🎬 Video sources in final context: 0
[zym4yk] 👁️ Context preview: [1] Debug Unit Tests with Test Explorer - Visual Studio (Windows) | Microsoft Learn
URL: https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022
[ Skip to main content ](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022#main) [ Skip to Ask Learn chat experience ](https://learn.microsoft.com/en-us/visualstudio/test/debug-unit-tests-with-test-explorer?view=vs-2022)
##  Microsoft Ignite
November 17–21, 2...
❌ Cache MISS for key: 4835b566...
[zym4yk] Generating new LLM response
💾 Cached data for key: 4835b566... (TTL: 1800s)
 POST /api/crawlplexity/search 200 in 23565ms
 ✓ Compiled in 873ms
Crawlplexity Chat State: {
  messagesCount: 0,
  sourcesCount: 0,
  isLoading: false,
  error: undefined
}
 GET / 200 in 1049ms
 GET /api/models 200 in 179ms
[xtcymb] Crawlplexity Search API called
[xtcymb] 🔍 RAW REQUEST BODY: {
  "messages": [
    {
      "role": "user",
      "content": "test backend debug events",
      "id": "y7gqh9",
      "createdAt": "2025-08-01T11:59:14.314Z"
    }
  ],
  "query": "test backend debug events",
  "research_type": "comprehensive",
  "model": "gpt-4o-mini",
  "parameters": {
    "temperature": 0.7,
    "max_tokens": 2000,
    "top_p": 1,
    "frequency_penalty": 0,
    "presence_penalty": 0
  },
  "debugMode": true
}
[xtcymb] Query received: test backend debug events
[xtcymb] Selected model: gpt-4o-mini undefined
[xtcymb] User parameters: {
  temperature: 0.7,
  max_tokens: 2000,
  top_p: 1,
  frequency_penalty: 0,
  presence_penalty: 0
}
[xtcymb] Validated parameters: { temperature: 0.7, max_tokens: 2000, top_p: 1, frequency_penalty: 0 }
[xtcymb] 🐛 DEBUG MODE VALUE: true boolean
[xtcymb] 🐛 DEBUG MODE FROM BODY: true boolean
[xtcymb] Creating debug callback, debugMode: true
[xtcymb] Debug mode enabled, creating callback function
[xtcymb] Debug callback created: true
[xtcymb] 🧪 SENDING TEST DEBUG EVENT
❌ Cache MISS for key: 345d26de...
🔍 VIDEO DEBUG: Classifying 6 URLs...
🔍 Classifying URL 1/6: https://firebase.google.com/docs/analytics/debugview
[VideoProcessingClient] Classifying URL: https://firebase.google.com/docs/analytics/debugview using http://localhost:11236/classify
🔍 Classifying URL 2/6: https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/about-backend-events
[VideoProcessingClient] Classifying URL: https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/about-backend-events using http://localhost:11236/classify
🔍 Classifying URL 3/6: https://segment.com/docs/getting-started/06-testing-debugging/
[VideoProcessingClient] Classifying URL: https://segment.com/docs/getting-started/06-testing-debugging/ using http://localhost:11236/classify
🔍 Classifying URL 4/6: https://moldstud.com/articles/p-exploring-the-process-of-testing-and-debugging-in-back-end-development
[VideoProcessingClient] Classifying URL: https://moldstud.com/articles/p-exploring-the-process-of-testing-and-debugging-in-back-end-development using http://localhost:11236/classify
🔍 Classifying URL 5/6: https://playwright.dev/docs/debug
[VideoProcessingClient] Classifying URL: https://playwright.dev/docs/debug using http://localhost:11236/classify
🔍 Classifying URL 6/6: https://www.getambassador.io/blog/master-end-to-end-api-testing
[VideoProcessingClient] Classifying URL: https://www.getambassador.io/blog/master-end-to-end-api-testing using http://localhost:11236/classify
[VideoProcessingClient] Classification result for https://firebase.google.com/docs/analytics/debugview: { type: 'webpage', platform: null, extension: null }
✅ Classification result for https://firebase.google.com/docs/analytics/debugview: webpage
[VideoProcessingClient] Classification result for https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/about-backend-events: { type: 'webpage', platform: null, extension: null }
✅ Classification result for https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/about-backend-events: webpage
[VideoProcessingClient] Classification result for https://segment.com/docs/getting-started/06-testing-debugging/: { type: 'webpage', platform: null, extension: null }
✅ Classification result for https://segment.com/docs/getting-started/06-testing-debugging/: webpage
[VideoProcessingClient] Classification result for https://moldstud.com/articles/p-exploring-the-process-of-testing-and-debugging-in-back-end-development: { type: 'webpage', platform: null, extension: null }
✅ Classification result for https://moldstud.com/articles/p-exploring-the-process-of-testing-and-debugging-in-back-end-development: webpage
[VideoProcessingClient] Classification result for https://playwright.dev/docs/debug: { type: 'webpage', platform: null, extension: null }
✅ Classification result for https://playwright.dev/docs/debug: webpage
[VideoProcessingClient] Classification result for https://www.getambassador.io/blog/master-end-to-end-api-testing: { type: 'webpage', platform: null, extension: null }
✅ Classification result for https://www.getambassador.io/blog/master-end-to-end-api-testing: webpage
🌐 Adding to webpage URLs: https://firebase.google.com/docs/analytics/debugview
🌐 Adding to webpage URLs: https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/about-backend-events
🌐 Adding to webpage URLs: https://segment.com/docs/getting-started/06-testing-debugging/
🌐 Adding to webpage URLs: https://moldstud.com/articles/p-exploring-the-process-of-testing-and-debugging-in-back-end-development
🌐 Adding to webpage URLs: https://playwright.dev/docs/debug
🌐 Adding to webpage URLs: https://www.getambassador.io/blog/master-end-to-end-api-testing
📊 URL Classification: 0 videos, 6 webpages
🎥 Video URLs: []
🌐 Webpage URLs: [
  'https://firebase.google.com/docs/analytics/debugview',
  'https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/about-backend-events',
  'https://segment.com/docs/getting-started/06-testing-debugging/',
  'https://moldstud.com/articles/p-exploring-the-process-of-testing-and-debugging-in-back-end-development',
  'https://playwright.dev/docs/debug',
  'https://www.getambassador.io/blog/master-end-to-end-api-testing'
]
⏳ VIDEO DEBUG: Waiting for 6 crawl promises and 0 video promises...
🎬 VIDEO DEBUG: Video processing enabled: true
⏰ VIDEO DEBUG: Video timeout set to 5 minutes per video
✅ VIDEO DEBUG: All promises settled. Total results: 6
📊 Processing Summary:
   • Crawl results: 6 (5 successful)
   • Video results: 0 (0 successful)
   • Video processing was enabled: true
🔄 Combining search results...
🔗 Combining results:
   • Serper organic results: 6
   • Available crawl results: 6
   • Available video results: 0
🔗 Processing search result 1: https://firebase.google.com/docs/analytics/debugview
   • Has crawl result: true
   • Has video result: false
🌐 Creating webpage result for: https://firebase.google.com/docs/analytics/debugview
🔗 Processing search result 2: https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/about-backend-events
   • Has crawl result: true
   • Has video result: false
🌐 Creating webpage result for: https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/about-backend-events
🔗 Processing search result 3: https://segment.com/docs/getting-started/06-testing-debugging/
   • Has crawl result: true
   • Has video result: false
🌐 Creating webpage result for: https://segment.com/docs/getting-started/06-testing-debugging/
🔗 Processing search result 4: https://moldstud.com/articles/p-exploring-the-process-of-testing-and-debugging-in-back-end-development
   • Has crawl result: true
   • Has video result: false
🌐 Creating webpage result for: https://moldstud.com/articles/p-exploring-the-process-of-testing-and-debugging-in-back-end-development
🔗 Processing search result 5: https://playwright.dev/docs/debug
   • Has crawl result: true
   • Has video result: false
🌐 Creating webpage result for: https://playwright.dev/docs/debug
🔗 Processing search result 6: https://www.getambassador.io/blog/master-end-to-end-api-testing
   • Has crawl result: true
   • Has video result: false
🌐 Creating webpage result for: https://www.getambassador.io/blog/master-end-to-end-api-testing
✅ Final combined results: 6
📋 Combined results: 6 total
   • Video content results: 0
   • Webpage results: 6
💾 Cached data for key: 345d26de... (TTL: 3600s)
[xtcymb] Search completed: {
  totalResults: 6,
  searchTime: 1208,
  crawlTime: 38051,
  successfulCrawls: 5,
  videoResults: 0,
  successfulVideoResults: 0
}
[xtcymb] 🎬 Video results details:
[xtcymb] 🔄 Transforming 6 search results...
[xtcymb] Transforming result 1:
[xtcymb]   • URL: https://firebase.google.com/docs/analytics/debugview
[xtcymb]   • Type: webpage
[xtcymb]   • Success: true
[xtcymb]   • Content length: 19656
[xtcymb]   • Markdown length: 19656
[xtcymb] Transforming result 2:
[xtcymb]   • URL: https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/about-backend-events
[xtcymb]   • Type: webpage
[xtcymb]   • Success: true
[xtcymb]   • Content length: 6530
[xtcymb]   • Markdown length: 6530
[xtcymb] Transforming result 3:
[xtcymb]   • URL: https://segment.com/docs/getting-started/06-testing-debugging/
[xtcymb]   • Type: webpage
[xtcymb]   • Success: true
[xtcymb]   • Content length: 64606
[xtcymb]   • Markdown length: 64606
[xtcymb] Transforming result 4:
[xtcymb]   • URL: https://moldstud.com/articles/p-exploring-the-process-of-testing-and-debugging-in-back-end-development
[xtcymb]   • Type: webpage
[xtcymb]   • Success: false
[xtcymb]   • Content length: 1
[xtcymb]   • Markdown length: 1
[xtcymb] Transforming result 5:
[xtcymb]   • URL: https://playwright.dev/docs/debug
[xtcymb]   • Type: webpage
[xtcymb]   • Success: true
[xtcymb]   • Content length: 23609
[xtcymb]   • Markdown length: 23609
[xtcymb] Transforming result 6:
[xtcymb]   • URL: https://www.getambassador.io/blog/master-end-to-end-api-testing
[xtcymb]   • Type: webpage
[xtcymb]   • Success: true
[xtcymb]   • Content length: 23329
[xtcymb]   • Markdown length: 23329
[xtcymb] Source 1 keep: [ Skip to main content ](https://firebase.google.com/docs/analytics/debugview#main-content)
[ ![Firebase](https://www.gstatic.com/devrel-devsite/prod/vfbd11e784c22f4aaa184963b528a22b42504e1842229d6f6f6b59838a38023ff/firebase/images/lockup.svg) ](https://firebase.google.com/)
[ Build ](https://firebase.google.com/products-build)
  * Build
  * Get to market quickly and securely with products that can scale globally 
  * [ Go to Build  ](https://firebase.google.com/products-build)


  * Build Products
  * [ App Check  ](https://firebase.google.com/products/app-check)
  * [ App Hosting  ](https://firebase.google.com/products/app-hosting)
  * [ Authentication  ](https://firebase.google.com/products/auth)
  * [ Cloud Functions  ](https://firebase.google.com/products/functions)
  * [ Cloud Storage  ](https://firebase.google.com/products/storage)
  * [ Data Connect  ](https://firebase.google.com/products/data-connect)
  * [ Extensions  ](https://firebase.google.com/products/extensions)


  * [ Firebase ML  ](https://firebase.google.com/products/ml)
  * [ Firestore  ](https://firebase.google.com/products/firestore)
  * [ Genkit  ](https://firebase.google.com/products/genkit)
  * [ Hosting  ](https://firebase.google.com/products/hosting)
  * [ Realtime Database  ](https://firebase.google.com/products/realtime-database)
  * [ Firebase AI Logic client SDKs  ](https://firebase.google.com/products/firebase-ai-logic)
  * [ Generative AI  ](https://firebase.google.com/products/generative-ai)


[ Run ](https://firebase.google.com/products-run)
  * Run
  * Run your app with confidence and deliver the best experience for your users 
  * [ Go to Run  ](https://firebase.google.com/products-run)


  * Run Products
  * [ A/B Testing  ](https://firebase.google.com/products/ab-testing)
  * [ App Distribution  ](https://firebase.google.com/products/app-distribution)
  * [ Cloud Messaging  ](https://firebase.google.com/products/cloud-messaging)
  * [ Crashlytics  ](https://firebase.google.com/products/crashlytics)
  * [ Google Analytics  ](https://firebase.google.com/products/analytics)


  * [ In-App Messaging  ](https://firebase.google.com/products/in-app-messaging)
  * [ Performance Monitoring  ](https://firebase.google.com/products/performance)
  * [ Remote Config  ](https://firebase.google.com/products/remote-config)
  * [ Test Lab  ](https://firebase.google.com/products/test-lab)


[ Solutions ](https://firebase.google.com/solutions) [ Pricing ](https://firebase.google.com/pricing) [ Docs ](https://firebase.google.com/docs)
  * [ Overview  ](https://firebase.google.com/docs)
  * [ Fundamentals  ](https://firebase.google.com/docs/guides)
  * [ AI  ](https://firebase.google.com/docs/ai)
  * [ Build  ](https://firebase.google.com/docs/build)
  * [ Run  ](https://firebase.google.com/docs/run)
  * [ Reference  ](https://firebase.google.com/docs/reference)
  * [ Samples  ](https://firebase.google.com/docs/samples)


[ Community ](https://firebase.google.com/community)
  * [ Learn  ](https://firebase.google.com/community/learn)
  * [ Events  ](https://firebase.google.com/community/events)
  * [ Stories  ](https://firebase.google.com/community/stories)


[ Support ](https://firebase.google.com/support)
`/`
  * English
  * Deutsch
  * Español – América Latina
  * Français
  * Indonesia
  * Italiano
  * Polski
  * Português
  * Português – Brasil
  * Tiếng Việt
  * Türkçe
  * Русский
  * עברית
  * العربيّة
  * فارسی
  * हिंदी
  * বাংলা
  * ภาษาไทย
  * 中文 – 简体
  * 中文 – 繁體
  * 日本語
  * 한국어

[ Blog ](https://firebase.blog) [ Studio ](https://studio.firebase.google.com) [ Go to console ](https://console.firebase.google.com) Sign in
  * [ Documentation ](https://firebase.google.com/docs)


Developer documentation for Firebase 
[ Overview ](https://firebase.google.com/docs) [ Fundamentals ](https://firebase.google.com/docs/guides)
  * [ Add Firebase - Apple platforms (iOS+)  ](https://firebase.google.com/docs/ios/setup)
  * [ Add Firebase - Android  ](https://firebase.google.com/docs/android/setup)
  * [ Add Firebase - Web  ](https://firebase.google.com/docs/web/setup)
  * [ Add Firebase - Flutter  ](https://firebase.google.com/docs/flutter/setup)
  * [ Add Firebase - C++  ](https://firebase.google.com/docs/cpp/setup)
  * [ Add Firebase - Unity  ](https://firebase.google.com/docs/unity/setup)
  * [ Add Firebase - Server environments  ](https://firebase.google.com/docs/admin/setup)
  * [ Manage Firebase projects  ](https://firebase.google.com/docs/projects/learn-more)
  * [ Supported platforms & frameworks  ](https://firebase.google.com/docs/libraries)
  * [ Use Emulator Suite  ](https://firebase.google.com/docs/emulator-suite)
  * [ AI assistance with Gemini in Firebase  ](https://firebase.google.com/docs/gemini-in-firebase)


[ AI ](https://firebase.google.com/docs/ai)
  * Develop with AI
  * [ Firebase Studio  Build and ship full-stack AI-infused apps right from your browser.  ](https://firebase.google.com/docs/studio)
  * [ Gemini in Firebase  Streamline development with this AI-powered assistant in the Firebase console.  ](https://firebase.google.com/docs/gemini-in-firebase)


  * Build AI-powered apps
  * [ Firebase AI Logic  Build AI-powered mobile and web apps and features with the Gemini and Imagen models using Firebase AI Logic  ](https://firebase.google.com/docs/ai-logic)
  * [ Genkit  Build full-stack AI-powered applications using this open-source framework  ](https://firebase.google.com/docs/genkit/overview)


[ Build ](https://firebase.google.com/docs/build)
  * [ Emulator Suite  ](https://firebase.google.com/docs/emulator-suite)
  * [ Authentication  ](https://firebase.google.com/docs/auth)
  * [ App Check  ](https://firebase.google.com/docs/app-check)
  * [ Data Connect  ](https://firebase.google.com/docs/data-connect)
  * [ Firestore  ](https://firebase.google.com/docs/firestore)
  * [ Realtime Database  ](https://firebase.google.com/docs/database)
  * [ Storage  ](https://firebase.google.com/docs/storage)
  * [ Security Rules  ](https://firebase.google.com/docs/rules)
  * [ App Hosting  ](https://firebase.google.com/docs/app-hosting)
  * [ Hosting  ](https://firebase.google.com/docs/hosting)
  * [ Cloud Functions  ](https://firebase.google.com/docs/functions)
  * [ Extensions  ](https://firebase.google.com/docs/extensions)
  * [ ML  ](https://firebase.google.com/docs/ml)


[ Run ](https://firebase.google.com/docs/run)
  * [ Test Lab  ](https://firebase.google.com/docs/test-lab)
  * [ App Distribution  ](https://firebase.google.com/docs/app-distribution)
  * [ Crashlytics  ](https://firebase.google.com/docs/crashlytics)
  * [ Performance Monitoring  ](https://firebase.google.com/docs/perf-mon)
  * [ Remote Config  ](https://firebase.google.com/docs/remote-config)
  * [ A/B Testing  ](https://firebase.google.com/docs/ab-testing)
  * [ Analytics  ](https://firebase.google.com/docs/analytics)
  * [ Cloud Messaging  ](https://firebase.google.com/docs/cloud-messaging)
  * [ In-App Messaging  ](https://firebase.google.com/docs/in-app-messaging)
  * [ Dynamic Links  ](https://firebase.google.com/docs/dynamic-links)
  * [ Google AdMob  ](https://firebase.google.com/docs/admob)
  * [ Google Ads  ](https://firebase.google.com/docs/ads)


[ Reference ](https://firebase.google.com/docs/reference) [ Samples ](https://firebase.google.com/docs/samples)
[ ![Firebase](https://www.gstatic.com/devrel-devsite/prod/vfbd11e784c22f4aaa184963b528a22b42504e1842229d6f6f6b59838a38023ff/firebase/images/lockup.svg) ](https://firebase.google.com/)
  * [ Build  ](https://firebase.google.com/products-build)
    * More 
  * [ Run  ](https://firebase.google.com/products-run)
    * More 
  * [ Solutions  ](https://firebase.google.com/solutions)
  * [ Pricing  ](https://firebase.google.com/pricing)
  * [ Docs  ](https://firebase.google.com/docs)
    * More 
    * [ Overview  ](https://firebase.google.com/docs)
    * [ Fundamentals  ](https://firebase.google.com/docs/guides)
      * More 
    * [ AI  ](https://firebase.google.com/docs/ai)
      * More 
    * [ Build  ](https://firebase.google.com/docs/build)
      * More 
    * [ Run  ](https://firebase.google.com/docs/run)
      * More 
    * [ Reference  ](https://firebase.google.com/docs/reference)
    * [ Samples  ](https://firebase.google.com/docs/samples)
  * [ Community  ](https://firebase.google.com/community)
    * More 
  * [ Support  ](https://firebase.google.com/support)
  * [ Blog  ](https://firebase.blog)
  * [ Studio  ](https://studio.firebase.google.com)
  * [ Go to console  ](https://console.firebase.google.com)


  * Build 
  * [ Go to Build  ](https://firebase.google.com/products-build)
  * Build Products 
  * [ App Check  ](https://firebase.google.com/products/app-check)
  * [ App Hosting  ](https://firebase.google.com/products/app-hosting)
  * [ Authentication  ](https://firebase.google.com/products/auth)
  * [ Cloud Functions  ](https://firebase.google.com/products/functions)
  * [ Cloud Storage  ](https://firebase.google.com/products/storage)
  * [ Data Connect  ](https://firebase.google.com/products/data-connect)
  * [ Extensions  ](https://firebase.google.com/products/extensions)
  * [ Firebase ML  ](https://firebase.google.com/products/ml)
  * [ Firestore  ](https://firebase.google.com/products/firestore)
  * [ Genkit  ](https://firebase.google.com/products/genkit)
  * [ Hosting  ](https://firebase.google.com/products/hosting)
  * [ Realtime Database  ](https://firebase.google.com/products/realtime-database)
  * [ Firebase AI Logic client SDKs  ](https://firebase.google.com/products/firebase-ai-logic)
  * [ Generative AI  ](https://firebase.google.com/products/generative-ai)


  * Run 
  * [ Go to Run  ](https://firebase.google.com/products-run)
  * Run Products 
  * [ A/B Testing  ](https://firebase.google.com/products/ab-testing)
  * [ App Distribution  ](https://firebase.google.com/products/app-distribution)
  * [ Cloud Messaging  ](https://firebase.google.com/products/cloud-messaging)
  * [ Crashlytics  ](https://firebase.google.com/products/crashlytics)
  * [ Google Analytics  ](https://firebase.google.com/products/analytics)
  * [ In-App Messaging  ](https://firebase.google.com/products/in-app-messaging)
  * [ Performance Monitoring  ](https://firebase.google.com/products/performance)
  * [ Remote Config  ](https://firebase.google.com/products/remote-config)
  * [ Test Lab  ](https://firebase.google.com/products/test-lab)


  * [ Overview  ](https://firebase.google.com/docs)
  * [ Fundamentals  ](https://firebase.google.com/docs/guides)
  * [ AI  ](https://firebase.google.com/docs/ai)
  * [ Build  ](https://firebase.google.com/docs/build)
  * [ Run  ](https://firebase.google.com/docs/run)
  * [ Reference  ](https://firebase.google.com/docs/reference)
  * [ Samples  ](https://firebase.google.com/docs/samples)


  * [ Learn  ](https://firebase.google.com/community/learn)
  * [ Events  ](https://firebase.google.com/community/events)
  * [ Stories  ](https://firebase.google.com/community/stories)


  * [ Add Firebase - Apple platforms (iOS+)  ](https://firebase.google.com/docs/ios/setup)
  * [ Add Firebase - Android  ](https://firebase.google.com/docs/android/setup)
  * [ Add Firebase - Web  ](https://firebase.google.com/docs/web/setup)
  * [ Add Firebase - Flutter  ](https://firebase.google.com/docs/flutter/setup)
  * [ Add Firebase - C++  ](https://firebase.google.com/docs/cpp/setup)
  * [ Add Firebase - Unity  ](https://firebase.google.com/docs/unity/setup)
  * [ Add Firebase - Server environments  ](https://firebase.google.com/docs/admin/setup)
  * [ Manage Firebase projects  ](https://firebase.google.com/docs/projects/learn-more)
  * [ Supported platforms & frameworks  ](https://firebase.google.com/docs/libraries)
  * [ Use Emulator Suite  ](https://firebase.google.com/docs/emulator-suite)
  * [ AI assistance with Gemini in Firebase  ](https://firebase.google.com/docs/gemini-in-firebase)


  * Develop with AI 
  * [ Firebase Studio  ](https://firebase.google.com/docs/studio)
  * [ Gemini in Firebase  ](https://firebase.google.com/docs/gemini-in-firebase)
  * Build AI-powered apps 
  * [ Firebase AI Logic  ](https://firebase.google.com/docs/ai-logic)
  * [ Genkit  ](https://firebase.google.com/docs/genkit/overview)


  * [ Emulator Suite  ](https://firebase.google.com/docs/emulator-suite)
  * [ Authentication  ](https://firebase.google.com/docs/auth)
  * [ App Check  ](https://firebase.google.com/docs/app-check)
  * [ Data Connect  ](https://firebase.google.com/docs/data-connect)
  * [ Firestore  ](https://firebase.google.com/docs/firestore)
  * [ Realtime Database  ](https://firebase.google.com/docs/database)
  * [ Storage  ](https://firebase.google.com/docs/storage)
  * [ Security Rules  ](https://firebase.google.com/docs/rules)
  * [ App Hosting  ](https://firebase.google.com/docs/app-hosting)
  * [ Hosting  ](https://firebase.google.com/docs/hosting)
  * [ Cloud Functions  ](https://firebase.google.com/docs/functions)
  * [ Extensions  ](https://firebase.google.com/docs/extensions)
  * [ ML  ](https://firebase.google.com/docs/ml)


  * [ Test Lab  ](https://firebase.google.com/docs/test-lab)
  * [ App Distribution  ](https://firebase.google.com/docs/app-distribution)
  * [ Crashlytics  ](https://firebase.google.com/docs/crashlytics)
  * [ Performance Monitoring  ](https://firebase.google.com/docs/perf-mon)
  * [ Remote Config  ](https://firebase.google.com/docs/remote-config)
  * [ A/B Testing  ](https://firebase.google.com/docs/ab-testing)
  * [ Analytics  ](https://firebase.google.com/docs/analytics)
  * [ Cloud Messaging  ](https://firebase.google.com/docs/cloud-messaging)
  * [ In-App Messaging  ](https://firebase.google.com/docs/in-app-messaging)
  * [ Dynamic Links  ](https://firebase.google.com/docs/dynamic-links)
  * [ Google AdMob  ](https://firebase.google.com/docs/admob)
  * [ Google Ads  ](https://firebase.google.com/docs/ads)


  * [ Firebase ](https://firebase.google.com/)
  * [ Documentation ](https://firebase.google.com/docs)


Send feedback 
Stay organized with collections  Save and categorize content based on your preferences. 
##  Firebase developer documentation 
If you're already familiar with the suite of Firebase products, get started with the fundamentals of Firebase, like adding Firebase to your app! 
[Firebase fundamentals](https://firebase.google.com/docs/guides)
[ code  ](https://firebase.google.com/docs/build)
###  [ Products to help you BUILD your app ](https://firebase.google.com/docs/build)
Get to market quickly and securely with products that can scale globally. 
Build AI-powered experiences into your apps and accelerate your development with fully managed infrastructure, powered by Google Cloud, so you can focus on what matters most. 
  * Enhance your app with AI features
  * Store and sync app data at global scale without managing servers
  * Build and deploy static and dynamic web apps without hassle
  * Protect user data and strengthen app security
  * Store data and set up server-side logic


[View documentation](https://firebase.google.com/docs/build)
[ rocket_launch  ](https://firebase.google.com/docs/run)
###  [ Products to help you RUN your app ](https://firebase.google.com/docs/run)
Run your app with confidence and deliver the best experience for your users. 
Launch, monitor, and iterate with AI-assistive tools that help you optimize your app's quality and experience. 
  * Improve app stability and performance
  * Iterate and dynamically update your app
  * Collect user feedback and test your app before release
  * Understand and engage with users


[View documentation](https://firebase.google.com/docs/run)
## Documentation and learning content
Whether you learn by reading or by doing, Firebase offers you many resources to become skillful with our products.
library_books 
###  Guides 
Descriptive how-to content with both high-level introductions and step-by-step workflows for using Firebase products. Find Firebase guides under the [Fundamentals](https://firebase.google.com/docs/guides), [AI](https://firebase.google.com/docs/ai) [Build](https://firebase.google.com/docs/build), and [Run](https://firebase.google.com/docs/run) tabs at the top of the page. 
laptop 
###  Codelabs 
Guided tutorials with hands-on coding to develop practical experience and build working code and apps. Start a Firebase codelab for [iOS](https://firebase.google.com/codelabs/firebase-ios-swift), [Android](https://firebase.google.com/codelabs/firebase-android), or [Web](https://firebase.google.com/codelabs/firebase-web). 
wysiwyg 
###  Reference documentation 
Formal reference documentation for Firebase SDKs, Firebase REST APIs, and Firebase tools. Find Firebase reference docs under the [Reference](https://firebase.google.com/docs/reference) tab at the top of the page.
lightbulb 
###  Quickstarts and samples 
Fully working code to get started fast and see real-world integrations of Firebase features. Explore Firebase quickstarts and samples in the [Samples](https://firebase.google.com/docs/samples) tab at the top of the page.
Need to tell us more?  [[["Easy to understand","easyToUnderstand","thumb-up"],["Solved my problem","solvedMyProblem","thumb-up"],["Other","otherUp","thumb-up"]],[["Missing the information I need","missingTheInformationINeed","thumb-down"],["Too complicated / too many steps","tooComplicatedTooManySteps","thumb-down"],["Out of date","outOfDate","thumb-down"],["Samples / code issue","samplesCodeIssue","thumb-down"],["Other","otherDown","thumb-down"]],[],[],[]] 
  * ### Learn
    * [ Developer guides ](https://firebase.google.com/docs/)
    * [ SDK & API reference ](https://firebase.google.com/docs/reference/)
    * [ Samples ](https://firebase.google.com/docs/samples/)
    * [ Libraries ](https://firebase.google.com/docs/libraries/)
    * [ GitHub ](https://github.com/firebase/)
  * ### Stay connected
    * [ Check out the blog ](https://firebase.blog)
    * [ Find us on Reddit ](https://www.reddit.com/r/Firebase)
    * [ Follow on X ](https://x.com/Firebase)
    * [ Subscribe on YouTube ](https://www.youtube.com/user/Firebase)
    * [ Attend an event ](https://firebase.google.com/community/events)
  * ### Support
    * [ Contact support ](https://firebase.google.com/support/)
    * [ Stack Overflow ](https://stackoverflow.com/questions/tagged/firebase)
    * [ Slack community ](https://firebase.community/)
    * [ Google group ](https://groups.google.com/forum/#!forum/firebase-talk)
    * [ Release notes ](https://firebase.google.com/support/releases)
    * [ Brand guidelines ](https://firebase.google.com/brand-guidelines/)
    * [ FAQs ](https://firebase.google.com/support/faq/)


[ ![Google Developers](https://www.gstatic.com/devrel-devsite/prod/vfbd11e784c22f4aaa184963b528a22b42504e1842229d6f6f6b59838a38023ff/firebase/images/lockup-google-for-developers.svg) ](https://developers.google.com/)
  * [ Android ](https://developer.android.com)
  * [ Chrome ](https://developer.chrome.com/home)
  * [ Firebase ](https://firebase.google.com)
  * [ Google Cloud Platform ](https://cloud.google.com)
  * [ All products ](https://developers.google.com/products/)


  * [ Terms ](https://firebase.google.com/terms/)
  * [ Privacy ](https://policies.google.com/privacy)
  * [ Manage cookies ](https://firebase.google.com/docs/analytics/debugview)


  * English
  * Deutsch
  * Español – América Latina
  * Français
  * Indonesia
  * Italiano
  * Polski
  * Português
  * Português – Brasil
  * Tiếng Việt
  * Türkçe
  * Русский
  * עברית
  * العربيّة
  * فارسی
  * हिंदी
  * বাংলা
  * ภาษาไทย
  * 中文 – 简体
  * 中文 – 繁體
  * 日本語
  * 한국어


 (success: true, hasMarkdown: true, hasDescription: true)
[xtcymb] Source 2 keep: [](https://dev.wix.com)
Develop Websites
Build Apps
[Go Headless](https://dev.wix.com/docs/go-headless)
* * *
APIs and SDKs
[Changelog](https://dev.wix.com/changelog)
* * *
[Log In](https://users.wix.com/signin?loginDialogContext=login&referralInfo=HEADER&postLogin=https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/about-backend-events&postSignUp=https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/about-backend-events&color=developer&studio=true)
[Develop Websites](https://dev.wix.com/docs/develop-websites)
Get Started
[About Developing Websites](https://dev.wix.com/docs/develop-websites/articles/get-started/about-developing-websites)
[The Wix Ecosystem](https://dev.wix.com/docs/develop-websites/articles/get-started/the-wix-ecosystem)
[Website Development Features](https://dev.wix.com/docs/develop-websites/articles/get-started/website-development-features)
[Development Environments](https://dev.wix.com/docs/develop-websites/articles/get-started/development-environments)
[Integrate with Wix's Business Solutions](https://dev.wix.com/docs/develop-websites/articles/get-started/integrate-with-wix-s-business-solutions)
[Integrate with 3rd-Parties](https://dev.wix.com/docs/develop-websites/articles/get-started/integrate-with-3rd-parties)
[Quick Start](https://dev.wix.com/docs/develop-websites/articles/get-started/quick-start)
[Get Started with an Example](https://dev.wix.com/docs/develop-websites/articles/get-started/get-started-with-an-example)
What's New
Workspace & Tools
Coding with Velo
Overview
Develop with the SDK
Authorization
JavaScript & Velo
Frontend Code
Backend Code
[About the Site Backend](https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/about-the-site-backend)
Web Modules
Events
About Backend Events
[Define Backend Event Handlers](https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/define-backend-event-handlers)
Integrations
Packages
Routers
Premium Plans
Limits and Optimization
Automations
Code Tutorials
Wix Editor Elements
Databases
Wix Apps
Best Practices
[Log In](https://users.wix.com/signin?loginDialogContext=login&referralInfo=HEADER&postLogin=https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/about-backend-events&postSignUp=https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/about-backend-events&color=developer&studio=true)
In This Article
* * *
  1. [Supported IDEs](https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/about-backend-events#supported-ides)
  2. [Velo Package Backend Events](https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/about-backend-events#velo-package-backend-events)
  3. [Testing and Debugging](https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/about-backend-events#testing-and-debugging)
  4. [See Also](https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/about-backend-events#see-also)


# [](https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/about-backend-events#about-backend-events)
Many [Velo APIs](https://dev.wix.com/docs/velo) include events that trigger when the required conditions are met. Unlike in the frontend, where event handlers are defined in the page code, for backend events, handlers are defined in the `events.js` backend file.
**Note** : When developing websites, you can only handle events using Velo. Handling site events using the JavaScript SDK [isn't currently supported](https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/develop-with-the-sdk/velo-to-sdk-api-mapping#velo-apis-you-should-continue-to-use).
For example, you might have backend event handlers that trigger when:
  * An invoice is paid.
  * A file has been uploaded to the Media Manager.
  * A form is submitted by a site visitor.


Backend events are only triggered for published sites and don't work in preview mode.
## [](https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/about-backend-events#supported-ides)
You can define backend event handlers using:
  * The [editor](https://dev.wix.com/docs/develop-websites/articles/workspace-tools/velo-workspace/workspaces/wix-studio-working-with-the-code-panel) (Wix Studio and Wix Editor)
  * The [Wix IDE](https://dev.wix.com/docs/develop-websites/articles/workspace-tools/velo-workspace/wix-ide/wix-studio-about-the-wix-ide) (Wix Studio)
  * Your [local IDE](https://dev.wix.com/docs/develop-websites/articles/workspace-tools/developer-tools/git-integration-wix-cli/about-git-integration-wix-cli) (Wix Studio and Wix Editor)


## [](https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/about-backend-events#velo-package-backend-events)
[Velo packages](https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/packages/working-with-velo-packages) are code libraries built with Velo that allow you to add specific functionality to your site, saving you the time you would have spent coding the functionality on your own.
Some Velo packages include backend events, which are contained in their own `events.js` files. So if you add a Velo package that includes backend events, you might end up with multiple `events.js` files in several locations.
## [](https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/about-backend-events#testing-and-debugging)
To test an event handler in preview mode, use [functional testing](https://dev.wix.com/docs/develop-websites/articles/workspace-tools/testing-monitoring/functional-testing/about-functional-testing). Functional testing saves you time and effort when building your own system for triggering and testing your backend functions, by allowing you to quickly test backend functions directly in the code editor.
See step-by-step instructions on [how to test your backend code](https://dev.wix.com/docs/develop-websites/articles/workspace-tools/testing-monitoring/functional-testing/test-backend-functions-with-functional-testing).
## [](https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/about-backend-events#see-also)
  * [Define backend event handlers](https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/events/define-backend-event-handlers)


Did this help?
YesNo
 (success: true, hasMarkdown: true, hasDescription: true)
[xtcymb] Source 3 keep: [Skip to main content](https://segment.com/docs/#segment-documentation)
[ Docs ](https://segment.com/docs/)
  * [ Home ](https://segment.com/docs/)
  * Getting Started
    * [What is Segment?](https://segment.com/docs/getting-started/)
    * [How Segment Works](https://segment.com/docs/getting-started/01-what-is-segment/)
    * [Getting Started Guide](https://segment.com/docs/getting-started/implementation-guide/)
    * [A Basic Segment Installation](https://segment.com/docs/getting-started/02-simple-install/)
    * [Planning a Full Installation](https://segment.com/docs/getting-started/03-planning-full-install/)
    * [A Full Segment Installation](https://segment.com/docs/getting-started/04-full-install/)
    * [Sending Data to Destinations](https://segment.com/docs/getting-started/05-data-to-destinations/)
    * [Testing and Debugging](https://segment.com/docs/getting-started/06-testing-debugging/)
    * [What's Next](https://segment.com/docs/getting-started/whats-next/)
    * Use Cases 
      * [ Use Cases Overview ](https://segment.com/docs/getting-started/use-cases//)
      * [ Choosing a Use Case ](https://segment.com/docs/getting-started/use-cases/guide//)
      * [ Use Cases Setup ](https://segment.com/docs/getting-started/use-cases/setup//)
      * [ Use Cases Reference ](https://segment.com/docs/getting-started/use-cases/reference//)
  * Guides
    * [An Introduction to Segment](https://segment.com/docs/guides/)
    * [For Developers](https://segment.com/docs/guides/intro-impl/)
    * [For Data Users](https://segment.com/docs/guides/intro-user/)
    * [For Workspace Admins](https://segment.com/docs/guides/intro-admin/)
    * [Filtering your Segment Data](https://segment.com/docs/guides/filtering-data/)
    * [Handling Duplicate Data](https://segment.com/docs/guides/duplicate-data/)
    * [Internet Bots](https://segment.com/docs/guides/ignore-bots/)
    * [Segment vs. Tag Managers](https://segment.com/docs/guides/segment-vs-tag-managers/)
    * [Replay](https://segment.com/docs/guides/what-is-replay/)
    * [Regional Segment](https://segment.com/docs/guides/regional-segment/)
    * [Audiences and Journeys](https://segment.com/docs/guides/audiences-and-journeys/)
    * How-to Guides 
      * [ How-to Guides Index ](https://segment.com/docs/guides/how-to-guides/)
      * [ Automating Multi-Channel Re-Engagement Campaigns ](https://segment.com/docs/guides/how-to-guides/automated-multichannel-reengagement/)
      * [ Collecting Data on the Client or Server ](https://segment.com/docs/guides/how-to-guides/collect-on-client-or-server/)
      * [ Collecting Pageviews on the Server Side ](https://segment.com/docs/guides/how-to-guides/collect-pageviews-serverside/)
      * [ Creating a Push Notification ](https://segment.com/docs/guides/how-to-guides/create-push-notification/)
      * [ Tracking Customers Across Channels and Devices ](https://segment.com/docs/guides/how-to-guides/cross-channel-tracking/)
      * [ Setting up a Dynamic Coupon Program to Reward Loyal Customers ](https://segment.com/docs/guides/how-to-guides/dynamic-coupon-program/)
      * [ Forecasting LTV with SQL and Excel for E-Commerce ](https://segment.com/docs/guides/how-to-guides/forecast-with-sql/)
      * [ Importing Historical Data ](https://segment.com/docs/guides/how-to-guides/import-historical-data/)
      * [ Joining User Profiles ](https://segment.com/docs/guides/how-to-guides/join-user-profiles/)
      * [ Measuring Your Advertising Funnel ](https://segment.com/docs/guides/how-to-guides/measure-advertising-funnel/)
      * [ Measuring the ROI of Your Marketing Campaigns ](https://segment.com/docs/guides/how-to-guides/measure-marketing-roi/)
      * [ Migrating Code From Other Analytics Tools ](https://segment.com/docs/guides/how-to-guides/migrate-from-other-tools/)
      * [ Segment's Role in Attribution ](https://segment.com/docs/guides/how-to-guides/segment-and-attribution/)
      * [ Setting Up Event-Triggered Notifications or Alerts ](https://segment.com/docs/guides/how-to-guides/set-up-notifications-alerts/)
    * Usage and Billing 
      * [ Account Management ](https://segment.com/docs/guides/usage-and-billing/account-management/)
      * [ Billing and Account FAQs ](https://segment.com/docs/guides/usage-and-billing/billing/)
      * [ MTUs, Throughput and Billing ](https://segment.com/docs/guides/usage-and-billing/mtus-and-throughput/)
      * [ Discounts or Coupons ](https://segment.com/docs/guides/usage-and-billing/discounts-for-startups-npos/)
  * Connections
    * [Overview](https://segment.com/docs/connections/)
    * The Segment Spec 
      * [ Spec Overview ](https://segment.com/docs/connections/spec/)
      * [ Spec: Page ](https://segment.com/docs/connections/spec/page/)
      * [ Spec: Screen ](https://segment.com/docs/connections/spec/screen/)
      * [ Spec: Track ](https://segment.com/docs/connections/spec/track/)
      * [ Spec: Group ](https://segment.com/docs/connections/spec/group/)
      * [ Spec: Identify ](https://segment.com/docs/connections/spec/identify/)
      * [ Spec: Alias ](https://segment.com/docs/connections/spec/alias/)
      * [ Spec: AI Copilot ](https://segment.com/docs/connections/spec/copilot/)
      * [ Spec: Common Fields ](https://segment.com/docs/connections/spec/common/)
      * [ Native Mobile Spec ](https://segment.com/docs/connections/spec/mobile/)
      * [ What is the native mobile spec? ](https://segment.com/docs/connections/spec/native-mobile-spec/)
      * [ Packaging SDKs for Mobile Destinations ](https://segment.com/docs/connections/spec/mobile-packaging-sdks/)
      * [ Spec: Semantic Events ](https://segment.com/docs/connections/spec/semantic/)
      * [ Spec: B2B SaaS ](https://segment.com/docs/connections/spec/b2b-saas/)
      * [ Spec: Ecommerce Events ](https://segment.com/docs/connections/spec/ecommerce/v2/)
      * [ Ecommerce Tracking Plans ](https://segment.com/docs/connections/spec/ecommerce-tracking-plan/)
      * [ Video Spec ](https://segment.com/docs/connections/spec/video/)
      * [ Best Practices for Identifying Users ](https://segment.com/docs/connections/spec/best-practices-identify/)
      * [ Best Practices for Event Calls ](https://segment.com/docs/connections/spec/best-practices-event/)
    * Sources 
      * [ Sources Overview ](https://segment.com/docs/connections/sources/)
      * [ ](https://segment.com/docs/connections/sources/catalog/)
      * [ Cloud Sources ](https://segment.com/docs/connections/sources/about-cloud-sources/)
      * [ Source Debugger ](https://segment.com/docs/connections/sources/debugger/)
      * [ Segment-Managed Custom Domain ](https://segment.com/docs/connections/sources/custom-domain/)
      * [ Self-Managed Custom Proxy ](https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/custom-proxy/)
      * [ Visual Tagger ](https://segment.com/docs/connections/sources/visual-tagger/)
      * Schema 
        * [Schema Controls](https://segment.com/docs/connections/sources/schema//)
        * [Using Schema Controls](https://segment.com/docs/connections/sources/schema/destination-data-control/)
        * [Schema Unique Limits](https://segment.com/docs/connections/sources/schema/schema-unique-limits/)
    * Destinations 
      * [ Destinations Overview ](https://segment.com/docs/connections/destinations/)
      * [ Destination Actions ](https://segment.com/docs/connections/destinations/actions/)
      * [ Add a Destination ](https://segment.com/docs/connections/destinations/add-destination/)
      * [ ](https://segment.com/docs/connections/destinations/catalog/)
      * [ Destination Filters ](https://segment.com/docs/connections/destinations/destination-filters/)
      * Extensible Webhooks 
        * [Extensible Webhooks Destination](https://segment.com/docs/connections/destinations/catalog/actions-webhook-extensible//)
        * [Amazon Ads Audience Sync Integration Recipe](https://segment.com/docs/connections/destinations/catalog/actions-webhook-extensible/amazon-ads-integration-recipe/)
        * [Google Search Ads 360 Conversion API Integration Recipe](https://segment.com/docs/connections/destinations/catalog/actions-webhook-extensible/google-search-ads-integration-recipe/)
        * [Microsoft Dynamics 365 (Sales Hub) Integration Recipe](https://segment.com/docs/connections/destinations/catalog/actions-webhook-extensible/microsoft-integration-recipe/)
        * [Reddit Ads (Audiences) Integration Recipe](https://segment.com/docs/connections/destinations/catalog/actions-webhook-extensible/reddit-ads-audience-integration-recipe/)
        * [Reddit Ads Conversion API Integration Recipe](https://segment.com/docs/connections/destinations/catalog/actions-webhook-extensible/reddit-ads-conversion-api-integration-recipe/)
    * Reverse ETL 
      * [ Reverse ETL Overview ](https://segment.com/docs/connections/reverse-etl/)
      * [ Set Up Reverse ETL ](https://segment.com/docs/connections/reverse-etl/setup/)
      * [ Manage Reverse ETL Syncs ](https://segment.com/docs/connections/reverse-etl/manage-retl/)
      * [ Reverse ETL System ](https://segment.com/docs/connections/reverse-etl/system/)
      * [ Reverse ETL Destination Catalog ](https://segment.com/docs/connections/reverse-etl/reverse-etl-catalog/)
      * Reverse ETL Source Setup Guides 
        * [Azure Reverse ETL Setup](https://segment.com/docs/connections/reverse-etl/reverse-etl-source-setup-guides/azure-setup/)
        * [BigQuery Reverse ETL Setup](https://segment.com/docs/connections/reverse-etl/reverse-etl-source-setup-guides/bigquery-setup/)
        * [Databricks Reverse ETL Setup](https://segment.com/docs/connections/reverse-etl/reverse-etl-source-setup-guides/databricks-setup/)
        * [Db2 Reverse ETL Setup](https://segment.com/docs/connections/reverse-etl/reverse-etl-source-setup-guides/db2-setup/)
        * [Postgres Reverse ETL Setup](https://segment.com/docs/connections/reverse-etl/reverse-etl-source-setup-guides/postgres-setup/)
        * [Redshift Reverse ETL Setup](https://segment.com/docs/connections/reverse-etl/reverse-etl-source-setup-guides/redshift-setup/)
        * [Snowflake Reverse ETL Setup](https://segment.com/docs/connections/reverse-etl/reverse-etl-source-setup-guides/snowflake-setup/)
    * Functions 
      * [ Functions Overview ](https://segment.com/docs/connections/functions/)
      * [ Source Functions ](https://segment.com/docs/connections/functions/source-functions/)
      * [ Source Insert Functions ](https://segment.com/docs/connections/functions/source-insert-functions/)
      * [ Destination Functions ](https://segment.com/docs/connections/functions/destination-functions/)
      * [ Destination Insert Functions ](https://segment.com/docs/connections/functions/insert-functions/)
      * [ Functions Copilot ](https://segment.com/docs/connections/functions/copilot/)
      * [ Functions Copilot Nutrition Facts Label ](https://segment.com/docs/connections/functions/functions-copilot-nutrition-facts/)
      * [ Functions Environment ](https://segment.com/docs/connections/functions/environment/)
      * [ Functions Usage Limits ](https://segment.com/docs/connections/functions/usage/)
      * [ Functions for AWS APIs ](https://segment.com/docs/connections/functions/aws-apis/)
    * Storage Destinations 
      * [ Storage Destinations Overview ](https://segment.com/docs/connections/storage/)
      * [ ](https://segment.com/docs/connections/storage/catalog/)
      * Segment Data Lakes 
        * [Data Lakes Overview](https://segment.com/docs/connections/storage/data-lakes/)
        * [Set Up Data Lakes](https://segment.com/docs/connections/storage/catalog/data-lakes/)
        * [Sync Reports and Error Reporting](https://segment.com/docs/connections/storage/data-lakes/sync-reports/)
        * [AWS Lake Formation](https://segment.com/docs/connections/storage/data-lakes/lake-formation/)
        * [Data Lakes Sync History and Health](https://segment.com/docs/connections/storage/data-lakes/sync-history/)
        * [Data Lakes vs. Warehouses](https://segment.com/docs/connections/storage/data-lakes/comparison/)
      * Data Warehouses 
        * [Warehouse Overview](https://segment.com/docs/connections/storage/warehouses/)
        * [Warehouse Schemas](https://segment.com/docs/connections/storage/warehouses/schema/)
        * [Warehouse Syncs](https://segment.com/docs/connections/storage/warehouses/warehouse-syncs/)
        * [Warehouse Health Dashboards](https://segment.com/docs/connections/storage/warehouses/health/)
        * [Choosing a Warehouse](https://segment.com/docs/connections/storage/warehouses/choose-warehouse/)
        * [Warehouse FAQs](https://segment.com/docs/connections/storage/warehouses/faq/)
        * [Adding Warehouse Users](https://segment.com/docs/connections/storage/warehouses/add-warehouse-users/)
        * [Warehouse Errors](https://segment.com/docs/connections/storage/warehouses/warehouse-errors/)
        * [Redshift Cluster and Redshift Connector Limitations](https://segment.com/docs/connections/storage/warehouses/redshift-faq/)
        * [Speeding Up Redshift Queries](https://segment.com/docs/connections/storage/warehouses/redshift-tuning/)
        * [Useful SQL Queries for Redshift](https://segment.com/docs/connections/storage/warehouses/redshift-useful-sql/)
    * [Regional Segment](https://segment.com/docs/connections/regional-segment/)
    * [Testing Connections](https://segment.com/docs/connections/test-connections/)
    * [Data Export Options](https://segment.com/docs/connections/data-export-options/)
    * [Using Schema Controls](https://segment.com/docs/connections/destination-data-control/)
    * [Event Delivery](https://segment.com/docs/connections/event-delivery/)
    * [Delivery Overview](https://segment.com/docs/connections/delivery-overview/)
    * [Connections Alerting](https://segment.com/docs/connections/alerting/)
    * [Locate Your Write Key](https://segment.com/docs/connections/find-writekey/)
    * [Integration Error Codes](https://segment.com/docs/connections/integration_error_codes/)
    * [Rate Limits](https://segment.com/docs/connections/rate-limits/)
    * [OAuth 2.0](https://segment.com/docs/connections/oauth/)
    * [AWS PrivateLink Integration](https://segment.com/docs/connections/aws-privatelink/)
  * Unify
    * [Unify Overview](https://segment.com/docs/unify/)
    * [Unify Onboarding](https://segment.com/docs/unify/quickstart/)
    * Identity Resolution 
      * [ Overview ](https://segment.com/docs/unify/identity-resolution/)
      * [ Onboarding ](https://segment.com/docs/unify/identity-resolution/identity-resolution-onboarding/)
      * [ Space Setup ](https://segment.com/docs/unify/identity-resolution/space-setup/)
      * [ Use Cases ](https://segment.com/docs/unify/identity-resolution/use-cases/)
      * [ External IDs ](https://segment.com/docs/unify/identity-resolution/externalids/)
      * [ Settings ](https://segment.com/docs/unify/identity-resolution/identity-resolution-settings/)
      * [ E-Commerce Example ](https://segment.com/docs/unify/identity-resolution/ecommerce-example/)
    * Profiles Sync 
      * [ Profiles Sync Overview ](https://segment.com/docs/unify/profiles-sync/overview/)
      * Profiles Sync Setup 
        * [Setup](https://segment.com/docs/unify/profiles-sync/profiles-sync-setup/)
        * [Databricks for Profiles Sync](https://segment.com/docs/unify/profiles-sync/profiles-sync-setup/databricks-profiles-sync/)
      * [ Sample Queries ](https://segment.com/docs/unify/profiles-sync/sample-queries/)
      * [ Tables & Materialized Views ](https://segment.com/docs/unify/profiles-sync/tables/)
    * Data Graph 
      * [ Data Graph ](https://segment.com/docs/unify/data-graph//)
      * Setup Guides 
        * [BigQuery Data Graph Setup](https://segment.com/docs/unify/data-graph/setup-guides/bigquery-setup//)
        * [Databricks Data Graph Setup](https://segment.com/docs/unify/data-graph/setup-guides/databricks-setup//)
        * [Redshift Data Graph Setup](https://segment.com/docs/unify/data-graph/setup-guides/redshift-setup//)
        * [Snowflake Data Graph Setup](https://segment.com/docs/unify/data-graph/setup-guides/snowflake-setup//)
      * Linked Events 
        * [Linked Events Overview](https://segment.com/docs/unify/data-graph/linked-events//)
        * [Linked Events Limits](https://segment.com/docs/unify/data-graph/linked-events-limits//)
    * Traits 
      * Predictions 
        * [Predictions](https://segment.com/docs/unify/traits/predictions//)
        * [Using Predictions](https://segment.com/docs/unify/traits/predictions/using-predictions/)
        * [Suggested Predictive Audiences](https://segment.com/docs/unify/traits/predictions/suggested-predictive-audiences/)
        * [Predictions Nutrition Facts Label](https://segment.com/docs/unify/traits/predictions/predictions-nutrition-facts/)
      * [ Computed Traits ](https://segment.com/docs/unify/traits/computed-traits/)
      * [ Custom Traits ](https://segment.com/docs/unify/traits/custom-traits/)
      * [ SQL Traits ](https://segment.com/docs/unify/traits/sql-traits/)
      * [ Recommended Items ](https://segment.com/docs/unify/traits/recommended-items/)
    * [Profile API](https://segment.com/docs/unify/profile-api/)
    * [Profile Debugger](https://segment.com/docs/unify/debugger/)
    * [Profiles Insights](https://segment.com/docs/unify/insights/)
    * [CSV Upload](https://segment.com/docs/unify/csv-upload/)
    * [Unify and GDPR](https://segment.com/docs/unify/unify-gdpr/)
    * [Unify FAQs](https://segment.com/docs/unify/faqs/)
    * [Unify Limits](https://segment.com/docs/unify/product-limits/)
  * Engage
    * [Introduction](https://segment.com/docs/engage/)
    * [Foundations Onboarding](https://segment.com/docs/engage/quickstart/)
    * User Subscriptions 
      * [ User Subscriptions ](https://segment.com/docs/engage/user-subscriptions/)
      * [ Set User Subscriptions ](https://segment.com/docs/engage/user-subscriptions/set-user-subscriptions/)
      * [ Subscription States ](https://segment.com/docs/engage/user-subscriptions/subscription-states/)
      * [ Subscription Groups ](https://segment.com/docs/engage/user-subscriptions/subscription-groups/)
      * [ Subscriptions with SQL Traits ](https://segment.com/docs/engage/user-subscriptions/subscription-sql/)
      * [ Update Subscriptions with a CSV ](https://segment.com/docs/engage/user-subscriptions/csv-upload/)
    * Profiles 
      * [ Use Profiles and Traits with a CSV ](https://segment.com/docs/engage/profiles/csv-upload/)
    * Audiences 
      * [ Audiences Overview ](https://segment.com/docs/engage/audiences/)
      * Linked Audiences 
        * [Linked Audiences Overview](https://segment.com/docs/engage/audiences/linked-audiences/)
        * [Linked Audiences Limits](https://segment.com/docs/engage/audiences/linked-audiences-limits/)
        * [Linked Audiences with Braze](https://segment.com/docs/engage/audiences/linked-audiences-braze/)
        * [Linked Audiences with Iterable](https://segment.com/docs/engage/audiences/linked-audiences-iterable/)
      * [ Account-level Audiences ](https://segment.com/docs/engage/audiences/account-audiences/)
      * [ Generative Audiences ](https://segment.com/docs/engage/audiences/generative-audiences/)
      * [ Generative Audiences Nutrition Facts Label ](https://segment.com/docs/engage/audiences/generative-audiences-nutrition-facts/)
      * [ Product Based Audiences ](https://segment.com/docs/engage/audiences/product-based-audiences/)
      * [ Product Based Audiences Nutrition Facts Label ](https://segment.com/docs/engage/audiences/product-based-audiences-nutrition-label/)
      * [ Organize Audiences ](https://segment.com/docs/engage/audiences/organization/)
      * [ Send Audiences to Destinations ](https://segment.com/docs/engage/audiences/send-audience-data/)
    * Journeys 
      * [ Journeys Overview ](https://segment.com/docs/engage/journeys/)
      * Journeys V1 
        * [Build a Journey](https://segment.com/docs/engage/journeys/v1/build-journey/)
        * [Journey Step Types](https://segment.com/docs/engage/journeys/v1/step-types/)
        * [Send Data to Destinations](https://segment.com/docs/engage/journeys/v1/send-data/)
        * [Understand Journeys Logic](https://segment.com/docs/engage/journeys/v1/journeys-logic/)
      * Journeys V2 
        * [Overview](https://segment.com/docs/engage/journeys/v2//)
        * [Event-Triggered Journeys Steps](https://segment.com/docs/engage/journeys/v2/event-triggered-journeys-steps/)
        * [Exit Rules](https://segment.com/docs/engage/journeys/v2/exit-rules/)
        * [Journey Context](https://segment.com/docs/engage/journeys/v2/journey-context/)
        * [Use Cases](https://segment.com/docs/engage/journeys/v2/use-cases/)
        * [Product Limits](https://segment.com/docs/engage/journeys/v2/limits/)
      * [ Journey Edits and Versioning ](https://segment.com/docs/engage/journeys/journeys-edits/)
      * [ Journeys Analytics ](https://segment.com/docs/engage/journeys/journeys-analytics/)
      * [ Journeys Best Practices and FAQ ](https://segment.com/docs/engage/journeys/faq-best-practices/)
      * [ Journeys Glossary ](https://segment.com/docs/engage/journeys/key-terms/)
    * Content 
      * [ Email Template ](https://segment.com/docs/engage/content/email/template/)
      * [ Drag and Drop Editor ](https://segment.com/docs/engage/content/email/editor/)
      * [ HTML Editor ](https://segment.com/docs/engage/content/email/html-editor/)
      * [ SMS Template ](https://segment.com/docs/engage/content/sms/template/)
      * [ WhatsApp Template ](https://segment.com/docs/engage/content/whatsapp/)
      * [ Mobile Push Template ](https://segment.com/docs/engage/content/mobile-push/)
      * [ Organizing Your Templates ](https://segment.com/docs/engage/content/organization/)
    * Campaigns 
      * [ Campaigns Overview ](https://segment.com/docs/engage/campaigns/)
      * [ Email Campaigns ](https://segment.com/docs/engage/campaigns/email-campaigns/)
      * [ SMS Campaigns ](https://segment.com/docs/engage/campaigns/sms-campaigns/)
      * [ Broadcasts ](https://segment.com/docs/engage/campaigns/broadcasts/)
      * [ WhatsApp Campaigns ](https://segment.com/docs/engage/campaigns/whatsapp-campaigns/)
      * Mobile Push 
        * [Mobile Push Onboarding](https://segment.com/docs/engage/campaigns/mobile-push/)
        * [Mobile Push Campaigns](https://segment.com/docs/engage/campaigns/mobile-push/push-campaigns/)
    * Trait Activation 
      * [ Trait Activation Overview ](https://segment.com/docs/engage/trait-activation/)
      * [ Trait Enrichment ](https://segment.com/docs/engage/trait-activation/trait-enrichment/)
      * [ ID Sync ](https://segment.com/docs/engage/trait-activation/id-sync/)
    * [Analytics Overview](https://segment.com/docs/engage/analytics/)
    * [Engage Settings](https://segment.com/docs/engage/settings/)
    * [Engage Default Limits](https://segment.com/docs/engage/product-limits/)
    * [Engage and Warehouses](https://segment.com/docs/engage/warehouses/)
    * [Using Engage Data](https://segment.com/docs/engage/using-engage-data/)
    * [Engage FAQs](https://segment.com/docs/engage/faqs/)
  * Privacy
    * [Privacy Overview](https://segment.com/docs/privacy/)
    * Privacy Portal 
      * [ Detect PII ](https://segment.com/docs/privacy/portal/)
      * [ Data Controls and Alerts ](https://segment.com/docs/privacy/data-controls/)
    * Consent Management 
      * [ Consent Management Overview ](https://segment.com/docs/privacy/consent-management/)
      * [ Consent in Segment Connections ](https://segment.com/docs/privacy/consent-management/consent-in-segment-connections/)
      * [ Configure Consent Management ](https://segment.com/docs/privacy/consent-management/configure-consent-management/)
      * [ Consent Stored on the Profile ](https://segment.com/docs/privacy/consent-management/consent-in-unify/)
      * [ Consent in Reverse ETL ](https://segment.com/docs/privacy/consent-management/consent-in-retl/)
      * [ Consent FAQs ](https://segment.com/docs/privacy/consent-management/consent-faq/)
    * Deletion and Suppression 
      * [ User Deletion and Suppression ](https://segment.com/docs/privacy/user-deletion-and-suppression/)
      * [ Account & Data Deletion ](https://segment.com/docs/privacy/account-deletion/)
    * [Data Retention and Deletion Policy](https://segment.com/docs/privacy/data-retention-policy/)
    * [Complying With GDPR](https://segment.com/docs/privacy/complying-with-the-gdpr/)
    * [HIPAA Eligible Segment](https://segment.com/docs/privacy/hipaa-eligible-segment/)
    * [Privacy FAQs](https://segment.com/docs/privacy/faq/)
  * Monitor
    * [Monitor Overview](https://segment.com/docs/monitor/)
    * Alerts 
      * [ Alerts Overview ](https://segment.com/docs/monitor/alerts/)
      * [ Default Alerts ](https://segment.com/docs/monitor/alerts/default-alerts/)
  * Protocols
    * [Protocols Overview](https://segment.com/docs/protocols/)
    * Create a Tracking Plan 
      * [ Data Collection Best Practices ](https://segment.com/docs/protocols/tracking-plan/best-practices/)
      * [ The Tracking Plan ](https://segment.com/docs/protocols/tracking-plan/create/)
      * [ Tracking Plan Libraries ](https://segment.com/docs/protocols/tracking-plan/libraries/)
    * Validate With Violations 
      * [ Connect Sources to Your Tracking Plan ](https://segment.com/docs/protocols/validate/connect-sources/)
      * [ Review and Resolve Event Violations ](https://segment.com/docs/protocols/validate/review-violations/)
      * [ Forward Violations ](https://segment.com/docs/protocols/validate/forward-violations/)
    * Enforce With Data Controls 
      * [ Customize Your Schema Controls ](https://segment.com/docs/protocols/enforce/schema-configuration/)
      * [ Forward Blocked Events ](https://segment.com/docs/protocols/enforce/forward-blocked-events/)
    * [Transform to Fix Bad Data](https://segment.com/docs/protocols/transform/)
    * Protocols Extensions 
      * [ Protocols APIs ](https://segment.com/docs/protocols/apis-and-extensions/)
      * [ Typewriter ](https://segment.com/docs/protocols/apis-and-extensions/typewriter/)
      * [ Anomaly Detection ](https://segment.com/docs/protocols/apis-and-extensions/anomaly_detection/)
    * [Schema Controls](https://segment.com/docs/protocols/schema/)
    * [Protocols FAQs](https://segment.com/docs/protocols/faq/)
  * Segment App
    * [Segment Web App](https://segment.com/docs/segment-app/)
    * [Workspace Home](https://segment.com/docs/segment-app/workspace-home/)
    * Access Management 
      * [ Identity & Access Management Overview ](https://segment.com/docs/segment-app/iam/)
      * [ Concepts ](https://segment.com/docs/segment-app/iam/concepts/)
      * [ Roles ](https://segment.com/docs/segment-app/iam/roles/)
      * [ Manage Workspace Access ](https://segment.com/docs/segment-app/iam/membership/)
      * [ Label-Based Access Control ](https://segment.com/docs/segment-app/iam/labels/)
      * [ Audit Trail ](https://segment.com/docs/segment-app/iam/audit-trail/)
      * [ Single Sign On ](https://segment.com/docs/segment-app/iam/sso/)
      * [ System for Cross-domain Identity Management (SCIM) Configuration Guide ](https://segment.com/docs/segment-app/iam/scim/)
      * [ Multi-Factor Authentication (MFA) ](https://segment.com/docs/segment-app/iam/mfa/)
    * Extensions 
      * [ Extensions Overview ](https://segment.com/docs/segment-app/extensions/)
      * [ dbt ](https://segment.com/docs/segment-app/extensions/dbt/)
      * [ Git ](https://segment.com/docs/segment-app/extensions/git/)
    * [Picking a Secure Password](https://segment.com/docs/segment-app/iam/secure-password/)
    * [Prod and Testing Environments in Segment](https://segment.com/docs/segment-app/set-up-envs/)
    * [Verifying Your Email Address](https://segment.com/docs/segment-app/verify-email-address/)
    * [Support Access](https://segment.com/docs/segment-app/support-access/)
  * API
    * Public API 
      * [ Public API ](https://segment.com/docs/api/public-api/)
      * [ Destination Filter Query Language ](https://segment.com/docs/api/public-api/fql/)
      * [ Segment Query Language ](https://segment.com/docs/api/public-api/query-language/)
    * Config API 
      * [ Config API overview ](https://segment.com/docs/api/config-api/)
      * [ API design ](https://segment.com/docs/api/config-api/api-design/)
      * [ Authentication ](https://segment.com/docs/api/config-api/authentication/)
      * [ Destination Filter Query Language ](https://segment.com/docs/api/config-api/fql/)
  * Unified Profiles
    * [Overview](https://segment.com/docs/unified-profiles/)
    * [Create a New Segment Workspace](https://segment.com/docs/unified-profiles/create-a-workspace/)
    * [Connect an Existing Workspace to Twilio](https://segment.com/docs/unified-profiles/connect-a-workspace/)
  * [ Partners ](https://segment.com/docs/partners/)
  * [ Glossary ](https://segment.com/docs/glossary/)


* [ Help ](https://segment.com/docs/help/)
* [ Product Updates ](https://community.segment.com/product-updates)
* [Back to Segment.com](https://segment.com/)
  * [Log in](https://app.segment.com/login)
  * [Sign Up](https://app.segment.com/signup)


[ Docs ](https://segment.com/docs/)
  * [ Home ](https://segment.com/docs/)
  * Getting Started
    * [What is Segment?](https://segment.com/docs/getting-started/)
    * [How Segment Works](https://segment.com/docs/getting-started/01-what-is-segment/)
    * [Getting Started Guide](https://segment.com/docs/getting-started/implementation-guide/)
    * [A Basic Segment Installation](https://segment.com/docs/getting-started/02-simple-install/)
    * [Planning a Full Installation](https://segment.com/docs/getting-started/03-planning-full-install/)
    * [A Full Segment Installation](https://segment.com/docs/getting-started/04-full-install/)
    * [Sending Data to Destinations](https://segment.com/docs/getting-started/05-data-to-destinations/)
    * [Testing and Debugging](https://segment.com/docs/getting-started/06-testing-debugging/)
    * [What's Next](https://segment.com/docs/getting-started/whats-next/)
    * Use Cases 
      * [ Use Cases Overview ](https://segment.com/docs/getting-started/use-cases//)
      * [ Choosing a Use Case ](https://segment.com/docs/getting-started/use-cases/guide//)
      * [ Use Cases Setup ](https://segment.com/docs/getting-started/use-cases/setup//)
      * [ Use Cases Reference ](https://segment.com/docs/getting-started/use-cases/reference//)
  * Guides
    * [An Introduction to Segment](https://segment.com/docs/guides/)
    * [For Developers](https://segment.com/docs/guides/intro-impl/)
    * [For Data Users](https://segment.com/docs/guides/intro-user/)
    * [For Workspace Admins](https://segment.com/docs/guides/intro-admin/)
    * [Filtering your Segment Data](https://segment.com/docs/guides/filtering-data/)
    * [Handling Duplicate Data](https://segment.com/docs/guides/duplicate-data/)
    * [Internet Bots](https://segment.com/docs/guides/ignore-bots/)
    * [Segment vs. Tag Managers](https://segment.com/docs/guides/segment-vs-tag-managers/)
    * [Replay](https://segment.com/docs/guides/what-is-replay/)
    * [Regional Segment](https://segment.com/docs/guides/regional-segment/)
    * [Audiences and Journeys](https://segment.com/docs/guides/audiences-and-journeys/)
    * How-to Guides 
      * [ How-to Guides Index ](https://segment.com/docs/guides/how-to-guides/)
      * [ Automating Multi-Channel Re-Engagement Campaigns ](https://segment.com/docs/guides/how-to-guides/automated-multichannel-reengagement/)
      * [ Collecting Data on the Client or Server ](https://segment.com/docs/guides/how-to-guides/collect-on-client-or-server/)
      * [ Collecting Pageviews on the Server Side ](https://segment.com/docs/guides/how-to-guides/collect-pageviews-serverside/)
      * [ Creating a Push Notification ](https://segment.com/docs/guides/how-to-guides/create-push-notification/)
      * [ Tracking Customers Across Channels and Devices ](https://segment.com/docs/guides/how-to-guides/cross-channel-tracking/)
      * [ Setting up a Dynamic Coupon Program to Reward Loyal Customers ](https://segment.com/docs/guides/how-to-guides/dynamic-coupon-program/)
      * [ Forecasting LTV with SQL and Excel for E-Commerce ](https://segment.com/docs/guides/how-to-guides/forecast-with-sql/)
      * [ Importing Historical Data ](https://segment.com/docs/guides/how-to-guides/import-historical-data/)
      * [ Joining User Profiles ](https://segment.com/docs/guides/how-to-guides/join-user-profiles/)
      * [ Measuring Your Advertising Funnel ](https://segment.com/docs/guides/how-to-guides/measure-advertising-funnel/)
      * [ Measuring the ROI of Your Marketing Campaigns ](https://segment.com/docs/guides/how-to-guides/measure-marketing-roi/)
      * [ Migrating Code From Other Analytics Tools ](https://segment.com/docs/guides/how-to-guides/migrate-from-other-tools/)
      * [ Segment's Role in Attribution ](https://segment.com/docs/guides/how-to-guides/segment-and-attribution/)
      * [ Setting Up Event-Triggered Notifications or Alerts ](https://segment.com/docs/guides/how-to-guides/set-up-notifications-alerts/)
    * Usage and Billing 
      * [ Account Management ](https://segment.com/docs/guides/usage-and-billing/account-management/)
      * [ Billing and Account FAQs ](https://segment.com/docs/guides/usage-and-billing/billing/)
      * [ MTUs, Throughput and Billing ](https://segment.com/docs/guides/usage-and-billing/mtus-and-throughput/)
      * [ Discounts or Coupons ](https://segment.com/docs/guides/usage-and-billing/discounts-for-startups-npos/)
  * Connections
    * [Overview](https://segment.com/docs/connections/)
    * The Segment Spec 
      * [ Spec Overview ](https://segment.com/docs/connections/spec/)
      * [ Spec: Page ](https://segment.com/docs/connections/spec/page/)
      * [ Spec: Screen ](https://segment.com/docs/connections/spec/screen/)
      * [ Spec: Track ](https://segment.com/docs/connections/spec/track/)
      * [ Spec: Group ](https://segment.com/docs/connections/spec/group/)
      * [ Spec: Identify ](https://segment.com/docs/connections/spec/identify/)
      * [ Spec: Alias ](https://segment.com/docs/connections/spec/alias/)
      * [ Spec: AI Copilot ](https://segment.com/docs/connections/spec/copilot/)
      * [ Spec: Common Fields ](https://segment.com/docs/connections/spec/common/)
      * [ Native Mobile Spec ](https://segment.com/docs/connections/spec/mobile/)
      * [ What is the native mobile spec? ](https://segment.com/docs/connections/spec/native-mobile-spec/)
      * [ Packaging SDKs for Mobile Destinations ](https://segment.com/docs/connections/spec/mobile-packaging-sdks/)
      * [ Spec: Semantic Events ](https://segment.com/docs/connections/spec/semantic/)
      * [ Spec: B2B SaaS ](https://segment.com/docs/connections/spec/b2b-saas/)
      * [ Spec: Ecommerce Events ](https://segment.com/docs/connections/spec/ecommerce/v2/)
      * [ Ecommerce Tracking Plans ](https://segment.com/docs/connections/spec/ecommerce-tracking-plan/)
      * [ Video Spec ](https://segment.com/docs/connections/spec/video/)
      * [ Best Practices for Identifying Users ](https://segment.com/docs/connections/spec/best-practices-identify/)
      * [ Best Practices for Event Calls ](https://segment.com/docs/connections/spec/best-practices-event/)
    * Sources 
      * [ Sources Overview ](https://segment.com/docs/connections/sources/)
      * [ ](https://segment.com/docs/connections/sources/catalog/)
      * [ Cloud Sources ](https://segment.com/docs/connections/sources/about-cloud-sources/)
      * [ Source Debugger ](https://segment.com/docs/connections/sources/debugger/)
      * [ Segment-Managed Custom Domain ](https://segment.com/docs/connections/sources/custom-domain/)
      * [ Self-Managed Custom Proxy ](https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/custom-proxy/)
      * [ Visual Tagger ](https://segment.com/docs/connections/sources/visual-tagger/)
      * Schema 
        * [Schema Controls](https://segment.com/docs/connections/sources/schema//)
        * [Using Schema Controls](https://segment.com/docs/connections/sources/schema/destination-data-control/)
        * [Schema Unique Limits](https://segment.com/docs/connections/sources/schema/schema-unique-limits/)
    * Destinations 
      * [ Destinations Overview ](https://segment.com/docs/connections/destinations/)
      * [ Destination Actions ](https://segment.com/docs/connections/destinations/actions/)
      * [ Add a Destination ](https://segment.com/docs/connections/destinations/add-destination/)
      * [ ](https://segment.com/docs/connections/destinations/catalog/)
      * [ Destination Filters ](https://segment.com/docs/connections/destinations/destination-filters/)
      * Extensible Webhooks 
        * [Extensible Webhooks Destination](https://segment.com/docs/connections/destinations/catalog/actions-webhook-extensible//)
        * [Amazon Ads Audience Sync Integration Recipe](https://segment.com/docs/connections/destinations/catalog/actions-webhook-extensible/amazon-ads-integration-recipe/)
        * [Google Search Ads 360 Conversion API Integration Recipe](https://segment.com/docs/connections/destinations/catalog/actions-webhook-extensible/google-search-ads-integration-recipe/)
        * [Microsoft Dynamics 365 (Sales Hub) Integration Recipe](https://segment.com/docs/connections/destinations/catalog/actions-webhook-extensible/microsoft-integration-recipe/)
        * [Reddit Ads (Audiences) Integration Recipe](https://segment.com/docs/connections/destinations/catalog/actions-webhook-extensible/reddit-ads-audience-integration-recipe/)
        * [Reddit Ads Conversion API Integration Recipe](https://segment.com/docs/connections/destinations/catalog/actions-webhook-extensible/reddit-ads-conversion-api-integration-recipe/)
    * Reverse ETL 
      * [ Reverse ETL Overview ](https://segment.com/docs/connections/reverse-etl/)
      * [ Set Up Reverse ETL ](https://segment.com/docs/connections/reverse-etl/setup/)
      * [ Manage Reverse ETL Syncs ](https://segment.com/docs/connections/reverse-etl/manage-retl/)
      * [ Reverse ETL System ](https://segment.com/docs/connections/reverse-etl/system/)
      * [ Reverse ETL Destination Catalog ](https://segment.com/docs/connections/reverse-etl/reverse-etl-catalog/)
      * Reverse ETL Source Setup Guides 
        * [Azure Reverse ETL Setup](https://segment.com/docs/connections/reverse-etl/reverse-etl-source-setup-guides/azure-setup/)
        * [BigQuery Reverse ETL Setup](https://segment.com/docs/connections/reverse-etl/reverse-etl-source-setup-guides/bigquery-setup/)
        * [Databricks Reverse ETL Setup](https://segment.com/docs/connections/reverse-etl/reverse-etl-source-setup-guides/databricks-setup/)
        * [Db2 Reverse ETL Setup](https://segment.com/docs/connections/reverse-etl/reverse-etl-source-setup-guides/db2-setup/)
        * [Postgres Reverse ETL Setup](https://segment.com/docs/connections/reverse-etl/reverse-etl-source-setup-guides/postgres-setup/)
        * [Redshift Reverse ETL Setup](https://segment.com/docs/connections/reverse-etl/reverse-etl-source-setup-guides/redshift-setup/)
        * [Snowflake Reverse ETL Setup](https://segment.com/docs/connections/reverse-etl/reverse-etl-source-setup-guides/snowflake-setup/)
    * Functions 
      * [ Functions Overview ](https://segment.com/docs/connections/functions/)
      * [ Source Functions ](https://segment.com/docs/connections/functions/source-functions/)
      * [ Source Insert Functions ](https://segment.com/docs/connections/functions/source-insert-functions/)
      * [ Destination Functions ](https://segment.com/docs/connections/functions/destination-functions/)
      * [ Destination Insert Functions ](https://segment.com/docs/connections/functions/insert-functions/)
      * [ Functions Copilot ](https://segment.com/docs/connections/functions/copilot/)
      * [ Functions Copilot Nutrition Facts Label ](https://segment.com/docs/connections/functions/functions-copilot-nutrition-facts/)
      * [ Functions Environment ](https://segment.com/docs/connections/functions/environment/)
      * [ Functions Usage Limits ](https://segment.com/docs/connections/functions/usage/)
      * [ Functions for AWS APIs ](https://segment.com/docs/connections/functions/aws-apis/)
    * Storage Destinations 
      * [ Storage Destinations Overview ](https://segment.com/docs/connections/storage/)
      * [ ](https://segment.com/docs/connections/storage/catalog/)
      * Segment Data Lakes 
        * [Data Lakes Overview](https://segment.com/docs/connections/storage/data-lakes/)
        * [Set Up Data Lakes](https://segment.com/docs/connections/storage/catalog/data-lakes/)
        * [Sync Reports and Error Reporting](https://segment.com/docs/connections/storage/data-lakes/sync-reports/)
        * [AWS Lake Formation](https://segment.com/docs/connections/storage/data-lakes/lake-formation/)
        * [Data Lakes Sync History and Health](https://segment.com/docs/connections/storage/data-lakes/sync-history/)
        * [Data Lakes vs. Warehouses](https://segment.com/docs/connections/storage/data-lakes/comparison/)
      * Data Warehouses 
        * [Warehouse Overview](https://segment.com/docs/connections/storage/warehouses/)
        * [Warehouse Schemas](https://segment.com/docs/connections/storage/warehouses/schema/)
        * [Warehouse Syncs](https://segment.com/docs/connections/storage/warehouses/warehouse-syncs/)
        * [Warehouse Health Dashboards](https://segment.com/docs/connections/storage/warehouses/health/)
        * [Choosing a Warehouse](https://segment.com/docs/connections/storage/warehouses/choose-warehouse/)
        * [Warehouse FAQs](https://segment.com/docs/connections/storage/warehouses/faq/)
        * [Adding Warehouse Users](https://segment.com/docs/connections/storage/warehouses/add-warehouse-users/)
        * [Warehouse Errors](https://segment.com/docs/connections/storage/warehouses/warehouse-errors/)
        * [Redshift Cluster and Redshift Connector Limitations](https://segment.com/docs/connections/storage/warehouses/redshift-faq/)
        * [Speeding Up Redshift Queries](https://segment.com/docs/connections/storage/warehouses/redshift-tuning/)
        * [Useful SQL Queries for Redshift](https://segment.com/docs/connections/storage/warehouses/redshift-useful-sql/)
    * [Regional Segment](https://segment.com/docs/connections/regional-segment/)
    * [Testing Connections](https://segment.com/docs/connections/test-connections/)
    * [Data Export Options](https://segment.com/docs/connections/data-export-options/)
    * [Using Schema Controls](https://segment.com/docs/connections/destination-data-control/)
    * [Event Delivery](https://segment.com/docs/connections/event-delivery/)
    * [Delivery Overview](https://segment.com/docs/connections/delivery-overview/)
    * [Connections Alerting](https://segment.com/docs/connections/alerting/)
    * [Locate Your Write Key](https://segment.com/docs/connections/find-writekey/)
    * [Integration Error Codes](https://segment.com/docs/connections/integration_error_codes/)
    * [Rate Limits](https://segment.com/docs/connections/rate-limits/)
    * [OAuth 2.0](https://segment.com/docs/connections/oauth/)
    * [AWS PrivateLink Integration](https://segment.com/docs/connections/aws-privatelink/)
  * Unify
    * [Unify Overview](https://segment.com/docs/unify/)
    * [Unify Onboarding](https://segment.com/docs/unify/quickstart/)
    * Identity Resolution 
      * [ Overview ](https://segment.com/docs/unify/identity-resolution/)
      * [ Onboarding ](https://segment.com/docs/unify/identity-resolution/identity-resolution-onboarding/)
      * [ Space Setup ](https://segment.com/docs/unify/identity-resolution/space-setup/)
      * [ Use Cases ](https://segment.com/docs/unify/identity-resolution/use-cases/)
      * [ External IDs ](https://segment.com/docs/unify/identity-resolution/externalids/)
      * [ Settings ](https://segment.com/docs/unify/identity-resolution/identity-resolution-settings/)
      * [ E-Commerce Example ](https://segment.com/docs/unify/identity-resolution/ecommerce-example/)
    * Profiles Sync 
      * [ Profiles Sync Overview ](https://segment.com/docs/unify/profiles-sync/overview/)
      * Profiles Sync Setup 
        * [Setup](https://segment.com/docs/unify/profiles-sync/profiles-sync-setup/)
        * [Databricks for Profiles Sync](https://segment.com/docs/unify/profiles-sync/profiles-sync-setup/databricks-profiles-sync/)
      * [ Sample Queries ](https://segment.com/docs/unify/profiles-sync/sample-queries/)
      * [ Tables & Materialized Views ](https://segment.com/docs/unify/profiles-sync/tables/)
    * Data Graph 
      * [ Data Graph ](https://segment.com/docs/unify/data-graph//)
      * Setup Guides 
        * [BigQuery Data Graph Setup](https://segment.com/docs/unify/data-graph/setup-guides/bigquery-setup//)
        * [Databricks Data Graph Setup](https://segment.com/docs/unify/data-graph/setup-guides/databricks-setup//)
        * [Redshift Data Graph Setup](https://segment.com/docs/unify/data-graph/setup-guides/redshift-setup//)
        * [Snowflake Data Graph Setup](https://segment.com/docs/unify/data-graph/setup-guides/snowflake-setup//)
      * Linked Events 
        * [Linked Events Overview](https://segment.com/docs/unify/data-graph/linked-events//)
        * [Linked Events Limits](https://segment.com/docs/unify/data-graph/linked-events-limits//)
    * Traits 
      * Predictions 
        * [Predictions](https://segment.com/docs/unify/traits/predictions//)
        * [Using Predictions](https://segment.com/docs/unify/traits/predictions/using-predictions/)
        * [Suggested Predictive Audiences](https://segment.com/docs/unify/traits/predictions/suggested-predictive-audiences/)
        * [Predictions Nutrition Facts Label](https://segment.com/docs/unify/traits/predictions/predictions-nutrition-facts/)
      * [ Computed Traits ](https://segment.com/docs/unify/traits/computed-traits/)
      * [ Custom Traits ](https://segment.com/docs/unify/traits/custom-traits/)
      * [ SQL Traits ](https://segment.com/docs/unify/traits/sql-traits/)
      * [ Recommended Items ](https://segment.com/docs/unify/traits/recommended-items/)
    * [Profile API](https://segment.com/docs/unify/profile-api/)
    * [Profile Debugger](https://segment.com/docs/unify/debugger/)
    * [Profiles Insights](https://segment.com/docs/unify/insights/)
    * [CSV Upload](https://segment.com/docs/unify/csv-upload/)
    * [Unify and GDPR](https://segment.com/docs/unify/unify-gdpr/)
    * [Unify FAQs](https://segment.com/docs/unify/faqs/)
    * [Unify Limits](https://segment.com/docs/unify/product-limits/)
  * Engage
    * [Introduction](https://segment.com/docs/engage/)
    * [Foundations Onboarding](https://segment.com/docs/engage/quickstart/)
    * User Subscriptions 
      * [ User Subscriptions ](https://segment.com/docs/engage/user-subscriptions/)
      * [ Set User Subscriptions ](https://segment.com/docs/engage/user-subscriptions/set-user-subscriptions/)
      * [ Subscription States ](https://segment.com/docs/engage/user-subscriptions/subscription-states/)
      * [ Subscription Groups ](https://segment.com/docs/engage/user-subscriptions/subscription-groups/)
      * [ Subscriptions with SQL Traits ](https://segment.com/docs/engage/user-subscriptions/subscription-sql/)
      * [ Update Subscriptions with a CSV ](https://segment.com/docs/engage/user-subscriptions/csv-upload/)
    * Profiles 
      * [ Use Profiles and Traits with a CSV ](https://segment.com/docs/engage/profiles/csv-upload/)
    * Audiences 
      * [ Audiences Overview ](https://segment.com/docs/engage/audiences/)
      * Linked Audiences 
        * [Linked Audiences Overview](https://segment.com/docs/engage/audiences/linked-audiences/)
        * [Linked Audiences Limits](https://segment.com/docs/engage/audiences/linked-audiences-limits/)
        * [Linked Audiences with Braze](https://segment.com/docs/engage/audiences/linked-audiences-braze/)
        * [Linked Audiences with Iterable](https://segment.com/docs/engage/audiences/linked-audiences-iterable/)
      * [ Account-level Audiences ](https://segment.com/docs/engage/audiences/account-audiences/)
      * [ Generative Audiences ](https://segment.com/docs/engage/audiences/generative-audiences/)
      * [ Generative Audiences Nutrition Facts Label ](https://segment.com/docs/engage/audiences/generative-audiences-nutrition-facts/)
      * [ Product Based Audiences ](https://segment.com/docs/engage/audiences/product-based-audiences/)
      * [ Product Based Audiences Nutrition Facts Label ](https://segment.com/docs/engage/audiences/product-based-audiences-nutrition-label/)
      * [ Organize Audiences ](https://segment.com/docs/engage/audiences/organization/)
      * [ Send Audiences to Destinations ](https://segment.com/docs/engage/audiences/send-audience-data/)
    * Journeys 
      * [ Journeys Overview ](https://segment.com/docs/engage/journeys/)
      * Journeys V1 
        * [Build a Journey](https://segment.com/docs/engage/journeys/v1/build-journey/)
        * [Journey Step Types](https://segment.com/docs/engage/journeys/v1/step-types/)
        * [Send Data to Destinations](https://segment.com/docs/engage/journeys/v1/send-data/)
        * [Understand Journeys Logic](https://segment.com/docs/engage/journeys/v1/journeys-logic/)
      * Journeys V2 
        * [Overview](https://segment.com/docs/engage/journeys/v2//)
        * [Event-Triggered Journeys Steps](https://segment.com/docs/engage/journeys/v2/event-triggered-journeys-steps/)
        * [Exit Rules](https://segment.com/docs/engage/journeys/v2/exit-rules/)
        * [Journey Context](https://segment.com/docs/engage/journeys/v2/journey-context/)
        * [Use Cases](https://segment.com/docs/engage/journeys/v2/use-cases/)
        * [Product Limits](https://segment.com/docs/engage/journeys/v2/limits/)
      * [ Journey Edits and Versioning ](https://segment.com/docs/engage/journeys/journeys-edits/)
      * [ Journeys Analytics ](https://segment.com/docs/engage/journeys/journeys-analytics/)
      * [ Journeys Best Practices and FAQ ](https://segment.com/docs/engage/journeys/faq-best-practices/)
      * [ Journeys Glossary ](https://segment.com/docs/engage/journeys/key-terms/)
    * Content 
      * [ Email Template ](https://segment.com/docs/engage/content/email/template/)
      * [ Drag and Drop Editor ](https://segment.com/docs/engage/content/email/editor/)
      * [ HTML Editor ](https://segment.com/docs/engage/content/email/html-editor/)
      * [ SMS Template ](https://segment.com/docs/engage/content/sms/template/)
      * [ WhatsApp Template ](https://segment.com/docs/engage/content/whatsapp/)
      * [ Mobile Push Template ](https://segment.com/docs/engage/content/mobile-push/)
      * [ Organizing Your Templates ](https://segment.com/docs/engage/content/organization/)
    * Campaigns 
      * [ Campaigns Overview ](https://segment.com/docs/engage/campaigns/)
      * [ Email Campaigns ](https://segment.com/docs/engage/campaigns/email-campaigns/)
      * [ SMS Campaigns ](https://segment.com/docs/engage/campaigns/sms-campaigns/)
      * [ Broadcasts ](https://segment.com/docs/engage/campaigns/broadcasts/)
      * [ WhatsApp Campaigns ](https://segment.com/docs/engage/campaigns/whatsapp-campaigns/)
      * Mobile Push 
        * [Mobile Push Onboarding](https://segment.com/docs/engage/campaigns/mobile-push/)
        * [Mobile Push Campaigns](https://segment.com/docs/engage/campaigns/mobile-push/push-campaigns/)
    * Trait Activation 
      * [ Trait Activation Overview ](https://segment.com/docs/engage/trait-activation/)
      * [ Trait Enrichment ](https://segment.com/docs/engage/trait-activation/trait-enrichment/)
      * [ ID Sync ](https://segment.com/docs/engage/trait-activation/id-sync/)
    * [Analytics Overview](https://segment.com/docs/engage/analytics/)
    * [Engage Settings](https://segment.com/docs/engage/settings/)
    * [Engage Default Limits](https://segment.com/docs/engage/product-limits/)
    * [Engage and Warehouses](https://segment.com/docs/engage/warehouses/)
    * [Using Engage Data](https://segment.com/docs/engage/using-engage-data/)
    * [Engage FAQs](https://segment.com/docs/engage/faqs/)
  * Privacy
    * [Privacy Overview](https://segment.com/docs/privacy/)
    * Privacy Portal 
      * [ Detect PII ](https://segment.com/docs/privacy/portal/)
      * [ Data Controls and Alerts ](https://segment.com/docs/privacy/data-controls/)
    * Consent Management 
      * [ Consent Management Overview ](https://segment.com/docs/privacy/consent-management/)
      * [ Consent in Segment Connections ](https://segment.com/docs/privacy/consent-management/consent-in-segment-connections/)
      * [ Configure Consent Management ](https://segment.com/docs/privacy/consent-management/configure-consent-management/)
      * [ Consent Stored on the Profile ](https://segment.com/docs/privacy/consent-management/consent-in-unify/)
      * [ Consent in Reverse ETL ](https://segment.com/docs/privacy/consent-management/consent-in-retl/)
      * [ Consent FAQs ](https://segment.com/docs/privacy/consent-management/consent-faq/)
    * Deletion and Suppression 
      * [ User Deletion and Suppression ](https://segment.com/docs/privacy/user-deletion-and-suppression/)
      * [ Account & Data Deletion ](https://segment.com/docs/privacy/account-deletion/)
    * [Data Retention and Deletion Policy](https://segment.com/docs/privacy/data-retention-policy/)
    * [Complying With GDPR](https://segment.com/docs/privacy/complying-with-the-gdpr/)
    * [HIPAA Eligible Segment](https://segment.com/docs/privacy/hipaa-eligible-segment/)
    * [Privacy FAQs](https://segment.com/docs/privacy/faq/)
  * Monitor
    * [Monitor Overview](https://segment.com/docs/monitor/)
    * Alerts 
      * [ Alerts Overview ](https://segment.com/docs/monitor/alerts/)
      * [ Default Alerts ](https://segment.com/docs/monitor/alerts/default-alerts/)
  * Protocols
    * [Protocols Overview](https://segment.com/docs/protocols/)
    * Create a Tracking Plan 
      * [ Data Collection Best Practices ](https://segment.com/docs/protocols/tracking-plan/best-practices/)
      * [ The Tracking Plan ](https://segment.com/docs/protocols/tracking-plan/create/)
      * [ Tracking Plan Libraries ](https://segment.com/docs/protocols/tracking-plan/libraries/)
    * Validate With Violations 
      * [ Connect Sources to Your Tracking Plan ](https://segment.com/docs/protocols/validate/connect-sources/)
      * [ Review and Resolve Event Violations ](https://segment.com/docs/protocols/validate/review-violations/)
      * [ Forward Violations ](https://segment.com/docs/protocols/validate/forward-violations/)
    * Enforce With Data Controls 
      * [ Customize Your Schema Controls ](https://segment.com/docs/protocols/enforce/schema-configuration/)
      * [ Forward Blocked Events ](https://segment.com/docs/protocols/enforce/forward-blocked-events/)
    * [Transform to Fix Bad Data](https://segment.com/docs/protocols/transform/)
    * Protocols Extensions 
      * [ Protocols APIs ](https://segment.com/docs/protocols/apis-and-extensions/)
      * [ Typewriter ](https://segment.com/docs/protocols/apis-and-extensions/typewriter/)
      * [ Anomaly Detection ](https://segment.com/docs/protocols/apis-and-extensions/anomaly_detection/)
    * [Schema Controls](https://segment.com/docs/protocols/schema/)
    * [Protocols FAQs](https://segment.com/docs/protocols/faq/)
  * Segment App
    * [Segment Web App](https://segment.com/docs/segment-app/)
    * [Workspace Home](https://segment.com/docs/segment-app/workspace-home/)
    * Access Management 
      * [ Identity & Access Management Overview ](https://segment.com/docs/segment-app/iam/)
      * [ Concepts ](https://segment.com/docs/segment-app/iam/concepts/)
      * [ Roles ](https://segment.com/docs/segment-app/iam/roles/)
      * [ Manage Workspace Access ](https://segment.com/docs/segment-app/iam/membership/)
      * [ Label-Based Access Control ](https://segment.com/docs/segment-app/iam/labels/)
      * [ Audit Trail ](https://segment.com/docs/segment-app/iam/audit-trail/)
      * [ Single Sign On ](https://segment.com/docs/segment-app/iam/sso/)
      * [ System for Cross-domain Identity Management (SCIM) Configuration Guide ](https://segment.com/docs/segment-app/iam/scim/)
      * [ Multi-Factor Authentication (MFA) ](https://segment.com/docs/segment-app/iam/mfa/)
    * Extensions 
      * [ Extensions Overview ](https://segment.com/docs/segment-app/extensions/)
      * [ dbt ](https://segment.com/docs/segment-app/extensions/dbt/)
      * [ Git ](https://segment.com/docs/segment-app/extensions/git/)
    * [Picking a Secure Password](https://segment.com/docs/segment-app/iam/secure-password/)
    * [Prod and Testing Environments in Segment](https://segment.com/docs/segment-app/set-up-envs/)
    * [Verifying Your Email Address](https://segment.com/docs/segment-app/verify-email-address/)
    * [Support Access](https://segment.com/docs/segment-app/support-access/)
  * API
    * Public API 
      * [ Public API ](https://segment.com/docs/api/public-api/)
      * [ Destination Filter Query Language ](https://segment.com/docs/api/public-api/fql/)
      * [ Segment Query Language ](https://segment.com/docs/api/public-api/query-language/)
    * Config API 
      * [ Config API overview ](https://segment.com/docs/api/config-api/)
      * [ API design ](https://segment.com/docs/api/config-api/api-design/)
      * [ Authentication ](https://segment.com/docs/api/config-api/authentication/)
      * [ Destination Filter Query Language ](https://segment.com/docs/api/config-api/fql/)
  * Unified Profiles
    * [Overview](https://segment.com/docs/unified-profiles/)
    * [Create a New Segment Workspace](https://segment.com/docs/unified-profiles/create-a-workspace/)
    * [Connect an Existing Workspace to Twilio](https://segment.com/docs/unified-profiles/connect-a-workspace/)
  * [ Partners ](https://segment.com/docs/partners/)
  * [ Glossary ](https://segment.com/docs/glossary/)


  * Config API
    * [Config API overview](https://segment.com/docs/config-api/)
    * [API design](https://segment.com/docs/config-api/api-design/)
    * [Authentication](https://segment.com/docs/config-api/authentication/)
    * [Destination Filter Query Language](https://segment.com/docs/config-api/fql/)
    * [Reference](https://reference.segmentapis.com/)
    * [Creating a Javascript web source and Google Analytics destination](https://segment.com/docs/config-api/tutorial-javascript-google-analytics/)
  * [ Help ](https://segment.com/docs/help/)


#  Segment Documentation 
Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools.
##### [ Getting started with Segment  Learn about Segment, plan and work through a basic implementation, and explore features and extensions. ](https://segment.com/docs/getting-started/)
## How can Segment help you?
##### [ Simplify data collection  Integrate the tools you need for analytics, growth, marketing, and more. ](https://segment.com/docs/connections/)
##### [ Protect data integrity  Prevent data quality issues with a tracking schema and enforcement with Protocols. ](https://segment.com/docs/protocols/)
##### [ Personalize experiences  Build audiences and journeys from real-time customer data to personalize experiences on every channel. ](https://segment.com/docs/engage/)
##### [ Respect users' privacy  Keep customer data private with Segment's data discovery and policy enforcement tools. ](https://segment.com/docs/privacy/)
## Get Data into Segment
The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools.
##### [ Segment calls  Use Track, Page, Identify, and other Segment tracking calls. ](https://segment.com/docs/connections/spec/)
##### [ Common traits  Save time by letting Segment calls collect information for you. ](https://segment.com/docs/connections/spec/common/)
##### [ Use case specs  Use our business-case specs to ensure that your tools get the most from your data. ](https://segment.com/docs/connections/spec/semantic/)
## Learning about Segment
##### [ Segment for Developers  The basics of your Segment implementation. ](https://segment.com/docs/guides/intro-impl/)
##### [ How-To Guides  Over a dozen how-to guides that help you accomplish common tasks. ](https://segment.com/docs/guides/how-to-guides/)
## Connect your app to Segment
##### [ JavaScript  ](https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/)
##### [ Swift  ](https://segment.com/docs/connections/sources/catalog/libraries/mobile/swift-ios/)
##### [ All other Sources  ](https://segment.com/docs/connections/sources/catalog/)
## Additional Resources
##### [ Totally new to Analytics?  Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. ](https://segment.com/academy/)
##### [ Want more hands-on guidance?  For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. ](https://university.segment.com/)
* * *
### Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
[ Visit our Support page ](https://segment.com/help/contact/)
### Help improve these docs!
[ Edit this page ](https://github.com/segmentio/segment-docs/edit/develop/src/index.md) [ Request docs change ](https://github.com/segmentio/segment-docs/issues/new/choose?body=File:%20\[index.md\]\(https://segment.com/docs/\))
### Was this page helpful?
Yes
No
Thanks for your feedback!
Can we improve this doc? [Send us feedback!](https://segment.com/docs/)
* * *
### Get started with Segment
Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. 
Request Demo
or
[ Create free account ](https://app.segment.com/signup)
Products
  * [Connections](https://segment.com/product/connections/)
  * [Protocols](https://segment.com/product/protocols/)
  * [Unify](https://segment.com/product/unify/)
  * [Twilio Engage](https://segment.com/product/twilio-engage/)
  * [Customer Data Platform](https://segment.com/customer-data-platform/)
  * [Integrations Catalog](https://segment.com/catalog/)
  * [Pricing](https://segment.com/pricing/)
  * [Security](https://segment.com/security/)
  * [GDPR](https://segment.com/product/gdpr/)


For Developers
  * [Documentation](https://segment.com/docs/)
  * [Segment API](https://segment.com/docs/api/public-api/)
  * [Build on Segment](https://segment.com/partners/developer-center/)
  * [Open Source](https://open.segment.com/)
  * [Engineering Team](https://segment.com/engineering/)


Company
  * [Careers](https://segment.com/jobs/)
  * [Blog](https://segment.com/blog/)
  * [Press](https://segment.com/press/)
  * [Events](https://segment.com/events/)
  * [Podcast](https://segment.com/podcast/)
  * [Growth Center](https://segment.com/growth-center/)
  * [Data Hub](https://segment.com/data-hub/)


Support
  * [Help Center](https://segment.com/help/)
  * [Contact us](https://segment.com/help/contact/)
  * [Resources](https://segment.com/resources/)
  * [Recipes](https://segment.com/recipes/)
  * [Professional Services](https://segment.com/services/)
  * [Security Bulletins](https://segment.com/security/bulletins/)
  * [Documentation](https://segment.com/docs/)
  * [Release Notes](https://community.segment.com/product-updates)
  * [Become a Partner](https://segment.com/partners/)
  * [Guide to Customer Data Platforms](https://segment.com/resources/cdp/)


  * © 2025 Twilio Inc. All Rights Reserved. 
  * [Privacy](https://www.twilio.com/en-us/legal/privacy)
  * [Terms](https://www.twilio.com/en-us/legal/tos)
  * [Website Data Collection](https://segment.com/docs/)


  * [ ](https://www.linkedin.com/company/segment-io/)
  * [ ](https://x.com/segment)
  * [ ](https://github.com/segmentio)


Send 
Send 
Send 
 (success: true, hasMarkdown: true, hasDescription: true)
[xtcymb] Source 4 keep: Explore key strategies for testing and debugging in back-end development, covering tools, best practices, and methodologies to enhance code quality and ... (success: false, hasMarkdown: true, hasDescription: true)
[xtcymb] Source 5 keep: [Skip to main content](https://playwright.dev/docs/debug#__docusaurus_skipToContent_fallback)
[![Playwright logo](https://playwright.dev/img/playwright-logo.svg) **Playwright**](https://playwright.dev/)[Docs](https://playwright.dev/docs/intro)[API](https://playwright.dev/docs/api/class-playwright)
[Node.js](https://playwright.dev/docs/debug)
  * [Node.js](https://playwright.dev/docs/debug)
  * [Python](https://playwright.dev/python/docs/debug)
  * [Java](https://playwright.dev/java/docs/debug)
  * [.NET](https://playwright.dev/dotnet/docs/debug)


[Community](https://playwright.dev/community/welcome)
[](https://github.com/microsoft/playwright)[](https://aka.ms/playwright/discord)
Search`K`
  * [Getting Started](https://playwright.dev/docs/debug)
    * [Installation](https://playwright.dev/docs/intro)
    * [Writing tests](https://playwright.dev/docs/writing-tests)
    * [Generating tests](https://playwright.dev/docs/codegen-intro)
    * [Running and debugging tests](https://playwright.dev/docs/running-tests)
    * [Trace viewer](https://playwright.dev/docs/trace-viewer-intro)
    * [Setting up CI](https://playwright.dev/docs/ci-intro)
  * [Getting started - VS Code](https://playwright.dev/docs/getting-started-vscode)
  * [Release notes](https://playwright.dev/docs/release-notes)
  * [Canary releases](https://playwright.dev/docs/canary-releases)
  * [Playwright Test](https://playwright.dev/docs/debug)
    * [Test configuration](https://playwright.dev/docs/test-configuration)
    * [Test use options](https://playwright.dev/docs/test-use-options)
    * [Annotations](https://playwright.dev/docs/test-annotations)
    * [Command line](https://playwright.dev/docs/test-cli)
    * [Emulation](https://playwright.dev/docs/emulation)
    * [Fixtures](https://playwright.dev/docs/test-fixtures)
    * [Global setup and teardown](https://playwright.dev/docs/test-global-setup-teardown)
    * [Parallelism](https://playwright.dev/docs/test-parallel)
    * [Parameterize tests](https://playwright.dev/docs/test-parameterize)
    * [Projects](https://playwright.dev/docs/test-projects)
    * [Reporters](https://playwright.dev/docs/test-reporters)
    * [Retries](https://playwright.dev/docs/test-retries)
    * [Sharding](https://playwright.dev/docs/test-sharding)
    * [Timeouts](https://playwright.dev/docs/test-timeouts)
    * [TypeScript](https://playwright.dev/docs/test-typescript)
    * [UI Mode](https://playwright.dev/docs/test-ui-mode)
    * [Web server](https://playwright.dev/docs/test-webserver)
  * [Guides](https://playwright.dev/docs/debug)
    * [Library](https://playwright.dev/docs/library)
    * [Accessibility testing](https://playwright.dev/docs/accessibility-testing)
    * [Actions](https://playwright.dev/docs/input)
    * [Assertions](https://playwright.dev/docs/test-assertions)
    * [API testing](https://playwright.dev/docs/api-testing)
    * [Authentication](https://playwright.dev/docs/auth)
    * [Auto-waiting](https://playwright.dev/docs/actionability)
    * [Best Practices](https://playwright.dev/docs/best-practices)
    * [Browsers](https://playwright.dev/docs/browsers)
    * [Chrome extensions](https://playwright.dev/docs/chrome-extensions)
    * [Clock](https://playwright.dev/docs/clock)
    * [Components (experimental)](https://playwright.dev/docs/test-components)
    * [Debugging Tests](https://playwright.dev/docs/debug)
    * [Dialogs](https://playwright.dev/docs/dialogs)
    * [Downloads](https://playwright.dev/docs/downloads)
    * [Evaluating JavaScript](https://playwright.dev/docs/evaluating)
    * [Events](https://playwright.dev/docs/events)
    * [Extensibility](https://playwright.dev/docs/extensibility)
    * [Frames](https://playwright.dev/docs/frames)
    * [Handles](https://playwright.dev/docs/handles)
    * [Isolation](https://playwright.dev/docs/browser-contexts)
    * [Locators](https://playwright.dev/docs/locators)
    * [Mock APIs](https://playwright.dev/docs/mock)
    * [Mock browser APIs](https://playwright.dev/docs/mock-browser-apis)
    * [Navigations](https://playwright.dev/docs/navigations)
    * [Network](https://playwright.dev/docs/network)
    * [Other locators](https://playwright.dev/docs/other-locators)
    * [Pages](https://playwright.dev/docs/pages)
    * [Page object models](https://playwright.dev/docs/pom)
    * [Screenshots](https://playwright.dev/docs/screenshots)
    * [Snapshot testing](https://playwright.dev/docs/aria-snapshots)
    * [Test generator](https://playwright.dev/docs/codegen)
    * [Touch events (legacy)](https://playwright.dev/docs/touch-events)
    * [Trace viewer](https://playwright.dev/docs/trace-viewer)
    * [Videos](https://playwright.dev/docs/videos)
    * [Visual comparisons](https://playwright.dev/docs/test-snapshots)
    * [WebView2](https://playwright.dev/docs/webview2)
  * [Migration](https://playwright.dev/docs/debug)
  * [Integrations](https://playwright.dev/docs/debug)
  * [Supported languages](https://playwright.dev/docs/languages)


  * [](https://playwright.dev/)
  * Guides
  * Debugging Tests


On this page
# Debugging Tests
## VS Code debugger[​](https://playwright.dev/docs/debug#vs-code-debugger "Direct link to VS Code debugger")
We recommend using the [VS Code Extension](https://playwright.dev/docs/getting-started-vscode) for debugging for a better developer experience. With the VS Code extension you can debug your tests right in VS Code, see error messages, set breakpoints and step through your tests.
![running test in debug mode](https://user-images.githubusercontent.com/13063165/212740233-3f278825-13e7-4a88-a118-dd4478d43a16.png)
### Error Messages[​](https://playwright.dev/docs/debug#error-messages "Direct link to Error Messages")
If your test fails VS Code will show you error messages right in the editor showing what was expected, what was received as well as a complete call log.
![error messaging in vs code](https://user-images.githubusercontent.com/13063165/212738654-b573b7c9-05be-476f-ab4c-201bf4265bc0.png)
### Live Debugging[​](https://playwright.dev/docs/debug#live-debugging "Direct link to Live Debugging")
You can debug your test live in VS Code. After running a test with the `Show Browser` option checked, click on any of the locators in VS Code and it will be highlighted in the Browser window. Playwright will also show you if there are multiple matches.
![live debugging in VS Code](https://user-images.githubusercontent.com/13063165/212884329-0755b007-0d69-4987-b084-38fd5bfb577d.png)
You can also edit the locators in VS Code and Playwright will show you the changes live in the browser window.
![live debugging in VS Code](https://user-images.githubusercontent.com/13063165/212884772-5022d4b1-6fab-456f-88e3-506f2354e238.png)
### Picking a Locator[​](https://playwright.dev/docs/debug#picking-a-locator "Direct link to Picking a Locator")
Pick a [locator](https://playwright.dev/docs/locators) and copy it into your test file by clicking the **Pick locator** button form the testing sidebar. Then in the browser click the element you require and it will now show up in the **Pick locator** box in VS Code. Press 'enter' on your keyboard to copy the locator into the clipboard and then paste anywhere in your code. Or press 'escape' if you want to cancel.
![Pick locators](https://user-images.githubusercontent.com/13063165/212741666-6479a702-2517-44a3-9eca-e719e13b379c.png)
Playwright will look at your page and figure out the best locator, prioritizing [role, text and test id locators](https://playwright.dev/docs/locators). If Playwright finds multiple elements matching the locator, it will improve the locator to make it resilient and uniquely identify the target element, so you don't have to worry about failing tests due to locators.
### Run in Debug Mode[​](https://playwright.dev/docs/debug#run-in-debug-mode "Direct link to Run in Debug Mode")
To set a breakpoint click next to the line number where you want the breakpoint to be until a red dot appears. Run the tests in debug mode by right clicking on the line next to the test you want to run.
![setting debug test mode](https://user-images.githubusercontent.com/13063165/212739847-ecb7dcfe-8929-45f3-b24e-f9c4b592f430.png)
A browser window will open and the test will run and pause at where the breakpoint is set. You can step through the tests, pause the test and rerun the tests from the menu in VS Code.
![running test in debug mode](https://user-images.githubusercontent.com/13063165/212740233-3f278825-13e7-4a88-a118-dd4478d43a16.png)
### Debug Tests Using Chrome DevTools[​](https://playwright.dev/docs/debug#debug-tests-using-chrome-devtools "Direct link to Debug Tests Using Chrome DevTools")
Instead of using `Debug Test`, choose `Run Test` in VS Code. With `Show Browser` enabled, the browser session is reused, letting you open Chrome DevTools for continuous debugging of your tests and the web application.
### Debug in different Browsers[​](https://playwright.dev/docs/debug#debug-in-different-browsers "Direct link to Debug in different Browsers")
By default, debugging is done using the Chromium profile. You can debug your tests on different browsers by right clicking on the debug icon in the testing sidebar and clicking on the 'Select Default Profile' option from the dropdown.
![debugging on specific profile](https://user-images.githubusercontent.com/13063165/212879469-436f8130-c62a-49e1-9d67-c1903b478d5f.png)
Then choose the test profile you would like to use for debugging your tests. Each time you run your test in debug mode it will use the profile you selected. You can run tests in debug mode by right clicking the line number where your test is and selecting 'Debug Test' from the menu.
![choosing a profile for debugging](https://user-images.githubusercontent.com/13063165/212880198-eac22c3e-68ce-47da-9163-d6b376ae7575.png)
To learn more about debugging, see [Debugging in Visual Studio Code](https://code.visualstudio.com/docs/editor/debugging).
## Playwright Inspector[​](https://playwright.dev/docs/debug#playwright-inspector "Direct link to Playwright Inspector")
The Playwright Inspector is a GUI tool to help you debug your Playwright tests. It allows you to step through your tests, live edit locators, pick locators and see actionability logs.
![Playwright Inspector](https://user-images.githubusercontent.com/13063165/212924587-4b84e5f6-b147-40e9-8c75-d7b9ab6b7ca1.png)
### Run in debug mode[​](https://playwright.dev/docs/debug#run-in-debug-mode-1 "Direct link to Run in debug mode")
Run your tests with the `--debug` flag to open the inspector. This configures Playwright for debugging and opens the inspector. Additional useful defaults are configured when `--debug` is used:
  * Browsers launch in headed mode
  * Default timeout is set to 0 (= no timeout)


#### Debug all tests on all browsers[​](https://playwright.dev/docs/debug#debug-all-tests-on-all-browsers "Direct link to Debug all tests on all browsers")
To debug all tests run the test command with the `--debug` flag. This will run tests one by one, and open the inspector and a browser window for each test.
```
npx playwright test--debug  

```

#### Debug one test on all browsers[​](https://playwright.dev/docs/debug#debug-one-test-on-all-browsers "Direct link to Debug one test on all browsers")
To debug one test on a specific line, run the test command followed by the name of the test file and the line number of the test you want to debug, followed by the `--debug` flag. This will run a single test in each browser configured in your [`playwright.config`](https://playwright.dev/docs/test-projects#configure-projects-for-multiple-browsers) and open the inspector.
```
npx playwright test example.spec.ts:10 --debug  

```

#### Debug on a specific browser[​](https://playwright.dev/docs/debug#debug-on-a-specific-browser "Direct link to Debug on a specific browser")
In Playwright you can configure projects in your [`playwright.config`](https://playwright.dev/docs/test-projects#configure-projects-for-multiple-browsers). Once configured you can then debug your tests on a specific browser or mobile viewport using the `--project` flag followed by the name of the project configured in your `playwright.config`.
```
npx playwright test--project=chromium --debug  
npx playwright test--project="Mobile Safari"--debug  
npx playwright test--project="Microsoft Edge"--debug  

```

#### Debug one test on a specific browser[​](https://playwright.dev/docs/debug#debug-one-test-on-a-specific-browser "Direct link to Debug one test on a specific browser")
To run one test on a specific browser add the name of the test file and the line number of the test you want to debug as well as the `--project` flag followed by the name of the project.
```
npx playwright test example.spec.ts:10 --project=webkit --debug  

```

### Stepping through your tests[​](https://playwright.dev/docs/debug#stepping-through-your-tests "Direct link to Stepping through your tests")
You can play, pause or step through each action of your test using the toolbar at the top of the Inspector. You can see the current action highlighted in the test code, and matching elements highlighted in the browser window.
![Playwright Inspector and browser](https://user-images.githubusercontent.com/13063165/212936618-84b87acc-bc2e-46ed-994b-32b2ef742e60.png)
### Run a test from a specific breakpoint[​](https://playwright.dev/docs/debug#run-a-test-from-a-specific-breakpoint "Direct link to Run a test from a specific breakpoint")
To speed up the debugging process you can add a [page.pause()](https://playwright.dev/docs/api/class-page#page-pause) method to your test. This way you won't have to step through each action of your test to get to the point where you want to debug.
```
await page.pause();  

```

Once you add a `page.pause()` call, run your tests in debug mode. Clicking the "Resume" button in the Inspector will run the test and only stop on the `page.pause()`.
![test with page.pause](https://user-images.githubusercontent.com/13063165/219473050-122be4c2-31d0-4cbd-aa8b-8588e8b781a6.png)
### Live editing locators[​](https://playwright.dev/docs/debug#live-editing-locators "Direct link to Live editing locators")
While running in debug mode you can live edit the locators. Next to the 'Pick Locator' button there is a field showing the [locator](https://playwright.dev/docs/locators) that the test is paused on. You can edit this locator directly in the **Pick Locator** field, and matching elements will be highlighted in the browser window.
![live editing locators](https://user-images.githubusercontent.com/13063165/212980815-1cf6ef7b-e69a-496c-898a-ec603a3bc562.png)
### Picking locators[​](https://playwright.dev/docs/debug#picking-locators "Direct link to Picking locators")
While debugging, you might need to choose a more resilient locator. You can do this by clicking on the **Pick Locator** button and hovering over any element in the browser window. While hovering over an element you will see the code needed to locate this element highlighted below. Clicking an element in the browser will add the locator into the field where you can then either tweak it or copy it into your code.
![Picking locators](https://user-images.githubusercontent.com/13063165/212968640-ce82a027-9277-4bdf-b0a9-6282fb2becb7.png)
Playwright will look at your page and figure out the best locator, prioritizing [role, text and test id locators](https://playwright.dev/docs/locators). If Playwright finds multiple elements matching the locator, it will improve the locator to make it resilient and uniquely identify the target element, so you don't have to worry about failing tests due to locators.
### Actionability logs[​](https://playwright.dev/docs/debug#actionability-logs "Direct link to Actionability logs")
By the time Playwright has paused on a click action, it has already performed [actionability checks](https://playwright.dev/docs/actionability) that can be found in the log. This can help you understand what happened during your test and what Playwright did or tried to do. The log tells you if the element was visible, enabled and stable, if the locator resolved to an element, scrolled into view, and so much more. If actionability can't be reached, it will show the action as pending.
![Actionability Logs](https://user-images.githubusercontent.com/13063165/212968907-5dede739-e0e3-482a-91cd-726a0f5b0b6d.png)
## Trace Viewer[​](https://playwright.dev/docs/debug#trace-viewer "Direct link to Trace Viewer")
Playwright [Trace Viewer](https://playwright.dev/docs/trace-viewer) is a GUI tool that lets you explore recorded Playwright traces of your tests. You can go back and forward through each action on the left side, and visually see what was happening during the action. In the middle of the screen, you can see a DOM snapshot for the action. On the right side you can see action details, such as time, parameters, return value and log. You can also explore console messages, network requests and the source code.
To learn more about how to record traces and use the Trace Viewer, check out the [Trace Viewer](https://playwright.dev/docs/trace-viewer) guide.
## Browser Developer Tools[​](https://playwright.dev/docs/debug#browser-developer-tools "Direct link to Browser Developer Tools")
When running in Debug Mode with `PWDEBUG=console`, a `playwright` object is available in the Developer tools console. Developer tools can help you to:
  * Inspect the DOM tree and **find element selectors**
  * **See console logs** during execution (or learn how to [read logs via API](https://playwright.dev/docs/api/class-page#page-event-console))
  * Check **network activity** and other developer tools features


This will also set the default timeouts of Playwright to 0 (= no timeout).
![Browser Developer Tools with Playwright object](https://user-images.githubusercontent.com/13063165/219128002-898f604d-9697-4b7f-95b5-a6a8260b7282.png)
To debug your tests using the browser developer tools, start by setting a breakpoint in your test to pause the execution using the [page.pause()](https://playwright.dev/docs/api/class-page#page-pause) method.
```
await page.pause();  

```

Once you have set a breakpoint in your test, you can then run your test with `PWDEBUG=console`.
  * Bash
  * PowerShell
  * Batch


```
PWDEBUG=console npx playwright test  

```

```
$env:PWDEBUG="console"  
npx playwright test  

```

```
setPWDEBUG=console  
npx playwright test  

```

Once Playwright launches the browser window, you can open the developer tools. The `playwright` object will be available in the console panel.
#### playwright.$(selector)[​](https://playwright.dev/docs/debug#playwrightselector "Direct link to playwright.$\(selector\)")
Query the Playwright selector, using the actual Playwright query engine, for example:
```
playwright.$('.auth-form >>text=Log in');  
  
<button>Log in</button>  

```

#### playwright.$$(selector)[​](https://playwright.dev/docs/debug#playwrightselector-1 "Direct link to playwright.$$\(selector\)")
Same as `playwright.$`, but returns all matching elements.
```
playwright.$$('li >>text=John')  
  
[<li>, <li>, <li>, <li>]  

```

#### playwright.inspect(selector)[​](https://playwright.dev/docs/debug#playwrightinspectselector "Direct link to playwright.inspect\(selector\)")
Reveal element in the Elements panel.
```
playwright.inspect('text=Log in')  

```

#### playwright.locator(selector)[​](https://playwright.dev/docs/debug#playwrightlocatorselector "Direct link to playwright.locator\(selector\)")
Create a locator and query matching elements, for example:
```
playwright.locator('.auth-form', { hasText: 'Log in'});  
  
Locator ()  
  - element: button  
  - elements: [button]  

```

#### playwright.selector(element)[​](https://playwright.dev/docs/debug#playwrightselectorelement "Direct link to playwright.selector\(element\)")
Generates selector for the given element. For example, select an element in the Elements panel and pass `$0`:
```
playwright.selector($0)  
  
"div[id="glow-ingress-block"] >> text=/.*Hello.*/"  

```

## Verbose API logs[​](https://playwright.dev/docs/debug#verbose-api-logs "Direct link to Verbose API logs")
Playwright supports verbose logging with the `DEBUG` environment variable.
  * Bash
  * PowerShell
  * Batch


```
DEBUG=pw:api npx playwright test  

```

```
$env:DEBUG="pw:api"  
npx playwright test  

```

```
setDEBUG=pw:api  
npx playwright test  

```

**For WebKit** : launching WebKit Inspector during the execution will prevent the Playwright script from executing any further and will reset pre-configured user agent and device emulation.
## Headed mode[​](https://playwright.dev/docs/debug#headed-mode "Direct link to Headed mode")
Playwright runs browsers in headless mode by default. To change this behavior, use `headless: false` as a launch option.
You can also use the [slowMo](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-option-slow-mo) option to slow down execution (by N milliseconds per operation) and follow along while debugging.
```
// Chromium, Firefox, or WebKit  
await chromium.launch({headless:false,slowMo:100});  

```

[Previous Components (experimental)](https://playwright.dev/docs/test-components)[Next Dialogs](https://playwright.dev/docs/dialogs)
  * [VS Code debugger](https://playwright.dev/docs/debug#vs-code-debugger)
    * [Error Messages](https://playwright.dev/docs/debug#error-messages)
    * [Live Debugging](https://playwright.dev/docs/debug#live-debugging)
    * [Picking a Locator](https://playwright.dev/docs/debug#picking-a-locator)
    * [Run in Debug Mode](https://playwright.dev/docs/debug#run-in-debug-mode)
    * [Debug Tests Using Chrome DevTools](https://playwright.dev/docs/debug#debug-tests-using-chrome-devtools)
    * [Debug in different Browsers](https://playwright.dev/docs/debug#debug-in-different-browsers)
  * [Playwright Inspector](https://playwright.dev/docs/debug#playwright-inspector)
    * [Run in debug mode](https://playwright.dev/docs/debug#run-in-debug-mode-1)
    * [Stepping through your tests](https://playwright.dev/docs/debug#stepping-through-your-tests)
    * [Run a test from a specific breakpoint](https://playwright.dev/docs/debug#run-a-test-from-a-specific-breakpoint)
    * [Live editing locators](https://playwright.dev/docs/debug#live-editing-locators)
    * [Picking locators](https://playwright.dev/docs/debug#picking-locators)
    * [Actionability logs](https://playwright.dev/docs/debug#actionability-logs)
  * [Trace Viewer](https://playwright.dev/docs/debug#trace-viewer)
  * [Browser Developer Tools](https://playwright.dev/docs/debug#browser-developer-tools)
  * [Verbose API logs](https://playwright.dev/docs/debug#verbose-api-logs)
  * [Headed mode](https://playwright.dev/docs/debug#headed-mode)


Learn
  * [Getting started](https://playwright.dev/docs/intro)
  * [Playwright Training](https://learn.microsoft.com/en-us/training/modules/build-with-playwright/)
  * [Learn Videos](https://playwright.dev/community/learn-videos)
  * [Feature Videos](https://playwright.dev/community/feature-videos)


Community
  * [Stack Overflow](https://stackoverflow.com/questions/tagged/playwright)
  * [Discord](https://aka.ms/playwright/discord)
  * [Twitter](https://twitter.com/playwrightweb)
  * [LinkedIn](https://www.linkedin.com/company/playwrightweb)


More
  * [GitHub](https://github.com/microsoft/playwright)
  * [YouTube](https://www.youtube.com/channel/UC46Zj8pDH5tDosqm1gd7WTg)
  * [Blog](https://dev.to/playwright)
  * [Ambassadors](https://playwright.dev/community/ambassadors)


Copyright © 2025 Microsoft
 (success: true, hasMarkdown: true, hasDescription: true)
[xtcymb] Source 6 keep: No items found.
# **Gravitee Acquires Ambassador Labs**
We’re excited to share that Ambassador Labs is now part of Gravitee! [Read More](https://www.getambassador.io/blog/ambassador-labs-gravitee-what-our-acquisition-means-for-you)
‍
[![](https://cdn.prod.website-files.com/674f5d8f3e985f9a41ea81e2/674f63bdfc05cd7fbfceebcf_Ambassador-Logo-Horizontal-White.svg)](https://www.getambassador.io/)
Products
[![](https://cdn.prod.website-files.com/674f5d8f3e985f9a41ea81e2/67f40bd167a5def0ca5254ca_blackbird-teal.png) Blackbird API Development Platform Accelerate development of prod-ready APIs. ](https://www.getambassador.io/products/blackbird/api-development)[ Edge Stack API Gateway Best-in-class Kubernetes-native API gateway. ](https://www.getambassador.io/products/edge-stack/api-gateway)
Solutions
Solution highlights
[APIs and AI](https://www.getambassador.io/solutions/apis-and-ai)[API Discovery](https://www.getambassador.io/solutions/discover-catalog-manage-apis)[Closing the Gap](https://www.getambassador.io/solutions/closing-api-visibility-gap)[Enterprise Solution](https://www.getambassador.io/blackbird-enterprise-solution)
Against the competition
[Blackbird vs. Postman](https://www.getambassador.io/solutions/blackbird-postman)[Blackbird vs. Insomnia](https://www.getambassador.io/solutions/blackbird-insomnia)[Blackbird vs. SmartBear](https://www.getambassador.io/solutions/blackbird-smartbear)
By Industry
[Automotive Industry](https://www.getambassador.io/solutions/automotive-industry)[Financial Industry](https://www.getambassador.io/solutions/financial-industry)[Healthcare Industry](https://www.getambassador.io/solutions/healthcare-industry)[SaaS Industry](https://www.getambassador.io/solutions/saas-industry)
By Use Case
[Enable parallel development](https://www.getambassador.io/solutions/parallel-development)[Kubernetes local dev environment](https://www.getambassador.io/use-case/productive-local-dev-environment)[Mock APIs in seconds](https://www.getambassador.io/solutions/validate-spec-with-blackbird)[Reduce development costs](https://www.getambassador.io/solutions/reduce-development-costs)[Sandbox better with Blackbird](https://www.getambassador.io/solutions/blackbird-sandbox)
[Pricing](https://www.getambassador.io/pricing)
Resources
[ Future-proof your dev environments. Download our free eBook.  
](https://www.getambassador.io/resources/optimize-development-container-environments)
Learn
[Blog](https://www.getambassador.io/blog)[Resource Library](https://www.getambassador.io/resources)[Kubernetes Glossary](https://www.getambassador.io/kubernetes-glossary)[API Security Course](https://www.getambassador.io/courses/apisec-api-gateway-security-best-practices)
Explore
[Webinars](https://www.getambassador.io/webinars)[Podcast](https://www.getambassador.io/podcasts)[Events](https://www.getambassador.io/events)[Demo Center](https://www.getambassador.io/demo-center)[Advocate Program](https://www.getambassador.io/ambassador-community-advocates-draft)
Company
[About Ambassador](https://www.getambassador.io/company/about-us)[Case Studies](https://www.getambassador.io/case-studies)[Careers](https://www.getambassador.io/company/careers)[Newsroom](https://www.getambassador.io/news)[Partnerships](https://www.getambassador.io/company/partnerships)
Docs
[Documentation](https://www.getambassador.io/docs)
Quick Start
[Blackbird Guide](https://www.getambassador.io/docs/blackbird)[Edge Stack Guide](https://www.getambassador.io/docs/edge-stack/latest/tutorials/getting-started/)[Telepresence Guide](https://www.getambassador.io/docs/telepresence/latest/quick-start/)
Log In
choose your login
[![](https://cdn.prod.website-files.com/674f5d8f3e985f9a41ea81e2/67f40bd167a5def0ca5254ca_blackbird-teal.png)Blackbird](https://blackbird.a8r.io/)[Edge Stack](https://www.getambassador.io/pricing/edge-stack-enterprise)
Choose your Product
[![](https://cdn.prod.website-files.com/674f5d8f3e985f9a41ea81e2/67f40bd167a5def0ca5254ca_blackbird-teal.png)Blackbird](https://blackbird.a8r.io/)[Edge Stack](https://www.getambassador.io/pricing/edge-stack-enterprise)
[Book a Demo](https://www.getambassador.io/contact-us)
[Back to Blog](https://www.getambassador.io/blog)
[API Development](https://www.getambassador.io/tagged/api-design-development-secrets-jason-harmon)
# End-to-End API Testing: How Mocking and Debugging Work Together
![Prince Onyeanuna](https://cdn.prod.website-files.com/674fb85af49bab124a22eb75/67881dea5668cd4745f549ec_prince-onyeanuna.avif)
Prince Onyeanuna
January 13, 2025
•
8 minute read
Let's say you're conducting an API test. In this process, you'll be running through a series of requests just to ensure that everything functions as expected. You've tested each part — every request, response, and piece of data — and everything looks good individually. But when you bring it all together — the requests interacting with various services, the data flowing through different components, and the responses returning from multiple sources — things start to _fall apart_.
Some responses are slow, others are missing crucial data, and suddenly, the system isn't behaving as you expected. You're left wondering where it all went wrong.
Without a proper approach to handling these challenges, you could spend hours, or even days, trying to trace and fix the issues. This is where relying on end-to-end API testing becomes invaluable because it not only simplifies the testing process but also helps you pinpoint and fix issues more efficiently.
Let’s walk through what end-to-end testing in APIs is all about and how [API mocking](https://www.getambassador.io/blog/api-mocking-vs-api-stubbing-differences) and debugging work together to streamline this process.
## What is end-to-end API testing?
End-to-end API testing is a software testing method that validates the entire software system from start to finish. This method ensures that the integrated components of an application function as expected and that data integrity is maintained between the components and systems.
In the context of APIs, end-to-end testing involves testing the entire API workflow, from the client request to the server response.
End-to-end API testing is essential for verifying that all the components of an application work together as expected and that the application behaves correctly in real-world scenarios. It helps identify issues that may arise due to the interaction between different components and ensures that your application meets the requirements and expectations of its end-users.
![End to end API testing](https://cdn.prod.website-files.com/674fb85af49bab124a22eb75/679aa1332a6cd3e46b010730_fb1b938895ab1b6cd4d2633a5d681ffe994aba7b-328x512.png)
‍
The goal of end-to-end API testing is to make sure that all the different parts of the system work together seamlessly. You test the entire process, from making a request to the API to getting a response and ensuring that the response is correct. This type of testing helps identify issues that might not be obvious when testing individual parts of the system in isolation.
## Why is end-to-end API testing important?
  * **Identifying issues early** : End-to-end API testing helps catch problems early in the development process by testing the entire workflow. This means you can fix issues before they impact the final product, saving time and resources down the line.
  * **Ensuring data integrity** : By simulating real-world scenarios, end-to-end API testing verifies that data remains accurate and consistent as it moves through different components. This ensures that your users receive the correct information, reducing the chances of data corruption or loss.
  * **Improving user experience** : When all parts of the system work seamlessly together, users experience a smoother, more reliable application. End-to-end API testing helps uncover hidden bugs that might affect a user's journey, leading to a better overall experience.
  * **Reducing risks** : Thorough testing of the entire system reduces the risk of unexpected failures in production. By catching potential issues during testing, you minimize the chance of costly downtime or negative user feedback after release.
  * **Increasing confidence** : Knowing that your application has been tested end-to-end boosts confidence in its stability and performance. This assurance allows your dev team and stakeholders to move forward with fewer concerns about unanticipated problems.


## The role of Mocking in API testing
In the real world, APIs often rely on external services, databases, or third-party APIs, which may not always be available or easy to use during testing. This is where API mocking becomes a powerful tool.
Mocking in API testing involves creating simulated versions of these external services, allowing you to test your API in a controlled and predictable environment.
By using mocks, you can simulate how the API should behave under different conditions, even when the actual services are _unavailable_. This not only speeds up the testing process but also allows you to test specific scenarios that might be difficult to reproduce with real services. For example, you can simulate slow responses, errors, or specific data conditions without needing the actual backend systems.
One tool that makes mocking APIs even more effective is [Blackbird](https://www.getambassador.io/products/blackbird/api-development). With Blackbird, you can easily create and manage your mock services, making the entire testing process more streamlined and efficient. Blackbird also allows you to set up dynamic mocks that can respond with different data depending on the requests, helping you cover a wide range of test cases effortlessly.
Mocking simplifies API testing by giving you complete control over the testing environment. It reduces dependencies on external services, making your tests more reliable and faster. By integrating tools like Blackbird, you can further enhance this process, ensuring your API behaves as expected in various scenarios while saving time and resources.
Mocking is particularly useful in API testing for the following reasons:
  * **Isolating the API under test** : By mocking external dependencies, you can focus on testing the API itself without worrying about the behavior of other services. This isolation makes it easier to identify issues specific to the API and ensures that your tests are more targeted and effective.
  * **Creating predictable test scenarios** : Mocking allows you to define specific responses for different test scenarios, making your tests more predictable and repeatable. You can simulate various conditions, such as network errors or server timeouts, to ensure that your API behaves correctly in different situations.
  * **Speeding up test execution** : Mocking eliminates the need to make real network requests, which can slow down test execution. By using mocks, you can run your tests more quickly and efficiently, enabling faster feedback on the quality of your API.
  * **Reducing test flakiness** : External dependencies can introduce flakiness into your tests, causing them to fail intermittently. By mocking these dependencies, you can eliminate this source of instability and make your tests more reliable and robust.
  * **Facilitating parallel testing** : Mocking allows you to run tests in parallel without worrying about shared resources or external dependencies. This enables you to scale your testing efforts more easily and speed up the feedback loop on your API changes.


## Debugging in API testing
While mocking helps simplify [API testing](https://www.getambassador.io/blog/api-testing-guide) by creating controlled environments, debugging plays a crucial role in identifying and fixing issues that arise during testing.
Debugging is the process of finding and resolving defects or unexpected behavior in your code. This ensures that your API functions correctly under different conditions.
When testing APIs, debugging helps you trace the flow of data, identify bottlenecks, and pinpoint the root cause of failures. By stepping through your code, inspecting variables, and analyzing your API's behavior, you can gain valuable insights into how it operates and where potential issues lie.
When debugging complex API scenarios, you need tools that allow you to investigate the problem in depth, especially in environments that closely mimic production. This ensures that you catch issues that might only appear in real-world usage. Effective debugging tools provide insights into API behavior, making it easier to pinpoint the root cause of problems.
Blackbird enhances this debugging process with its [Blackbird Code Run](https://www.getambassador.io/docs/blackbird/latest/guides/code#build-and-run-a-local-container-with-a-remote-server/) and [Blackbird Code Debug](https://www.getambassador.io/docs/blackbird/latest/guides/code#build-and-debug-a-local-container-with-a-remote-server/) features. These tools allow you to run and debug API code locally while simulating cloud traffic, providing a production-like environment. This setup optimizes your [pre-CI/CD testing](https://www.getambassador.io/blog/keep-development-aligned-blackbird-ci-cd-pipeline) process, giving you a more accurate picture of how your APIs will perform in the real world.
Additionally, Blackbird offers the ability to share a URL for your team to collaborate in the same environment, making debugging a team effort. This feature ensures that everyone is on the same page and can contribute to resolving issues more efficiently.
By leveraging tools like Blackbird, debugging becomes a more streamlined and collaborative process. This helps you identify and fix complex issues before they reach production, improving the quality of your APIs and saving time and resources in the long run.
**Some common debugging techniques in API testing include:**
  * **Logging** : Adding log statements to your code helps track the flow of data and identify issues during testing. By [logging ](https://www.getambassador.io/blog/understanding-envoy-proxy-http-access-logs)relevant information, such as request parameters, response data, and error messages, you can gain visibility into your API's behavior and troubleshoot problems more effectively.
  * **Breakpoints** : Setting breakpoints in your code allows you to pause execution at specific points and inspect the state of your application. By examining variables, stepping through code, and evaluating the flow of data, you can identify issues and understand how your API behaves under different conditions.
  * **Error handling** : Implementing robust error handling mechanisms helps catch and handle exceptions that occur during testing. By anticipating potential errors and defining appropriate responses, you can prevent unexpected failures and ensure that your API remains stable and reliable.


## Integrating mocking and debugging for efficient testing
To streamline your API testing process, it's essential to integrate api mocking and debugging effectively. By combining these techniques, you can create a comprehensive testing strategy that simplifies the identification and resolution of issues, ensuring that your APIs function as expected in real-world scenarios.
Let's say you're working on an API for an eCommerce platform. Your API needs to communicate with several external services: a payment gateway, a shipping provider, and a customer database. During testing, you notice that the payment gateway is down for maintenance and the shipping provider's API is responding slowly. These real-world issues could halt your testing process, but this is where mocking comes to the rescue.
You start by mocking the payment gateway and shipping provider services. Instead of waiting for the real services to be available or dealing with their slow responses, you create mock versions that simulate their behavior. This allows you to continue testing the API's functionality without any delays. You can set up different scenarios, like successful payments, failed transactions, or delayed shipments, to see how your API handles them.
![End to end API testing](https://cdn.prod.website-files.com/674fb85af49bab124a22eb75/679aa133d26cc1be20ba96c2_f30999a7d7a0c07f895f892d38a1234813f8ac50-512x154.png)
‍
As you test with these mocks, you notice that your API behaves unexpectedly when the mock shipping provider responds with an error. Here's where debugging comes into play. You use your debugging tools to trace the API's behavior when it encounters this error. With Blackbird Debugging, you run your API code locally, simulating the cloud traffic that it would handle in production. This gives you a clear view of what's happening at each step.
You spot the issue: the API isn't correctly handling the error response from the shipping provider. Thanks to the detailed breakpoints provided by debugging, you quickly identify the part of the code that needs fixing. After making the necessary adjustments, you run your tests again, using the same mocked scenarios to verify that the fix works as expected.
Throughout this process, mocking and debugging work hand in hand. API mocking provides a controlled environment to simulate real-world conditions, while debugging offers the tools to investigate and resolve any issues in the code. Together, they ensure your API is robust and ready to handle various scenarios before going live.
## **Best practices for mocking and debugging in API testing**
To make the most of mocking and debugging in API testing, consider the following best practices:
  * **Use realistic scenarios** : When creating mock services, simulate scenarios that closely resemble real-world conditions. This ensures that your tests are relevant and provide meaningful insights into how your API behaves in production.
  * **Automate your tests** : Implement automated testing frameworks that integrate mocking and debugging tools. This allows you to run tests consistently and efficiently, catching issues early in the development process.
  * **Collaborate with your team** : Share your mock services and debugging insights with your team to foster collaboration and knowledge sharing. By working together, you can resolve issues more effectively and ensure that everyone is aligned on the testing process.
  * **Monitor performance** : Keep an eye on the performance of your API during testing, especially when using mock services. Ensure that your API responds within acceptable time frames and that it can handle the expected load without issues.
  * **Continuously improve** : Regularly review your testing process and look for ways to optimize it. Incorporate feedback from your team and stakeholders to refine your approach and ensure that your APIs are thoroughly tested before release.


With all of this, you want to use a tool that can help you with both mocking and debugging. Blackbird is a great option for this, as it provides a comprehensive platform for creating mock services, running and debugging API code, and collaborating with your team. By leveraging Blackbird's features, you can streamline your API testing process and ensure that your APIs are robust and reliable.
## End-to-End API Testing is Your Friend
End to end API testing is essential for ensuring that your APIs work seamlessly in real-world scenarios. By integrating API mocking and debugging into your testing process, you can simulate complex environments, catch issues early, and ensure that your APIs handle every situation smoothly.
Mocking allows you to test without depending on external services, while debugging provides the insights needed to fix issues quickly and efficiently. Together, they create a powerful combination that enhances the reliability of your APIs.
Now that you've seen how mocking and debugging can transform your API testing, it's time to put these techniques into practice.
‍
## Blackbird API Development
Try Blackbird to streamline your API testing, save time, and boost development efficiency.
[Start Free Trial](https://blackbird.a8r.io?utm_source=seo-blog&utm_medium=a-website&utm_campaign=se-contetnt-bb)[Contact Sales](https://www.getambassador.io/blackbird-contact-us)
Contents
[What is end-to-end API testing?](https://www.getambassador.io/blog/master-end-to-end-api-testing#what-is-end-to-end-api-testing)
[Why is end-to-end API testing important?](https://www.getambassador.io/blog/master-end-to-end-api-testing#why-is-end-to-end-api-testing-important)
[The role of Mocking in API testing](https://www.getambassador.io/blog/master-end-to-end-api-testing#the-role-of-mocking-in-api-testing)
[Debugging in API testing](https://www.getambassador.io/blog/master-end-to-end-api-testing#debugging-in-api-testing)
[Integrating mocking and debugging for efficient testing](https://www.getambassador.io/blog/master-end-to-end-api-testing#integrating-mocking-and-debugging-for-efficient-testing)
[Best practices for mocking and debugging in API testing](https://www.getambassador.io/blog/master-end-to-end-api-testing#best-practices-for-mocking-and-debugging-in-api-testing)
[End-to-End API Testing is Your Friend](https://www.getambassador.io/blog/master-end-to-end-api-testing#end-to-end-api-testing-is-your-friend)
[![](https://cdn.prod.website-files.com/674f5d8f3e985f9a41ea81e2/674f63bdfc05cd7fbfceebcf_Ambassador-Logo-Horizontal-White.svg)](https://www.getambassador.io/)
Simplify your API development experience.
Subscribe to our newsletter
Email*
Products
[Blackbird API Development](https://www.getambassador.io/products/blackbird/api-development)[Edge Stack](https://www.getambassador.io/products/edge-stack/api-gateway)[Pricing](https://www.getambassador.io/pricing)
Open Source
[Emissary Ingress](https://www.getambassador.io/products/api-gateway)[Envoy Proxy](https://www.getambassador.io/learn/envoy-proxy)
Resources
[Blog](https://www.getambassador.io/blog)[Demo Center](https://www.getambassador.io/demo-center)[Documentation](https://www.getambassador.io/docs)[FAQs](https://www.getambassador.io/faq)[Kubernetes Glossary](https://www.getambassador.io/kubernetes-glossary)[Kubernetes Learning Center](https://www.getambassador.io/kubernetes-learning-center)[Resource Library](https://www.getambassador.io/resources)[Case Studies](https://www.getambassador.io/case-studies)
Company
[About Us](https://www.getambassador.io/company/about-us)[Careers](https://www.getambassador.io/company/careers)[Contact Us](https://www.getambassador.io/contact-us)[Newsroom](https://www.getambassador.io/news)[Partnerships](https://www.getambassador.io/company/partnerships)[Privacy Policy](https://www.getambassador.io/privacy-policy)[Support](https://www.getambassador.io/support)[Terms of Service](https://www.getambassador.io/terms-of-service)
Engage
[Events](https://www.getambassador.io/events)[Webinars](https://www.getambassador.io/webinars)
[](https://a8r.io/slack)[](https://github.com/datawire)[](https://www.linkedin.com/company/ambassadorlabs/)[](https://x.com/ambassadorlabs)[](https://www.youtube.com/c/AmbassadorLabs)
©2025 Datawire, Inc. (d/b/a Ambassador). All rights reserved.
[![](https://d3e54v103j8qbb.cloudfront.net/img/webflow-badge-icon-d2.89e12c322e.svg)![Made in Webflow](https://d3e54v103j8qbb.cloudfront.net/img/webflow-badge-text-d2.c82cec3b78.svg)](https://webflow.com?utm_campaign=brandjs)
 (success: true, hasMarkdown: true, hasDescription: true)
[xtcymb] ✅ Filtered to 6 sources
[xtcymb] Query: "test backend debug events" -> Detected ticker: null
[xtcymb] 📝 Preparing context from 6 sources...
[xtcymb] Source 1 context:
[xtcymb]   • Original content length: 19656
[xtcymb]   • Relevant content length: 2000
[xtcymb]   • Success indicator: ""
[xtcymb] Source 2 context:
[xtcymb]   • Original content length: 6530
[xtcymb]   • Relevant content length: 2000
[xtcymb]   • Success indicator: ""
[xtcymb] Source 3 context:
[xtcymb]   • Original content length: 64606
[xtcymb]   • Relevant content length: 2000
[xtcymb]   • Success indicator: ""
[xtcymb] Source 4 context:
[xtcymb]   • Original content length: 1
[xtcymb]   • Relevant content length: 0
[xtcymb]   • Success indicator: " (search snippet only)"
[xtcymb] Source 5 context:
[xtcymb]   • Original content length: 23609
[xtcymb]   • Relevant content length: 2000
[xtcymb]   • Success indicator: ""
[xtcymb] Source 6 context:
[xtcymb]   • Original content length: 23329
[xtcymb]   • Relevant content length: 2000
[xtcymb]   • Success indicator: ""
[xtcymb] ✅ Final context length: 10781
[xtcymb] 💬 Creating text stream for query: test backend debug events
[xtcymb] 📝 Context length: 10781
[xtcymb] ✅ Successful crawls: 5/6
[xtcymb] 🎬 Video sources in final context: 0
[xtcymb] 👁️ Context preview: [1] Firebase Documentation
URL: https://firebase.google.com/docs/analytics/debugview
[ Skip to main content ](https://firebase.google.com/docs/analytics/debugview#main-content)
[ ![Firebase](https://www.gstatic.com/devrel-devsite/prod/vfbd11e784c22f4aaa184963b528a22b42504e1842229d6f6f6b59838a38023ff/firebase/images/lockup.svg) ](https://firebase.google.com/)
[ Build ](https://firebase.google.com/products-build)
  * Build
  * Get to market quickly and securely with products that can scale globall...
❌ Cache MISS for key: 343c18b0...
[xtcymb] 🐛 DEBUG CALLBACK CALLED: request completion
[xtcymb] 🐛 Sending debug event: {
  id: 'h324ca90y',
  timestamp: '2025-08-01T11:59:54.849Z',
  type: 'request',
  data: {
    type: 'completion',
    model: 'gpt-4o-mini',
    messages: [ [Object], [Object] ],
    parameters: { temperature: 0.7, max_tokens: 150, task_type: 'followup' },
    prompt_preview: 'Query: test backend debug events\n' +
      '\n' +
      'Conversation context:\n' +
      'user: test backend debug events\n' +
      '\n' +
      'Available sources about: Firebase Documentation, About Backend Events, Segment Documentation | Segment Document...'
  }
}
[xtcymb] Generating new LLM response
[xtcymb] 🤖 Sending LLM request debug event: {
  id: '71ud6bzwa',
  timestamp: '2025-08-01T11:59:54.851Z',
  debugType: 'llm_request',
  data: {
    type: 'llm_request',
    model: 'gpt-4o-mini',
    provider: 'unknown',
    parameters: {
      temperature: 0.7,
      max_tokens: 2000,
      top_p: 1,
      frequency_penalty: 0
    },
    cacheHit: false,
    message: 'LLM Request: gpt-4o-mini (temp=0.7)',
    prompt_preview: 'Answer this query: "test backend debug events"\n' +
      '\n' +
      'Based on these sources:\n' +
      '[1] Firebase Documentation\n' +
      'U...',
    message_count: 2
  }
}
[xtcymb] 🐛 DEBUG CALLBACK CALLED: request stream
[xtcymb] 🐛 Sending debug event: {
  id: 'jpbs76mup',
  timestamp: '2025-08-01T11:59:54.851Z',
  type: 'request',
  data: {
    type: 'stream',
    model: 'gpt-4o-mini',
    messages: [ [Object], [Object] ],
    parameters: { temperature: 0.7, max_tokens: 2000, task_type: 'search' },
    prompt_preview: 'Answer this query: "test backend debug events"\n' +
      '\n' +
      'Based on these sources:\n' +
      '[1] Firebase Documentation\n' +
      'URL: https://firebase.google.com/docs/analytics/debugview\n' +
      '[ Skip to main content ](https://firebase.g...'
  }
}
[xtcymb] 🐛 DEBUG CALLBACK CALLED: response completion
[xtcymb] 🐛 Sending debug event: {
  id: 'aa3frsr0f',
  timestamp: '2025-08-01T11:59:57.666Z',
  type: 'response',
  data: {
    type: 'completion',
    model: 'gpt-4o-mini',
    content_length: 504,
    finish_reason: 'stop',
    success: true
  }
}
[xtcymb] 🤖 Sending LLM response debug event: {
  id: 'e9s1bw94x',
  timestamp: '2025-08-01T12:00:04.231Z',
  debugType: 'llm_response',
  data: {
    type: 'llm_response',
    model: 'gpt-4o-mini',
    provider: 'unknown',
    responseTime: 9380,
    responseTimeFormatted: '9.38s',
    contentLength: 2265,
    cacheHit: false,
    message: 'LLM Response: gpt-4o-mini - 9.38s'
  }
}
💾 Cached data for key: 343c18b0... (TTL: 1800s)
 POST /api/crawlplexity/search 200 in 49924ms
 ✓ Compiled in 349ms
 ✓ Compiled in 324ms
 GET / 200 in 741ms
Crawlplexity Chat State: {
  messagesCount: 0,
  sourcesCount: 0,
  isLoading: false,
  error: undefined
}
[?25h
